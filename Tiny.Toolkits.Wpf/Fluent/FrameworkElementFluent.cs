using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Net.Cache;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;

using Calendar = System.Windows.Controls.Calendar;
using Path = System.Windows.Shapes.Path;
using PopupControl = System.Windows.Controls.Primitives.Popup;

namespace Tiny.Toolkits
{



    /// <summary>                                                                                                                    
    /// <see cref="DataTrigger"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DataTriggerFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DataTrigger.Binding"/> property of the current <see cref="DataTrigger"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataTrigger</typeparam>                                                                       
        /// <param name=" dataTrigger">current <see cref="DataTrigger"/></param>                                                          
        /// <param name="binding">binding value</param>                                                                            
        /// <returns>current dataTrigger</returns>                                                                                    
        public static TType Binding<TType>(this TType dataTrigger, BindingBase binding) where TType : notnull, DataTrigger
        {
            dataTrigger.Binding = binding;
            return dataTrigger;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataTrigger.Value"/> property of the current <see cref="DataTrigger"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataTrigger</typeparam>                                                                       
        /// <param name=" dataTrigger">current <see cref="DataTrigger"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current dataTrigger</returns>                                                                                    
        public static TType Value<TType>(this TType dataTrigger, Object value) where TType : notnull, DataTrigger
        {
            dataTrigger.Value = value;
            return dataTrigger;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EventTrigger"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EventTriggerFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EventTrigger.RoutedEvent"/> property of the current <see cref="EventTrigger"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EventTrigger</typeparam>                                                                       
        /// <param name=" eventTrigger">current <see cref="EventTrigger"/></param>                                                          
        /// <param name="routedEvent">routedEvent value</param>                                                                            
        /// <returns>current eventTrigger</returns>                                                                                    
        public static TType RoutedEvent<TType>(this TType eventTrigger, RoutedEvent routedEvent) where TType : notnull, EventTrigger
        {
            eventTrigger.RoutedEvent = routedEvent;
            return eventTrigger;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="EventTrigger.SourceName"/> property of the current <see cref="EventTrigger"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EventTrigger</typeparam>                                                                       
        /// <param name=" eventTrigger">current <see cref="EventTrigger"/></param>                                                          
        /// <param name="sourceName">sourceName value</param>                                                                            
        /// <returns>current eventTrigger</returns>                                                                                    
        public static TType SourceName<TType>(this TType eventTrigger, String sourceName) where TType : notnull, EventTrigger
        {
            eventTrigger.SourceName = sourceName;
            return eventTrigger;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="FrameworkContentElement"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class FrameworkContentElementFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkContentElement.Style"/> property of the current <see cref="FrameworkContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkContentElement</typeparam>                                                                       
        /// <param name=" frameworkContentElement">current <see cref="FrameworkContentElement"/></param>                                                          
        /// <param name="style">style value</param>                                                                            
        /// <returns>current frameworkContentElement</returns>                                                                                    
        public static TType Style<TType>(this TType frameworkContentElement, Style style) where TType : notnull, FrameworkContentElement
        {
            frameworkContentElement.Style = style;
            return frameworkContentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkContentElement.OverridesDefaultStyle"/> property of the current <see cref="FrameworkContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkContentElement</typeparam>                                                                       
        /// <param name=" frameworkContentElement">current <see cref="FrameworkContentElement"/></param>                                                          
        /// <param name="overridesDefaultStyle">overridesDefaultStyle value</param>                                                                            
        /// <returns>current frameworkContentElement</returns>                                                                                    
        public static TType OverridesDefaultStyle<TType>(this TType frameworkContentElement, Boolean overridesDefaultStyle) where TType : notnull, FrameworkContentElement
        {
            frameworkContentElement.OverridesDefaultStyle = overridesDefaultStyle;
            return frameworkContentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkContentElement.Resources"/> property of the current <see cref="FrameworkContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkContentElement</typeparam>                                                                       
        /// <param name=" frameworkContentElement">current <see cref="FrameworkContentElement"/></param>                                                          
        /// <param name="resources">resources value</param>                                                                            
        /// <returns>current frameworkContentElement</returns>                                                                                    
        public static TType Resources<TType>(this TType frameworkContentElement, ResourceDictionary resources) where TType : notnull, FrameworkContentElement
        {
            frameworkContentElement.Resources = resources;
            return frameworkContentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkContentElement.Name"/> property of the current <see cref="FrameworkContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkContentElement</typeparam>                                                                       
        /// <param name=" frameworkContentElement">current <see cref="FrameworkContentElement"/></param>                                                          
        /// <param name="name">name value</param>                                                                            
        /// <returns>current frameworkContentElement</returns>                                                                                    
        public static TType Name<TType>(this TType frameworkContentElement, String name) where TType : notnull, FrameworkContentElement
        {
            frameworkContentElement.Name = name;
            return frameworkContentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkContentElement.Tag"/> property of the current <see cref="FrameworkContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkContentElement</typeparam>                                                                       
        /// <param name=" frameworkContentElement">current <see cref="FrameworkContentElement"/></param>                                                          
        /// <param name="tag">tag value</param>                                                                            
        /// <returns>current frameworkContentElement</returns>                                                                                    
        public static TType Tag<TType>(this TType frameworkContentElement, Object tag) where TType : notnull, FrameworkContentElement
        {
            frameworkContentElement.Tag = tag;
            return frameworkContentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkContentElement.Language"/> property of the current <see cref="FrameworkContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkContentElement</typeparam>                                                                       
        /// <param name=" frameworkContentElement">current <see cref="FrameworkContentElement"/></param>                                                          
        /// <param name="language">language value</param>                                                                            
        /// <returns>current frameworkContentElement</returns>                                                                                    
        public static TType Language<TType>(this TType frameworkContentElement, XmlLanguage language) where TType : notnull, FrameworkContentElement
        {
            frameworkContentElement.Language = language;
            return frameworkContentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkContentElement.FocusVisualStyle"/> property of the current <see cref="FrameworkContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkContentElement</typeparam>                                                                       
        /// <param name=" frameworkContentElement">current <see cref="FrameworkContentElement"/></param>                                                          
        /// <param name="focusVisualStyle">focusVisualStyle value</param>                                                                            
        /// <returns>current frameworkContentElement</returns>                                                                                    
        public static TType FocusVisualStyle<TType>(this TType frameworkContentElement, Style focusVisualStyle) where TType : notnull, FrameworkContentElement
        {
            frameworkContentElement.FocusVisualStyle = focusVisualStyle;
            return frameworkContentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkContentElement.Cursor"/> property of the current <see cref="FrameworkContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkContentElement</typeparam>                                                                       
        /// <param name=" frameworkContentElement">current <see cref="FrameworkContentElement"/></param>                                                          
        /// <param name="cursor">cursor value</param>                                                                            
        /// <returns>current frameworkContentElement</returns>                                                                                    
        public static TType Cursor<TType>(this TType frameworkContentElement, Cursor cursor) where TType : notnull, FrameworkContentElement
        {
            frameworkContentElement.Cursor = cursor;
            return frameworkContentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkContentElement.ForceCursor"/> property of the current <see cref="FrameworkContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkContentElement</typeparam>                                                                       
        /// <param name=" frameworkContentElement">current <see cref="FrameworkContentElement"/></param>                                                          
        /// <param name="forceCursor">forceCursor value</param>                                                                            
        /// <returns>current frameworkContentElement</returns>                                                                                    
        public static TType ForceCursor<TType>(this TType frameworkContentElement, Boolean forceCursor) where TType : notnull, FrameworkContentElement
        {
            frameworkContentElement.ForceCursor = forceCursor;
            return frameworkContentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkContentElement.InputScope"/> property of the current <see cref="FrameworkContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkContentElement</typeparam>                                                                       
        /// <param name=" frameworkContentElement">current <see cref="FrameworkContentElement"/></param>                                                          
        /// <param name="inputScope">inputScope value</param>                                                                            
        /// <returns>current frameworkContentElement</returns>                                                                                    
        public static TType InputScope<TType>(this TType frameworkContentElement, InputScope inputScope) where TType : notnull, FrameworkContentElement
        {
            frameworkContentElement.InputScope = inputScope;
            return frameworkContentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkContentElement.DataContext"/> property of the current <see cref="FrameworkContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkContentElement</typeparam>                                                                       
        /// <param name=" frameworkContentElement">current <see cref="FrameworkContentElement"/></param>                                                          
        /// <param name="dataContext">dataContext value</param>                                                                            
        /// <returns>current frameworkContentElement</returns>                                                                                    
        public static TType DataContext<TType>(this TType frameworkContentElement, Object dataContext) where TType : notnull, FrameworkContentElement
        {
            frameworkContentElement.DataContext = dataContext;
            return frameworkContentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkContentElement.BindingGroup"/> property of the current <see cref="FrameworkContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkContentElement</typeparam>                                                                       
        /// <param name=" frameworkContentElement">current <see cref="FrameworkContentElement"/></param>                                                          
        /// <param name="bindingGroup">bindingGroup value</param>                                                                            
        /// <returns>current frameworkContentElement</returns>                                                                                    
        public static TType BindingGroup<TType>(this TType frameworkContentElement, BindingGroup bindingGroup) where TType : notnull, FrameworkContentElement
        {
            frameworkContentElement.BindingGroup = bindingGroup;
            return frameworkContentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkContentElement.ToolTip"/> property of the current <see cref="FrameworkContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkContentElement</typeparam>                                                                       
        /// <param name=" frameworkContentElement">current <see cref="FrameworkContentElement"/></param>                                                          
        /// <param name="toolTip">toolTip value</param>                                                                            
        /// <returns>current frameworkContentElement</returns>                                                                                    
        public static TType ToolTip<TType>(this TType frameworkContentElement, Object toolTip) where TType : notnull, FrameworkContentElement
        {
            frameworkContentElement.ToolTip = toolTip;
            return frameworkContentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkContentElement.ContextMenu"/> property of the current <see cref="FrameworkContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkContentElement</typeparam>                                                                       
        /// <param name=" frameworkContentElement">current <see cref="FrameworkContentElement"/></param>                                                          
        /// <param name="contextMenu">contextMenu value</param>                                                                            
        /// <returns>current frameworkContentElement</returns>                                                                                    
        public static TType ContextMenu<TType>(this TType frameworkContentElement, ContextMenu contextMenu) where TType : notnull, FrameworkContentElement
        {
            frameworkContentElement.ContextMenu = contextMenu;
            return frameworkContentElement;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="FrameworkElement"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class FrameworkElementFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.Style"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="style">style value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType Style<TType>(this TType frameworkElement, Style style) where TType : notnull, FrameworkElement
        {
            frameworkElement.Style = style;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.OverridesDefaultStyle"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="overridesDefaultStyle">overridesDefaultStyle value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType OverridesDefaultStyle<TType>(this TType frameworkElement, Boolean overridesDefaultStyle) where TType : notnull, FrameworkElement
        {
            frameworkElement.OverridesDefaultStyle = overridesDefaultStyle;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.UseLayoutRounding"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="useLayoutRounding">useLayoutRounding value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType UseLayoutRounding<TType>(this TType frameworkElement, Boolean useLayoutRounding) where TType : notnull, FrameworkElement
        {
            frameworkElement.UseLayoutRounding = useLayoutRounding;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.Resources"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="resources">resources value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType Resources<TType>(this TType frameworkElement, ResourceDictionary resources) where TType : notnull, FrameworkElement
        {
            frameworkElement.Resources = resources;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.DataContext"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="dataContext">dataContext value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType DataContext<TType>(this TType frameworkElement, Object dataContext) where TType : notnull, FrameworkElement
        {
            frameworkElement.DataContext = dataContext;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.BindingGroup"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="bindingGroup">bindingGroup value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType BindingGroup<TType>(this TType frameworkElement, BindingGroup bindingGroup) where TType : notnull, FrameworkElement
        {
            frameworkElement.BindingGroup = bindingGroup;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.Language"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="language">language value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType Language<TType>(this TType frameworkElement, XmlLanguage language) where TType : notnull, FrameworkElement
        {
            frameworkElement.Language = language;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.Name"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="name">name value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType Name<TType>(this TType frameworkElement, String name) where TType : notnull, FrameworkElement
        {
            frameworkElement.Name = name;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.Tag"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="tag">tag value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType Tag<TType>(this TType frameworkElement, Object tag) where TType : notnull, FrameworkElement
        {
            frameworkElement.Tag = tag;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.InputScope"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="inputScope">inputScope value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType InputScope<TType>(this TType frameworkElement, InputScope inputScope) where TType : notnull, FrameworkElement
        {
            frameworkElement.InputScope = inputScope;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.LayoutTransform"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="layoutTransform">layoutTransform value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType LayoutTransform<TType>(this TType frameworkElement, Transform layoutTransform) where TType : notnull, FrameworkElement
        {
            frameworkElement.LayoutTransform = layoutTransform;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.Width"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="width">width value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType Width<TType>(this TType frameworkElement, Double width) where TType : notnull, FrameworkElement
        {
            frameworkElement.Width = width;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.MinWidth"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="minWidth">minWidth value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType MinWidth<TType>(this TType frameworkElement, Double minWidth) where TType : notnull, FrameworkElement
        {
            frameworkElement.MinWidth = minWidth;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.MaxWidth"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="maxWidth">maxWidth value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType MaxWidth<TType>(this TType frameworkElement, Double maxWidth) where TType : notnull, FrameworkElement
        {
            frameworkElement.MaxWidth = maxWidth;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.Height"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="height">height value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType Height<TType>(this TType frameworkElement, Double height) where TType : notnull, FrameworkElement
        {
            frameworkElement.Height = height;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.MinHeight"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="minHeight">minHeight value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType MinHeight<TType>(this TType frameworkElement, Double minHeight) where TType : notnull, FrameworkElement
        {
            frameworkElement.MinHeight = minHeight;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.MaxHeight"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="maxHeight">maxHeight value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType MaxHeight<TType>(this TType frameworkElement, Double maxHeight) where TType : notnull, FrameworkElement
        {
            frameworkElement.MaxHeight = maxHeight;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.FlowDirection"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="flowDirection">flowDirection value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType FlowDirection<TType>(this TType frameworkElement, FlowDirection flowDirection) where TType : notnull, FrameworkElement
        {
            frameworkElement.FlowDirection = flowDirection;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.Margin"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="margin">margin value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType Margin<TType>(this TType frameworkElement, Thickness margin) where TType : notnull, FrameworkElement
        {
            frameworkElement.Margin = margin;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.HorizontalAlignment"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="horizontalAlignment">horizontalAlignment value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType HorizontalAlignment<TType>(this TType frameworkElement, HorizontalAlignment horizontalAlignment) where TType : notnull, FrameworkElement
        {
            frameworkElement.HorizontalAlignment = horizontalAlignment;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.VerticalAlignment"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="verticalAlignment">verticalAlignment value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType VerticalAlignment<TType>(this TType frameworkElement, VerticalAlignment verticalAlignment) where TType : notnull, FrameworkElement
        {
            frameworkElement.VerticalAlignment = verticalAlignment;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.FocusVisualStyle"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="focusVisualStyle">focusVisualStyle value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType FocusVisualStyle<TType>(this TType frameworkElement, Style focusVisualStyle) where TType : notnull, FrameworkElement
        {
            frameworkElement.FocusVisualStyle = focusVisualStyle;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.Cursor"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="cursor">cursor value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType Cursor<TType>(this TType frameworkElement, Cursor cursor) where TType : notnull, FrameworkElement
        {
            frameworkElement.Cursor = cursor;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.ForceCursor"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="forceCursor">forceCursor value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType ForceCursor<TType>(this TType frameworkElement, Boolean forceCursor) where TType : notnull, FrameworkElement
        {
            frameworkElement.ForceCursor = forceCursor;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.ToolTip"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="toolTip">toolTip value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType ToolTip<TType>(this TType frameworkElement, Object toolTip) where TType : notnull, FrameworkElement
        {
            frameworkElement.ToolTip = toolTip;
            return frameworkElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FrameworkElement.ContextMenu"/> property of the current <see cref="FrameworkElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FrameworkElement</typeparam>                                                                       
        /// <param name=" frameworkElement">current <see cref="FrameworkElement"/></param>                                                          
        /// <param name="contextMenu">contextMenu value</param>                                                                            
        /// <returns>current frameworkElement</returns>                                                                                    
        public static TType ContextMenu<TType>(this TType frameworkElement, ContextMenu contextMenu) where TType : notnull, FrameworkElement
        {
            frameworkElement.ContextMenu = contextMenu;
            return frameworkElement;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Trigger"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TriggerFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Trigger.Property"/> property of the current <see cref="Trigger"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Trigger</typeparam>                                                                       
        /// <param name=" trigger">current <see cref="Trigger"/></param>                                                          
        /// <param name="property">property value</param>                                                                            
        /// <returns>current trigger</returns>                                                                                    
        public static TType Property<TType>(this TType trigger, DependencyProperty property) where TType : notnull, Trigger
        {
            trigger.Property = property;
            return trigger;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Trigger.Value"/> property of the current <see cref="Trigger"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Trigger</typeparam>                                                                       
        /// <param name=" trigger">current <see cref="Trigger"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current trigger</returns>                                                                                    
        public static TType Value<TType>(this TType trigger, Object value) where TType : notnull, Trigger
        {
            trigger.Value = value;
            return trigger;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Trigger.SourceName"/> property of the current <see cref="Trigger"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Trigger</typeparam>                                                                       
        /// <param name=" trigger">current <see cref="Trigger"/></param>                                                          
        /// <param name="sourceName">sourceName value</param>                                                                            
        /// <returns>current trigger</returns>                                                                                    
        public static TType SourceName<TType>(this TType trigger, String sourceName) where TType : notnull, Trigger
        {
            trigger.SourceName = sourceName;
            return trigger;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="VisualState"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class VisualStateFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="VisualState.Name"/> property of the current <see cref="VisualState"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VisualState</typeparam>                                                                       
        /// <param name=" visualState">current <see cref="VisualState"/></param>                                                          
        /// <param name="name">name value</param>                                                                            
        /// <returns>current visualState</returns>                                                                                    
        public static TType Name<TType>(this TType visualState, String name) where TType : notnull, VisualState
        {
            visualState.Name = name;
            return visualState;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VisualState.Storyboard"/> property of the current <see cref="VisualState"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VisualState</typeparam>                                                                       
        /// <param name=" visualState">current <see cref="VisualState"/></param>                                                          
        /// <param name="storyboard">storyboard value</param>                                                                            
        /// <returns>current visualState</returns>                                                                                    
        public static TType Storyboard<TType>(this TType visualState, Storyboard storyboard) where TType : notnull, VisualState
        {
            visualState.Storyboard = storyboard;
            return visualState;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="VisualStateGroup"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class VisualStateGroupFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="VisualStateGroup.Name"/> property of the current <see cref="VisualStateGroup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VisualStateGroup</typeparam>                                                                       
        /// <param name=" visualStateGroup">current <see cref="VisualStateGroup"/></param>                                                          
        /// <param name="name">name value</param>                                                                            
        /// <returns>current visualStateGroup</returns>                                                                                    
        public static TType Name<TType>(this TType visualStateGroup, String name) where TType : notnull, VisualStateGroup
        {
            visualStateGroup.Name = name;
            return visualStateGroup;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="VisualTransition"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class VisualTransitionFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="VisualTransition.From"/> property of the current <see cref="VisualTransition"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VisualTransition</typeparam>                                                                       
        /// <param name=" visualTransition">current <see cref="VisualTransition"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current visualTransition</returns>                                                                                    
        public static TType From<TType>(this TType visualTransition, String from) where TType : notnull, VisualTransition
        {
            visualTransition.From = from;
            return visualTransition;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VisualTransition.To"/> property of the current <see cref="VisualTransition"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VisualTransition</typeparam>                                                                       
        /// <param name=" visualTransition">current <see cref="VisualTransition"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current visualTransition</returns>                                                                                    
        public static TType To<TType>(this TType visualTransition, String to) where TType : notnull, VisualTransition
        {
            visualTransition.To = to;
            return visualTransition;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VisualTransition.Storyboard"/> property of the current <see cref="VisualTransition"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VisualTransition</typeparam>                                                                       
        /// <param name=" visualTransition">current <see cref="VisualTransition"/></param>                                                          
        /// <param name="storyboard">storyboard value</param>                                                                            
        /// <returns>current visualTransition</returns>                                                                                    
        public static TType Storyboard<TType>(this TType visualTransition, Storyboard storyboard) where TType : notnull, VisualTransition
        {
            visualTransition.Storyboard = storyboard;
            return visualTransition;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VisualTransition.GeneratedDuration"/> property of the current <see cref="VisualTransition"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VisualTransition</typeparam>                                                                       
        /// <param name=" visualTransition">current <see cref="VisualTransition"/></param>                                                          
        /// <param name="generatedDuration">generatedDuration value</param>                                                                            
        /// <returns>current visualTransition</returns>                                                                                    
        public static TType GeneratedDuration<TType>(this TType visualTransition, Duration generatedDuration) where TType : notnull, VisualTransition
        {
            visualTransition.GeneratedDuration = generatedDuration;
            return visualTransition;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VisualTransition.GeneratedEasingFunction"/> property of the current <see cref="VisualTransition"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VisualTransition</typeparam>                                                                       
        /// <param name=" visualTransition">current <see cref="VisualTransition"/></param>                                                          
        /// <param name="generatedEasingFunction">generatedEasingFunction value</param>                                                                            
        /// <returns>current visualTransition</returns>                                                                                    
        public static TType GeneratedEasingFunction<TType>(this TType visualTransition, IEasingFunction generatedEasingFunction) where TType : notnull, VisualTransition
        {
            visualTransition.GeneratedEasingFunction = generatedEasingFunction;
            return visualTransition;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Window"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class WindowFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.TaskbarItemInfo"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="taskbarItemInfo">taskbarItemInfo value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType TaskbarItemInfo<TType>(this TType window, TaskbarItemInfo taskbarItemInfo) where TType : notnull, Window
        {
            window.TaskbarItemInfo = taskbarItemInfo;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.AllowsTransparency"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="allowsTransparency">allowsTransparency value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType AllowsTransparency<TType>(this TType window, Boolean allowsTransparency) where TType : notnull, Window
        {
            window.AllowsTransparency = allowsTransparency;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.Title"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="title">title value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType Title<TType>(this TType window, String title) where TType : notnull, Window
        {
            window.Title = title;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.Icon"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="icon">icon value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType Icon<TType>(this TType window, ImageSource icon) where TType : notnull, Window
        {
            window.Icon = icon;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.SizeToContent"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="sizeToContent">sizeToContent value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType SizeToContent<TType>(this TType window, SizeToContent sizeToContent) where TType : notnull, Window
        {
            window.SizeToContent = sizeToContent;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.Top"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="top">top value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType Top<TType>(this TType window, Double top) where TType : notnull, Window
        {
            window.Top = top;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.Left"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="left">left value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType Left<TType>(this TType window, Double left) where TType : notnull, Window
        {
            window.Left = left;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.WindowStartupLocation"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="windowStartupLocation">windowStartupLocation value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType WindowStartupLocation<TType>(this TType window, WindowStartupLocation windowStartupLocation) where TType : notnull, Window
        {
            window.WindowStartupLocation = windowStartupLocation;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.ShowInTaskbar"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="showInTaskbar">showInTaskbar value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType ShowInTaskbar<TType>(this TType window, Boolean showInTaskbar) where TType : notnull, Window
        {
            window.ShowInTaskbar = showInTaskbar;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.Owner"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="owner">owner value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType Owner<TType>(this TType window, Window owner) where TType : notnull, Window
        {
            window.Owner = owner;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.DialogResult"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="dialogResult">dialogResult value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType DialogResult<TType>(this TType window, Nullable<Boolean> dialogResult) where TType : notnull, Window
        {
            window.DialogResult = dialogResult;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.WindowStyle"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="windowStyle">windowStyle value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType WindowStyle<TType>(this TType window, WindowStyle windowStyle) where TType : notnull, Window
        {
            window.WindowStyle = windowStyle;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.WindowState"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="windowState">windowState value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType WindowState<TType>(this TType window, WindowState windowState) where TType : notnull, Window
        {
            window.WindowState = windowState;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.ResizeMode"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="resizeMode">resizeMode value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType ResizeMode<TType>(this TType window, ResizeMode resizeMode) where TType : notnull, Window
        {
            window.ResizeMode = resizeMode;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.Topmost"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="topmost">topmost value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType Topmost<TType>(this TType window, Boolean topmost) where TType : notnull, Window
        {
            window.Topmost = topmost;
            return window;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Window.ShowActivated"/> property of the current <see cref="Window"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Window</typeparam>                                                                       
        /// <param name=" window">current <see cref="Window"/></param>                                                          
        /// <param name="showActivated">showActivated value</param>                                                                            
        /// <returns>current window</returns>                                                                                    
        public static TType ShowActivated<TType>(this TType window, Boolean showActivated) where TType : notnull, Window
        {
            window.ShowActivated = showActivated;
            return window;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TaskbarItemInfo"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TaskbarItemInfoFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TaskbarItemInfo.ProgressState"/> property of the current <see cref="TaskbarItemInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" taskbarItemInfo">current <see cref="TaskbarItemInfo"/></param>                                                          
        /// <param name="progressState">progressState value</param>                                                                            
        /// <returns>current taskbarItemInfo</returns>                                                                                    
        public static TaskbarItemInfo ProgressState(this TaskbarItemInfo taskbarItemInfo, TaskbarItemProgressState progressState)
        {
            taskbarItemInfo.ProgressState = progressState;
            return taskbarItemInfo;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TaskbarItemInfo.ProgressValue"/> property of the current <see cref="TaskbarItemInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" taskbarItemInfo">current <see cref="TaskbarItemInfo"/></param>                                                          
        /// <param name="progressValue">progressValue value</param>                                                                            
        /// <returns>current taskbarItemInfo</returns>                                                                                    
        public static TaskbarItemInfo ProgressValue(this TaskbarItemInfo taskbarItemInfo, Double progressValue)
        {
            taskbarItemInfo.ProgressValue = progressValue;
            return taskbarItemInfo;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TaskbarItemInfo.Overlay"/> property of the current <see cref="TaskbarItemInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" taskbarItemInfo">current <see cref="TaskbarItemInfo"/></param>                                                          
        /// <param name="overlay">overlay value</param>                                                                            
        /// <returns>current taskbarItemInfo</returns>                                                                                    
        public static TaskbarItemInfo Overlay(this TaskbarItemInfo taskbarItemInfo, ImageSource overlay)
        {
            taskbarItemInfo.Overlay = overlay;
            return taskbarItemInfo;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TaskbarItemInfo.Description"/> property of the current <see cref="TaskbarItemInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" taskbarItemInfo">current <see cref="TaskbarItemInfo"/></param>                                                          
        /// <param name="description">description value</param>                                                                            
        /// <returns>current taskbarItemInfo</returns>                                                                                    
        public static TaskbarItemInfo Description(this TaskbarItemInfo taskbarItemInfo, String description)
        {
            taskbarItemInfo.Description = description;
            return taskbarItemInfo;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TaskbarItemInfo.ThumbnailClipMargin"/> property of the current <see cref="TaskbarItemInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" taskbarItemInfo">current <see cref="TaskbarItemInfo"/></param>                                                          
        /// <param name="thumbnailClipMargin">thumbnailClipMargin value</param>                                                                            
        /// <returns>current taskbarItemInfo</returns>                                                                                    
        public static TaskbarItemInfo ThumbnailClipMargin(this TaskbarItemInfo taskbarItemInfo, Thickness thumbnailClipMargin)
        {
            taskbarItemInfo.ThumbnailClipMargin = thumbnailClipMargin;
            return taskbarItemInfo;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TaskbarItemInfo.ThumbButtonInfos"/> property of the current <see cref="TaskbarItemInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" taskbarItemInfo">current <see cref="TaskbarItemInfo"/></param>                                                          
        /// <param name="thumbButtonInfos">thumbButtonInfos value</param>                                                                            
        /// <returns>current taskbarItemInfo</returns>                                                                                    
        public static TaskbarItemInfo ThumbButtonInfos(this TaskbarItemInfo taskbarItemInfo, ThumbButtonInfoCollection thumbButtonInfos)
        {
            taskbarItemInfo.ThumbButtonInfos = thumbButtonInfos;
            return taskbarItemInfo;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ThumbButtonInfo"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ThumbButtonInfoFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ThumbButtonInfo.Visibility"/> property of the current <see cref="ThumbButtonInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" thumbButtonInfo">current <see cref="ThumbButtonInfo"/></param>                                                          
        /// <param name="visibility">visibility value</param>                                                                            
        /// <returns>current thumbButtonInfo</returns>                                                                                    
        public static ThumbButtonInfo Visibility(this ThumbButtonInfo thumbButtonInfo, Visibility visibility)
        {
            thumbButtonInfo.Visibility = visibility;
            return thumbButtonInfo;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThumbButtonInfo.DismissWhenClicked"/> property of the current <see cref="ThumbButtonInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" thumbButtonInfo">current <see cref="ThumbButtonInfo"/></param>                                                          
        /// <param name="dismissWhenClicked">dismissWhenClicked value</param>                                                                            
        /// <returns>current thumbButtonInfo</returns>                                                                                    
        public static ThumbButtonInfo DismissWhenClicked(this ThumbButtonInfo thumbButtonInfo, Boolean dismissWhenClicked)
        {
            thumbButtonInfo.DismissWhenClicked = dismissWhenClicked;
            return thumbButtonInfo;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThumbButtonInfo.ImageSource"/> property of the current <see cref="ThumbButtonInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" thumbButtonInfo">current <see cref="ThumbButtonInfo"/></param>                                                          
        /// <param name="imageSource">imageSource value</param>                                                                            
        /// <returns>current thumbButtonInfo</returns>                                                                                    
        public static ThumbButtonInfo ImageSource(this ThumbButtonInfo thumbButtonInfo, ImageSource imageSource)
        {
            thumbButtonInfo.ImageSource = imageSource;
            return thumbButtonInfo;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThumbButtonInfo.IsBackgroundVisible"/> property of the current <see cref="ThumbButtonInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" thumbButtonInfo">current <see cref="ThumbButtonInfo"/></param>                                                          
        /// <param name="isBackgroundVisible">isBackgroundVisible value</param>                                                                            
        /// <returns>current thumbButtonInfo</returns>                                                                                    
        public static ThumbButtonInfo IsBackgroundVisible(this ThumbButtonInfo thumbButtonInfo, Boolean isBackgroundVisible)
        {
            thumbButtonInfo.IsBackgroundVisible = isBackgroundVisible;
            return thumbButtonInfo;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThumbButtonInfo.Description"/> property of the current <see cref="ThumbButtonInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" thumbButtonInfo">current <see cref="ThumbButtonInfo"/></param>                                                          
        /// <param name="description">description value</param>                                                                            
        /// <returns>current thumbButtonInfo</returns>                                                                                    
        public static ThumbButtonInfo Description(this ThumbButtonInfo thumbButtonInfo, String description)
        {
            thumbButtonInfo.Description = description;
            return thumbButtonInfo;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThumbButtonInfo.IsEnabled"/> property of the current <see cref="ThumbButtonInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" thumbButtonInfo">current <see cref="ThumbButtonInfo"/></param>                                                          
        /// <param name="isEnabled">isEnabled value</param>                                                                            
        /// <returns>current thumbButtonInfo</returns>                                                                                    
        public static ThumbButtonInfo IsEnabled(this ThumbButtonInfo thumbButtonInfo, Boolean isEnabled)
        {
            thumbButtonInfo.IsEnabled = isEnabled;
            return thumbButtonInfo;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThumbButtonInfo.IsInteractive"/> property of the current <see cref="ThumbButtonInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" thumbButtonInfo">current <see cref="ThumbButtonInfo"/></param>                                                          
        /// <param name="isInteractive">isInteractive value</param>                                                                            
        /// <returns>current thumbButtonInfo</returns>                                                                                    
        public static ThumbButtonInfo IsInteractive(this ThumbButtonInfo thumbButtonInfo, Boolean isInteractive)
        {
            thumbButtonInfo.IsInteractive = isInteractive;
            return thumbButtonInfo;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThumbButtonInfo.Command"/> property of the current <see cref="ThumbButtonInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" thumbButtonInfo">current <see cref="ThumbButtonInfo"/></param>                                                          
        /// <param name="command">command value</param>                                                                            
        /// <returns>current thumbButtonInfo</returns>                                                                                    
        public static ThumbButtonInfo Command(this ThumbButtonInfo thumbButtonInfo, ICommand command)
        {
            thumbButtonInfo.Command = command;
            return thumbButtonInfo;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThumbButtonInfo.CommandParameter"/> property of the current <see cref="ThumbButtonInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" thumbButtonInfo">current <see cref="ThumbButtonInfo"/></param>                                                          
        /// <param name="commandParameter">commandParameter value</param>                                                                            
        /// <returns>current thumbButtonInfo</returns>                                                                                    
        public static ThumbButtonInfo CommandParameter(this ThumbButtonInfo thumbButtonInfo, Object commandParameter)
        {
            thumbButtonInfo.CommandParameter = commandParameter;
            return thumbButtonInfo;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThumbButtonInfo.CommandTarget"/> property of the current <see cref="ThumbButtonInfo"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" thumbButtonInfo">current <see cref="ThumbButtonInfo"/></param>                                                          
        /// <param name="commandTarget">commandTarget value</param>                                                                            
        /// <returns>current thumbButtonInfo</returns>                                                                                    
        public static ThumbButtonInfo CommandTarget(this ThumbButtonInfo thumbButtonInfo, IInputElement commandTarget)
        {
            thumbButtonInfo.CommandTarget = commandTarget;
            return thumbButtonInfo;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="WindowChrome"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class WindowChromeFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="WindowChrome.CaptionHeight"/> property of the current <see cref="WindowChrome"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">WindowChrome</typeparam>                                                                       
        /// <param name=" windowChrome">current <see cref="WindowChrome"/></param>                                                          
        /// <param name="captionHeight">captionHeight value</param>                                                                            
        /// <returns>current windowChrome</returns>                                                                                    
        public static TType CaptionHeight<TType>(this TType windowChrome, Double captionHeight) where TType : notnull, WindowChrome
        {
            windowChrome.CaptionHeight = captionHeight;
            return windowChrome;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="WindowChrome.ResizeBorderThickness"/> property of the current <see cref="WindowChrome"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">WindowChrome</typeparam>                                                                       
        /// <param name=" windowChrome">current <see cref="WindowChrome"/></param>                                                          
        /// <param name="resizeBorderThickness">resizeBorderThickness value</param>                                                                            
        /// <returns>current windowChrome</returns>                                                                                    
        public static TType ResizeBorderThickness<TType>(this TType windowChrome, Thickness resizeBorderThickness) where TType : notnull, WindowChrome
        {
            windowChrome.ResizeBorderThickness = resizeBorderThickness;
            return windowChrome;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="WindowChrome.GlassFrameThickness"/> property of the current <see cref="WindowChrome"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">WindowChrome</typeparam>                                                                       
        /// <param name=" windowChrome">current <see cref="WindowChrome"/></param>                                                          
        /// <param name="glassFrameThickness">glassFrameThickness value</param>                                                                            
        /// <returns>current windowChrome</returns>                                                                                    
        public static TType GlassFrameThickness<TType>(this TType windowChrome, Thickness glassFrameThickness) where TType : notnull, WindowChrome
        {
            windowChrome.GlassFrameThickness = glassFrameThickness;
            return windowChrome;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="WindowChrome.UseAeroCaptionButtons"/> property of the current <see cref="WindowChrome"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">WindowChrome</typeparam>                                                                       
        /// <param name=" windowChrome">current <see cref="WindowChrome"/></param>                                                          
        /// <param name="useAeroCaptionButtons">useAeroCaptionButtons value</param>                                                                            
        /// <returns>current windowChrome</returns>                                                                                    
        public static TType UseAeroCaptionButtons<TType>(this TType windowChrome, Boolean useAeroCaptionButtons) where TType : notnull, WindowChrome
        {
            windowChrome.UseAeroCaptionButtons = useAeroCaptionButtons;
            return windowChrome;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="WindowChrome.CornerRadius"/> property of the current <see cref="WindowChrome"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">WindowChrome</typeparam>                                                                       
        /// <param name=" windowChrome">current <see cref="WindowChrome"/></param>                                                          
        /// <param name="cornerRadius">cornerRadius value</param>                                                                            
        /// <returns>current windowChrome</returns>                                                                                    
        public static TType CornerRadius<TType>(this TType windowChrome, CornerRadius cornerRadius) where TType : notnull, WindowChrome
        {
            windowChrome.CornerRadius = cornerRadius;
            return windowChrome;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="WindowChrome.NonClientFrameEdges"/> property of the current <see cref="WindowChrome"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">WindowChrome</typeparam>                                                                       
        /// <param name=" windowChrome">current <see cref="WindowChrome"/></param>                                                          
        /// <param name="nonClientFrameEdges">nonClientFrameEdges value</param>                                                                            
        /// <returns>current windowChrome</returns>                                                                                    
        public static TType NonClientFrameEdges<TType>(this TType windowChrome, NonClientFrameEdges nonClientFrameEdges) where TType : notnull, WindowChrome
        {
            windowChrome.NonClientFrameEdges = nonClientFrameEdges;
            return windowChrome;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Line"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class LineFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Line.X1"/> property of the current <see cref="Line"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" line">current <see cref="Line"/></param>                                                          
        /// <param name="x1">x1 value</param>                                                                            
        /// <returns>current line</returns>                                                                                    
        public static Line X1(this Line line, Double x1)
        {
            line.X1 = x1;
            return line;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Line.Y1"/> property of the current <see cref="Line"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" line">current <see cref="Line"/></param>                                                          
        /// <param name="y1">y1 value</param>                                                                            
        /// <returns>current line</returns>                                                                                    
        public static Line Y1(this Line line, Double y1)
        {
            line.Y1 = y1;
            return line;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Line.X2"/> property of the current <see cref="Line"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" line">current <see cref="Line"/></param>                                                          
        /// <param name="x2">x2 value</param>                                                                            
        /// <returns>current line</returns>                                                                                    
        public static Line X2(this Line line, Double x2)
        {
            line.X2 = x2;
            return line;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Line.Y2"/> property of the current <see cref="Line"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" line">current <see cref="Line"/></param>                                                          
        /// <param name="y2">y2 value</param>                                                                            
        /// <returns>current line</returns>                                                                                    
        public static Line Y2(this Line line, Double y2)
        {
            line.Y2 = y2;
            return line;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Path"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PathFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Path.Data"/> property of the current <see cref="Path"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" path">current <see cref="Path"/></param>                                                          
        /// <param name="data">data value</param>                                                                            
        /// <returns>current path</returns>                                                                                    
        public static Path Data(this Path path, Geometry data)
        {
            path.Data = data;
            return path;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Polygon"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PolygonFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Polygon.Points"/> property of the current <see cref="Polygon"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" polygon">current <see cref="Polygon"/></param>                                                          
        /// <param name="points">points value</param>                                                                            
        /// <returns>current polygon</returns>                                                                                    
        public static Polygon Points(this Polygon polygon, PointCollection points)
        {
            polygon.Points = points;
            return polygon;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Polygon.FillRule"/> property of the current <see cref="Polygon"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" polygon">current <see cref="Polygon"/></param>                                                          
        /// <param name="fillRule">fillRule value</param>                                                                            
        /// <returns>current polygon</returns>                                                                                    
        public static Polygon FillRule(this Polygon polygon, FillRule fillRule)
        {
            polygon.FillRule = fillRule;
            return polygon;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Polyline"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PolylineFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Polyline.Points"/> property of the current <see cref="Polyline"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" polyline">current <see cref="Polyline"/></param>                                                          
        /// <param name="points">points value</param>                                                                            
        /// <returns>current polyline</returns>                                                                                    
        public static Polyline Points(this Polyline polyline, PointCollection points)
        {
            polyline.Points = points;
            return polyline;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Polyline.FillRule"/> property of the current <see cref="Polyline"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" polyline">current <see cref="Polyline"/></param>                                                          
        /// <param name="fillRule">fillRule value</param>                                                                            
        /// <returns>current polyline</returns>                                                                                    
        public static Polyline FillRule(this Polyline polyline, FillRule fillRule)
        {
            polyline.FillRule = fillRule;
            return polyline;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Rectangle"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class RectangleFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Rectangle.RadiusX"/> property of the current <see cref="Rectangle"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" rectangle">current <see cref="Rectangle"/></param>                                                          
        /// <param name="radiusX">radiusX value</param>                                                                            
        /// <returns>current rectangle</returns>                                                                                    
        public static Rectangle RadiusX(this Rectangle rectangle, Double radiusX)
        {
            rectangle.RadiusX = radiusX;
            return rectangle;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Rectangle.RadiusY"/> property of the current <see cref="Rectangle"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" rectangle">current <see cref="Rectangle"/></param>                                                          
        /// <param name="radiusY">radiusY value</param>                                                                            
        /// <returns>current rectangle</returns>                                                                                    
        public static Rectangle RadiusY(this Rectangle rectangle, Double radiusY)
        {
            rectangle.RadiusY = radiusY;
            return rectangle;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Shape"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ShapeFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Shape.Stretch"/> property of the current <see cref="Shape"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Shape</typeparam>                                                                       
        /// <param name=" shape">current <see cref="Shape"/></param>                                                          
        /// <param name="stretch">stretch value</param>                                                                            
        /// <returns>current shape</returns>                                                                                    
        public static TType Stretch<TType>(this TType shape, Stretch stretch) where TType : notnull, Shape
        {
            shape.Stretch = stretch;
            return shape;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Shape.Fill"/> property of the current <see cref="Shape"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Shape</typeparam>                                                                       
        /// <param name=" shape">current <see cref="Shape"/></param>                                                          
        /// <param name="fill">fill value</param>                                                                            
        /// <returns>current shape</returns>                                                                                    
        public static TType Fill<TType>(this TType shape, Brush fill) where TType : notnull, Shape
        {
            shape.Fill = fill;
            return shape;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Shape.Stroke"/> property of the current <see cref="Shape"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Shape</typeparam>                                                                       
        /// <param name=" shape">current <see cref="Shape"/></param>                                                          
        /// <param name="stroke">stroke value</param>                                                                            
        /// <returns>current shape</returns>                                                                                    
        public static TType Stroke<TType>(this TType shape, Brush stroke) where TType : notnull, Shape
        {
            shape.Stroke = stroke;
            return shape;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Shape.StrokeThickness"/> property of the current <see cref="Shape"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Shape</typeparam>                                                                       
        /// <param name=" shape">current <see cref="Shape"/></param>                                                          
        /// <param name="strokeThickness">strokeThickness value</param>                                                                            
        /// <returns>current shape</returns>                                                                                    
        public static TType StrokeThickness<TType>(this TType shape, Double strokeThickness) where TType : notnull, Shape
        {
            shape.StrokeThickness = strokeThickness;
            return shape;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Shape.StrokeStartLineCap"/> property of the current <see cref="Shape"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Shape</typeparam>                                                                       
        /// <param name=" shape">current <see cref="Shape"/></param>                                                          
        /// <param name="strokeStartLineCap">strokeStartLineCap value</param>                                                                            
        /// <returns>current shape</returns>                                                                                    
        public static TType StrokeStartLineCap<TType>(this TType shape, PenLineCap strokeStartLineCap) where TType : notnull, Shape
        {
            shape.StrokeStartLineCap = strokeStartLineCap;
            return shape;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Shape.StrokeEndLineCap"/> property of the current <see cref="Shape"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Shape</typeparam>                                                                       
        /// <param name=" shape">current <see cref="Shape"/></param>                                                          
        /// <param name="strokeEndLineCap">strokeEndLineCap value</param>                                                                            
        /// <returns>current shape</returns>                                                                                    
        public static TType StrokeEndLineCap<TType>(this TType shape, PenLineCap strokeEndLineCap) where TType : notnull, Shape
        {
            shape.StrokeEndLineCap = strokeEndLineCap;
            return shape;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Shape.StrokeDashCap"/> property of the current <see cref="Shape"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Shape</typeparam>                                                                       
        /// <param name=" shape">current <see cref="Shape"/></param>                                                          
        /// <param name="strokeDashCap">strokeDashCap value</param>                                                                            
        /// <returns>current shape</returns>                                                                                    
        public static TType StrokeDashCap<TType>(this TType shape, PenLineCap strokeDashCap) where TType : notnull, Shape
        {
            shape.StrokeDashCap = strokeDashCap;
            return shape;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Shape.StrokeLineJoin"/> property of the current <see cref="Shape"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Shape</typeparam>                                                                       
        /// <param name=" shape">current <see cref="Shape"/></param>                                                          
        /// <param name="strokeLineJoin">strokeLineJoin value</param>                                                                            
        /// <returns>current shape</returns>                                                                                    
        public static TType StrokeLineJoin<TType>(this TType shape, PenLineJoin strokeLineJoin) where TType : notnull, Shape
        {
            shape.StrokeLineJoin = strokeLineJoin;
            return shape;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Shape.StrokeMiterLimit"/> property of the current <see cref="Shape"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Shape</typeparam>                                                                       
        /// <param name=" shape">current <see cref="Shape"/></param>                                                          
        /// <param name="strokeMiterLimit">strokeMiterLimit value</param>                                                                            
        /// <returns>current shape</returns>                                                                                    
        public static TType StrokeMiterLimit<TType>(this TType shape, Double strokeMiterLimit) where TType : notnull, Shape
        {
            shape.StrokeMiterLimit = strokeMiterLimit;
            return shape;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Shape.StrokeDashOffset"/> property of the current <see cref="Shape"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Shape</typeparam>                                                                       
        /// <param name=" shape">current <see cref="Shape"/></param>                                                          
        /// <param name="strokeDashOffset">strokeDashOffset value</param>                                                                            
        /// <returns>current shape</returns>                                                                                    
        public static TType StrokeDashOffset<TType>(this TType shape, Double strokeDashOffset) where TType : notnull, Shape
        {
            shape.StrokeDashOffset = strokeDashOffset;
            return shape;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Shape.StrokeDashArray"/> property of the current <see cref="Shape"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Shape</typeparam>                                                                       
        /// <param name=" shape">current <see cref="Shape"/></param>                                                          
        /// <param name="strokeDashArray">strokeDashArray value</param>                                                                            
        /// <returns>current shape</returns>                                                                                    
        public static TType StrokeDashArray<TType>(this TType shape, DoubleCollection strokeDashArray) where TType : notnull, Shape
        {
            shape.StrokeDashArray = strokeDashArray;
            return shape;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BeginStoryboard"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BeginStoryboardFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BeginStoryboard.Storyboard"/> property of the current <see cref="BeginStoryboard"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" beginStoryboard">current <see cref="BeginStoryboard"/></param>                                                          
        /// <param name="storyboard">storyboard value</param>                                                                            
        /// <returns>current beginStoryboard</returns>                                                                                    
        public static BeginStoryboard Storyboard(this BeginStoryboard beginStoryboard, Storyboard storyboard)
        {
            beginStoryboard.Storyboard = storyboard;
            return beginStoryboard;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BeginStoryboard.HandoffBehavior"/> property of the current <see cref="BeginStoryboard"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" beginStoryboard">current <see cref="BeginStoryboard"/></param>                                                          
        /// <param name="handoffBehavior">handoffBehavior value</param>                                                                            
        /// <returns>current beginStoryboard</returns>                                                                                    
        public static BeginStoryboard HandoffBehavior(this BeginStoryboard beginStoryboard, HandoffBehavior handoffBehavior)
        {
            beginStoryboard.HandoffBehavior = handoffBehavior;
            return beginStoryboard;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BeginStoryboard.Name"/> property of the current <see cref="BeginStoryboard"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" beginStoryboard">current <see cref="BeginStoryboard"/></param>                                                          
        /// <param name="name">name value</param>                                                                            
        /// <returns>current beginStoryboard</returns>                                                                                    
        public static BeginStoryboard Name(this BeginStoryboard beginStoryboard, String name)
        {
            beginStoryboard.Name = name;
            return beginStoryboard;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ControllableStoryboardAction"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ControllableStoryboardActionFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ControllableStoryboardAction.BeginStoryboardName"/> property of the current <see cref="ControllableStoryboardAction"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ControllableStoryboardAction</typeparam>                                                                       
        /// <param name=" controllableStoryboardAction">current <see cref="ControllableStoryboardAction"/></param>                                                          
        /// <param name="beginStoryboardName">beginStoryboardName value</param>                                                                            
        /// <returns>current controllableStoryboardAction</returns>                                                                                    
        public static TType BeginStoryboardName<TType>(this TType controllableStoryboardAction, String beginStoryboardName) where TType : notnull, ControllableStoryboardAction
        {
            controllableStoryboardAction.BeginStoryboardName = beginStoryboardName;
            return controllableStoryboardAction;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingThicknessKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingThicknessKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingThicknessKeyFrame.EasingFunction"/> property of the current <see cref="EasingThicknessKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingThicknessKeyFrame</typeparam>                                                                       
        /// <param name=" easingThicknessKeyFrame">current <see cref="EasingThicknessKeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingThicknessKeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingThicknessKeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingThicknessKeyFrame
        {
            easingThicknessKeyFrame.EasingFunction = easingFunction;
            return easingThicknessKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ThicknessKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ThicknessKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ThicknessKeyFrame.KeyTime"/> property of the current <see cref="ThicknessKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ThicknessKeyFrame</typeparam>                                                                       
        /// <param name=" thicknessKeyFrame">current <see cref="ThicknessKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current thicknessKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType thicknessKeyFrame, KeyTime keyTime) where TType : notnull, ThicknessKeyFrame
        {
            thicknessKeyFrame.KeyTime = keyTime;
            return thicknessKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThicknessKeyFrame.Value"/> property of the current <see cref="ThicknessKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ThicknessKeyFrame</typeparam>                                                                       
        /// <param name=" thicknessKeyFrame">current <see cref="ThicknessKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current thicknessKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType thicknessKeyFrame, Thickness value) where TType : notnull, ThicknessKeyFrame
        {
            thicknessKeyFrame.Value = value;
            return thicknessKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplineThicknessKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineThicknessKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineThicknessKeyFrame.KeySpline"/> property of the current <see cref="SplineThicknessKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineThicknessKeyFrame</typeparam>                                                                       
        /// <param name=" splineThicknessKeyFrame">current <see cref="SplineThicknessKeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineThicknessKeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineThicknessKeyFrame, KeySpline keySpline) where TType : notnull, SplineThicknessKeyFrame
        {
            splineThicknessKeyFrame.KeySpline = keySpline;
            return splineThicknessKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ThicknessAnimation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ThicknessAnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ThicknessAnimation.From"/> property of the current <see cref="ThicknessAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ThicknessAnimation</typeparam>                                                                       
        /// <param name=" thicknessAnimation">current <see cref="ThicknessAnimation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current thicknessAnimation</returns>                                                                                    
        public static TType From<TType>(this TType thicknessAnimation, Nullable<Thickness> from) where TType : notnull, ThicknessAnimation
        {
            thicknessAnimation.From = from;
            return thicknessAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThicknessAnimation.To"/> property of the current <see cref="ThicknessAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ThicknessAnimation</typeparam>                                                                       
        /// <param name=" thicknessAnimation">current <see cref="ThicknessAnimation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current thicknessAnimation</returns>                                                                                    
        public static TType To<TType>(this TType thicknessAnimation, Nullable<Thickness> to) where TType : notnull, ThicknessAnimation
        {
            thicknessAnimation.To = to;
            return thicknessAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThicknessAnimation.By"/> property of the current <see cref="ThicknessAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ThicknessAnimation</typeparam>                                                                       
        /// <param name=" thicknessAnimation">current <see cref="ThicknessAnimation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current thicknessAnimation</returns>                                                                                    
        public static TType By<TType>(this TType thicknessAnimation, Nullable<Thickness> by) where TType : notnull, ThicknessAnimation
        {
            thicknessAnimation.By = by;
            return thicknessAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThicknessAnimation.EasingFunction"/> property of the current <see cref="ThicknessAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ThicknessAnimation</typeparam>                                                                       
        /// <param name=" thicknessAnimation">current <see cref="ThicknessAnimation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current thicknessAnimation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType thicknessAnimation, IEasingFunction easingFunction) where TType : notnull, ThicknessAnimation
        {
            thicknessAnimation.EasingFunction = easingFunction;
            return thicknessAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThicknessAnimation.IsAdditive"/> property of the current <see cref="ThicknessAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ThicknessAnimation</typeparam>                                                                       
        /// <param name=" thicknessAnimation">current <see cref="ThicknessAnimation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current thicknessAnimation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType thicknessAnimation, Boolean isAdditive) where TType : notnull, ThicknessAnimation
        {
            thicknessAnimation.IsAdditive = isAdditive;
            return thicknessAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThicknessAnimation.IsCumulative"/> property of the current <see cref="ThicknessAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ThicknessAnimation</typeparam>                                                                       
        /// <param name=" thicknessAnimation">current <see cref="ThicknessAnimation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current thicknessAnimation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType thicknessAnimation, Boolean isCumulative) where TType : notnull, ThicknessAnimation
        {
            thicknessAnimation.IsCumulative = isCumulative;
            return thicknessAnimation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ThicknessAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ThicknessAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ThicknessAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="ThicknessAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ThicknessAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" thicknessAnimationUsingKeyFrames">current <see cref="ThicknessAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current thicknessAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType thicknessAnimationUsingKeyFrames, ThicknessKeyFrameCollection keyFrames) where TType : notnull, ThicknessAnimationUsingKeyFrames
        {
            thicknessAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return thicknessAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThicknessAnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="ThicknessAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ThicknessAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" thicknessAnimationUsingKeyFrames">current <see cref="ThicknessAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current thicknessAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType thicknessAnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, ThicknessAnimationUsingKeyFrames
        {
            thicknessAnimationUsingKeyFrames.IsAdditive = isAdditive;
            return thicknessAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ThicknessAnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="ThicknessAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ThicknessAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" thicknessAnimationUsingKeyFrames">current <see cref="ThicknessAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current thicknessAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType thicknessAnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, ThicknessAnimationUsingKeyFrames
        {
            thicknessAnimationUsingKeyFrames.IsCumulative = isCumulative;
            return thicknessAnimationUsingKeyFrames;
        }
    }
    
    /// <summary>                                                                                                                    
    /// <see cref="SeekStoryboard"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SeekStoryboardFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SeekStoryboard.Offset"/> property of the current <see cref="SeekStoryboard"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" seekStoryboard">current <see cref="SeekStoryboard"/></param>                                                          
        /// <param name="offset">offset value</param>                                                                            
        /// <returns>current seekStoryboard</returns>                                                                                    
        public static SeekStoryboard Offset(this SeekStoryboard seekStoryboard, TimeSpan offset)
        {
            seekStoryboard.Offset = offset;
            return seekStoryboard;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SeekStoryboard.Origin"/> property of the current <see cref="SeekStoryboard"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" seekStoryboard">current <see cref="SeekStoryboard"/></param>                                                          
        /// <param name="origin">origin value</param>                                                                            
        /// <returns>current seekStoryboard</returns>                                                                                    
        public static SeekStoryboard Origin(this SeekStoryboard seekStoryboard, TimeSeekOrigin origin)
        {
            seekStoryboard.Origin = origin;
            return seekStoryboard;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SetStoryboardSpeedRatio"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SetStoryboardSpeedRatioFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SetStoryboardSpeedRatio.SpeedRatio"/> property of the current <see cref="SetStoryboardSpeedRatio"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" setStoryboardSpeedRatio">current <see cref="SetStoryboardSpeedRatio"/></param>                                                          
        /// <param name="speedRatio">speedRatio value</param>                                                                            
        /// <returns>current setStoryboardSpeedRatio</returns>                                                                                    
        public static SetStoryboardSpeedRatio SpeedRatio(this SetStoryboardSpeedRatio setStoryboardSpeedRatio, Double speedRatio)
        {
            setStoryboardSpeedRatio.SpeedRatio = speedRatio;
            return setStoryboardSpeedRatio;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BindingGroup"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BindingGroupFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BindingGroup.Name"/> property of the current <see cref="BindingGroup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BindingGroup</typeparam>                                                                       
        /// <param name=" bindingGroup">current <see cref="BindingGroup"/></param>                                                          
        /// <param name="name">name value</param>                                                                            
        /// <returns>current bindingGroup</returns>                                                                                    
        public static TType Name<TType>(this TType bindingGroup, String name) where TType : notnull, BindingGroup
        {
            bindingGroup.Name = name;
            return bindingGroup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BindingGroup.NotifyOnValidationError"/> property of the current <see cref="BindingGroup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BindingGroup</typeparam>                                                                       
        /// <param name=" bindingGroup">current <see cref="BindingGroup"/></param>                                                          
        /// <param name="notifyOnValidationError">notifyOnValidationError value</param>                                                                            
        /// <returns>current bindingGroup</returns>                                                                                    
        public static TType NotifyOnValidationError<TType>(this TType bindingGroup, Boolean notifyOnValidationError) where TType : notnull, BindingGroup
        {
            bindingGroup.NotifyOnValidationError = notifyOnValidationError;
            return bindingGroup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BindingGroup.ValidatesOnNotifyDataError"/> property of the current <see cref="BindingGroup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BindingGroup</typeparam>                                                                       
        /// <param name=" bindingGroup">current <see cref="BindingGroup"/></param>                                                          
        /// <param name="validatesOnNotifyDataError">validatesOnNotifyDataError value</param>                                                                            
        /// <returns>current bindingGroup</returns>                                                                                    
        public static TType ValidatesOnNotifyDataError<TType>(this TType bindingGroup, Boolean validatesOnNotifyDataError) where TType : notnull, BindingGroup
        {
            bindingGroup.ValidatesOnNotifyDataError = validatesOnNotifyDataError;
            return bindingGroup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BindingGroup.SharesProposedValues"/> property of the current <see cref="BindingGroup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BindingGroup</typeparam>                                                                       
        /// <param name=" bindingGroup">current <see cref="BindingGroup"/></param>                                                          
        /// <param name="sharesProposedValues">sharesProposedValues value</param>                                                                            
        /// <returns>current bindingGroup</returns>                                                                                    
        public static TType SharesProposedValues<TType>(this TType bindingGroup, Boolean sharesProposedValues) where TType : notnull, BindingGroup
        {
            bindingGroup.SharesProposedValues = sharesProposedValues;
            return bindingGroup;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="CollectionContainer"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class CollectionContainerFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="CollectionContainer.Collection"/> property of the current <see cref="CollectionContainer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">CollectionContainer</typeparam>                                                                       
        /// <param name=" collectionContainer">current <see cref="CollectionContainer"/></param>                                                          
        /// <param name="collection">collection value</param>                                                                            
        /// <returns>current collectionContainer</returns>                                                                                    
        public static TType Collection<TType>(this TType collectionContainer, IEnumerable collection) where TType : notnull, CollectionContainer
        {
            collectionContainer.Collection = collection;
            return collectionContainer;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="CollectionViewSource"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class CollectionViewSourceFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="CollectionViewSource.Source"/> property of the current <see cref="CollectionViewSource"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">CollectionViewSource</typeparam>                                                                       
        /// <param name=" collectionViewSource">current <see cref="CollectionViewSource"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current collectionViewSource</returns>                                                                                    
        public static TType Source<TType>(this TType collectionViewSource, Object source) where TType : notnull, CollectionViewSource
        {
            collectionViewSource.Source = source;
            return collectionViewSource;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="CollectionViewSource.CollectionViewType"/> property of the current <see cref="CollectionViewSource"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">CollectionViewSource</typeparam>                                                                       
        /// <param name=" collectionViewSource">current <see cref="CollectionViewSource"/></param>                                                          
        /// <param name="collectionViewType">collectionViewType value</param>                                                                            
        /// <returns>current collectionViewSource</returns>                                                                                    
        public static TType CollectionViewType<TType>(this TType collectionViewSource, Type collectionViewType) where TType : notnull, CollectionViewSource
        {
            collectionViewSource.CollectionViewType = collectionViewType;
            return collectionViewSource;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="CollectionViewSource.Culture"/> property of the current <see cref="CollectionViewSource"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">CollectionViewSource</typeparam>                                                                       
        /// <param name=" collectionViewSource">current <see cref="CollectionViewSource"/></param>                                                          
        /// <param name="culture">culture value</param>                                                                            
        /// <returns>current collectionViewSource</returns>                                                                                    
        public static TType Culture<TType>(this TType collectionViewSource, CultureInfo culture) where TType : notnull, CollectionViewSource
        {
            collectionViewSource.Culture = culture;
            return collectionViewSource;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="CollectionViewSource.IsLiveSortingRequested"/> property of the current <see cref="CollectionViewSource"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">CollectionViewSource</typeparam>                                                                       
        /// <param name=" collectionViewSource">current <see cref="CollectionViewSource"/></param>                                                          
        /// <param name="isLiveSortingRequested">isLiveSortingRequested value</param>                                                                            
        /// <returns>current collectionViewSource</returns>                                                                                    
        public static TType IsLiveSortingRequested<TType>(this TType collectionViewSource, Boolean isLiveSortingRequested) where TType : notnull, CollectionViewSource
        {
            collectionViewSource.IsLiveSortingRequested = isLiveSortingRequested;
            return collectionViewSource;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="CollectionViewSource.IsLiveFilteringRequested"/> property of the current <see cref="CollectionViewSource"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">CollectionViewSource</typeparam>                                                                       
        /// <param name=" collectionViewSource">current <see cref="CollectionViewSource"/></param>                                                          
        /// <param name="isLiveFilteringRequested">isLiveFilteringRequested value</param>                                                                            
        /// <returns>current collectionViewSource</returns>                                                                                    
        public static TType IsLiveFilteringRequested<TType>(this TType collectionViewSource, Boolean isLiveFilteringRequested) where TType : notnull, CollectionViewSource
        {
            collectionViewSource.IsLiveFilteringRequested = isLiveFilteringRequested;
            return collectionViewSource;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="CollectionViewSource.IsLiveGroupingRequested"/> property of the current <see cref="CollectionViewSource"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">CollectionViewSource</typeparam>                                                                       
        /// <param name=" collectionViewSource">current <see cref="CollectionViewSource"/></param>                                                          
        /// <param name="isLiveGroupingRequested">isLiveGroupingRequested value</param>                                                                            
        /// <returns>current collectionViewSource</returns>                                                                                    
        public static TType IsLiveGroupingRequested<TType>(this TType collectionViewSource, Boolean isLiveGroupingRequested) where TType : notnull, CollectionViewSource
        {
            collectionViewSource.IsLiveGroupingRequested = isLiveGroupingRequested;
            return collectionViewSource;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="JournalEntry"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class JournalEntryFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="JournalEntry.Source"/> property of the current <see cref="JournalEntry"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">JournalEntry</typeparam>                                                                       
        /// <param name=" journalEntry">current <see cref="JournalEntry"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current journalEntry</returns>                                                                                    
        public static TType Source<TType>(this TType journalEntry, Uri source) where TType : notnull, JournalEntry
        {
            journalEntry.Source = source;
            return journalEntry;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="JournalEntry.Name"/> property of the current <see cref="JournalEntry"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">JournalEntry</typeparam>                                                                       
        /// <param name=" journalEntry">current <see cref="JournalEntry"/></param>                                                          
        /// <param name="name">name value</param>                                                                            
        /// <returns>current journalEntry</returns>                                                                                    
        public static TType Name<TType>(this TType journalEntry, String name) where TType : notnull, JournalEntry
        {
            journalEntry.Name = name;
            return journalEntry;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="NavigationWindow"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class NavigationWindowFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="NavigationWindow.SandboxExternalContent"/> property of the current <see cref="NavigationWindow"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">NavigationWindow</typeparam>                                                                       
        /// <param name=" navigationWindow">current <see cref="NavigationWindow"/></param>                                                          
        /// <param name="sandboxExternalContent">sandboxExternalContent value</param>                                                                            
        /// <returns>current navigationWindow</returns>                                                                                    
        public static TType SandboxExternalContent<TType>(this TType navigationWindow, Boolean sandboxExternalContent) where TType : notnull, NavigationWindow
        {
            navigationWindow.SandboxExternalContent = sandboxExternalContent;
            return navigationWindow;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="NavigationWindow.ShowsNavigationUI"/> property of the current <see cref="NavigationWindow"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">NavigationWindow</typeparam>                                                                       
        /// <param name=" navigationWindow">current <see cref="NavigationWindow"/></param>                                                          
        /// <param name="showsNavigationUI">showsNavigationUI value</param>                                                                            
        /// <returns>current navigationWindow</returns>                                                                                    
        public static TType ShowsNavigationUI<TType>(this TType navigationWindow, Boolean showsNavigationUI) where TType : notnull, NavigationWindow
        {
            navigationWindow.ShowsNavigationUI = showsNavigationUI;
            return navigationWindow;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="NavigationWindow.Source"/> property of the current <see cref="NavigationWindow"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">NavigationWindow</typeparam>                                                                       
        /// <param name=" navigationWindow">current <see cref="NavigationWindow"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current navigationWindow</returns>                                                                                    
        public static TType Source<TType>(this TType navigationWindow, Uri source) where TType : notnull, NavigationWindow
        {
            navigationWindow.Source = source;
            return navigationWindow;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="PageFunctionBase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PageFunctionBaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PageFunctionBase.RemoveFromJournal"/> property of the current <see cref="PageFunctionBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PageFunctionBase</typeparam>                                                                       
        /// <param name=" pageFunctionBase">current <see cref="PageFunctionBase"/></param>                                                          
        /// <param name="removeFromJournal">removeFromJournal value</param>                                                                            
        /// <returns>current pageFunctionBase</returns>                                                                                    
        public static TType RemoveFromJournal<TType>(this TType pageFunctionBase, Boolean removeFromJournal) where TType : notnull, PageFunctionBase
        {
            pageFunctionBase.RemoveFromJournal = removeFromJournal;
            return pageFunctionBase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Adorner"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class AdornerFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Adorner.IsClipEnabled"/> property of the current <see cref="Adorner"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Adorner</typeparam>                                                                       
        /// <param name=" adorner">current <see cref="Adorner"/></param>                                                          
        /// <param name="isClipEnabled">isClipEnabled value</param>                                                                            
        /// <returns>current adorner</returns>                                                                                    
        public static TType IsClipEnabled<TType>(this TType adorner, Boolean isClipEnabled) where TType : notnull, Adorner
        {
            adorner.IsClipEnabled = isClipEnabled;
            return adorner;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="AdornerDecorator"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class AdornerDecoratorFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="AdornerDecorator.Child"/> property of the current <see cref="AdornerDecorator"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AdornerDecorator</typeparam>                                                                       
        /// <param name=" adornerDecorator">current <see cref="AdornerDecorator"/></param>                                                          
        /// <param name="child">child value</param>                                                                            
        /// <returns>current adornerDecorator</returns>                                                                                    
        public static TType Child<TType>(this TType adornerDecorator, UIElement child) where TType : notnull, AdornerDecorator
        {
            adornerDecorator.Child = child;
            return adornerDecorator;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="AnchoredBlock"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class AnchoredBlockFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="AnchoredBlock.Margin"/> property of the current <see cref="AnchoredBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AnchoredBlock</typeparam>                                                                       
        /// <param name=" anchoredBlock">current <see cref="AnchoredBlock"/></param>                                                          
        /// <param name="margin">margin value</param>                                                                            
        /// <returns>current anchoredBlock</returns>                                                                                    
        public static TType Margin<TType>(this TType anchoredBlock, Thickness margin) where TType : notnull, AnchoredBlock
        {
            anchoredBlock.Margin = margin;
            return anchoredBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AnchoredBlock.Padding"/> property of the current <see cref="AnchoredBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AnchoredBlock</typeparam>                                                                       
        /// <param name=" anchoredBlock">current <see cref="AnchoredBlock"/></param>                                                          
        /// <param name="padding">padding value</param>                                                                            
        /// <returns>current anchoredBlock</returns>                                                                                    
        public static TType Padding<TType>(this TType anchoredBlock, Thickness padding) where TType : notnull, AnchoredBlock
        {
            anchoredBlock.Padding = padding;
            return anchoredBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AnchoredBlock.BorderThickness"/> property of the current <see cref="AnchoredBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AnchoredBlock</typeparam>                                                                       
        /// <param name=" anchoredBlock">current <see cref="AnchoredBlock"/></param>                                                          
        /// <param name="borderThickness">borderThickness value</param>                                                                            
        /// <returns>current anchoredBlock</returns>                                                                                    
        public static TType BorderThickness<TType>(this TType anchoredBlock, Thickness borderThickness) where TType : notnull, AnchoredBlock
        {
            anchoredBlock.BorderThickness = borderThickness;
            return anchoredBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AnchoredBlock.BorderBrush"/> property of the current <see cref="AnchoredBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AnchoredBlock</typeparam>                                                                       
        /// <param name=" anchoredBlock">current <see cref="AnchoredBlock"/></param>                                                          
        /// <param name="borderBrush">borderBrush value</param>                                                                            
        /// <returns>current anchoredBlock</returns>                                                                                    
        public static TType BorderBrush<TType>(this TType anchoredBlock, Brush borderBrush) where TType : notnull, AnchoredBlock
        {
            anchoredBlock.BorderBrush = borderBrush;
            return anchoredBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AnchoredBlock.TextAlignment"/> property of the current <see cref="AnchoredBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AnchoredBlock</typeparam>                                                                       
        /// <param name=" anchoredBlock">current <see cref="AnchoredBlock"/></param>                                                          
        /// <param name="textAlignment">textAlignment value</param>                                                                            
        /// <returns>current anchoredBlock</returns>                                                                                    
        public static TType TextAlignment<TType>(this TType anchoredBlock, TextAlignment textAlignment) where TType : notnull, AnchoredBlock
        {
            anchoredBlock.TextAlignment = textAlignment;
            return anchoredBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AnchoredBlock.LineHeight"/> property of the current <see cref="AnchoredBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AnchoredBlock</typeparam>                                                                       
        /// <param name=" anchoredBlock">current <see cref="AnchoredBlock"/></param>                                                          
        /// <param name="lineHeight">lineHeight value</param>                                                                            
        /// <returns>current anchoredBlock</returns>                                                                                    
        public static TType LineHeight<TType>(this TType anchoredBlock, Double lineHeight) where TType : notnull, AnchoredBlock
        {
            anchoredBlock.LineHeight = lineHeight;
            return anchoredBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AnchoredBlock.LineStackingStrategy"/> property of the current <see cref="AnchoredBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AnchoredBlock</typeparam>                                                                       
        /// <param name=" anchoredBlock">current <see cref="AnchoredBlock"/></param>                                                          
        /// <param name="lineStackingStrategy">lineStackingStrategy value</param>                                                                            
        /// <returns>current anchoredBlock</returns>                                                                                    
        public static TType LineStackingStrategy<TType>(this TType anchoredBlock, LineStackingStrategy lineStackingStrategy) where TType : notnull, AnchoredBlock
        {
            anchoredBlock.LineStackingStrategy = lineStackingStrategy;
            return anchoredBlock;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Block"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BlockFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Block.IsHyphenationEnabled"/> property of the current <see cref="Block"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Block</typeparam>                                                                       
        /// <param name=" block">current <see cref="Block"/></param>                                                          
        /// <param name="isHyphenationEnabled">isHyphenationEnabled value</param>                                                                            
        /// <returns>current block</returns>                                                                                    
        public static TType IsHyphenationEnabled<TType>(this TType block, Boolean isHyphenationEnabled) where TType : notnull, Block
        {
            block.IsHyphenationEnabled = isHyphenationEnabled;
            return block;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Block.Margin"/> property of the current <see cref="Block"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Block</typeparam>                                                                       
        /// <param name=" block">current <see cref="Block"/></param>                                                          
        /// <param name="margin">margin value</param>                                                                            
        /// <returns>current block</returns>                                                                                    
        public static TType Margin<TType>(this TType block, Thickness margin) where TType : notnull, Block
        {
            block.Margin = margin;
            return block;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Block.Padding"/> property of the current <see cref="Block"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Block</typeparam>                                                                       
        /// <param name=" block">current <see cref="Block"/></param>                                                          
        /// <param name="padding">padding value</param>                                                                            
        /// <returns>current block</returns>                                                                                    
        public static TType Padding<TType>(this TType block, Thickness padding) where TType : notnull, Block
        {
            block.Padding = padding;
            return block;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Block.BorderThickness"/> property of the current <see cref="Block"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Block</typeparam>                                                                       
        /// <param name=" block">current <see cref="Block"/></param>                                                          
        /// <param name="borderThickness">borderThickness value</param>                                                                            
        /// <returns>current block</returns>                                                                                    
        public static TType BorderThickness<TType>(this TType block, Thickness borderThickness) where TType : notnull, Block
        {
            block.BorderThickness = borderThickness;
            return block;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Block.BorderBrush"/> property of the current <see cref="Block"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Block</typeparam>                                                                       
        /// <param name=" block">current <see cref="Block"/></param>                                                          
        /// <param name="borderBrush">borderBrush value</param>                                                                            
        /// <returns>current block</returns>                                                                                    
        public static TType BorderBrush<TType>(this TType block, Brush borderBrush) where TType : notnull, Block
        {
            block.BorderBrush = borderBrush;
            return block;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Block.TextAlignment"/> property of the current <see cref="Block"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Block</typeparam>                                                                       
        /// <param name=" block">current <see cref="Block"/></param>                                                          
        /// <param name="textAlignment">textAlignment value</param>                                                                            
        /// <returns>current block</returns>                                                                                    
        public static TType TextAlignment<TType>(this TType block, TextAlignment textAlignment) where TType : notnull, Block
        {
            block.TextAlignment = textAlignment;
            return block;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Block.FlowDirection"/> property of the current <see cref="Block"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Block</typeparam>                                                                       
        /// <param name=" block">current <see cref="Block"/></param>                                                          
        /// <param name="flowDirection">flowDirection value</param>                                                                            
        /// <returns>current block</returns>                                                                                    
        public static TType FlowDirection<TType>(this TType block, FlowDirection flowDirection) where TType : notnull, Block
        {
            block.FlowDirection = flowDirection;
            return block;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Block.LineHeight"/> property of the current <see cref="Block"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Block</typeparam>                                                                       
        /// <param name=" block">current <see cref="Block"/></param>                                                          
        /// <param name="lineHeight">lineHeight value</param>                                                                            
        /// <returns>current block</returns>                                                                                    
        public static TType LineHeight<TType>(this TType block, Double lineHeight) where TType : notnull, Block
        {
            block.LineHeight = lineHeight;
            return block;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Block.LineStackingStrategy"/> property of the current <see cref="Block"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Block</typeparam>                                                                       
        /// <param name=" block">current <see cref="Block"/></param>                                                          
        /// <param name="lineStackingStrategy">lineStackingStrategy value</param>                                                                            
        /// <returns>current block</returns>                                                                                    
        public static TType LineStackingStrategy<TType>(this TType block, LineStackingStrategy lineStackingStrategy) where TType : notnull, Block
        {
            block.LineStackingStrategy = lineStackingStrategy;
            return block;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Block.BreakPageBefore"/> property of the current <see cref="Block"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Block</typeparam>                                                                       
        /// <param name=" block">current <see cref="Block"/></param>                                                          
        /// <param name="breakPageBefore">breakPageBefore value</param>                                                                            
        /// <returns>current block</returns>                                                                                    
        public static TType BreakPageBefore<TType>(this TType block, Boolean breakPageBefore) where TType : notnull, Block
        {
            block.BreakPageBefore = breakPageBefore;
            return block;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Block.BreakColumnBefore"/> property of the current <see cref="Block"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Block</typeparam>                                                                       
        /// <param name=" block">current <see cref="Block"/></param>                                                          
        /// <param name="breakColumnBefore">breakColumnBefore value</param>                                                                            
        /// <returns>current block</returns>                                                                                    
        public static TType BreakColumnBefore<TType>(this TType block, Boolean breakColumnBefore) where TType : notnull, Block
        {
            block.BreakColumnBefore = breakColumnBefore;
            return block;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Block.ClearFloaters"/> property of the current <see cref="Block"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Block</typeparam>                                                                       
        /// <param name=" block">current <see cref="Block"/></param>                                                          
        /// <param name="clearFloaters">clearFloaters value</param>                                                                            
        /// <returns>current block</returns>                                                                                    
        public static TType ClearFloaters<TType>(this TType block, WrapDirection clearFloaters) where TType : notnull, Block
        {
            block.ClearFloaters = clearFloaters;
            return block;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BlockUIContainer"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BlockUIContainerFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BlockUIContainer.Child"/> property of the current <see cref="BlockUIContainer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BlockUIContainer</typeparam>                                                                       
        /// <param name=" blockUIContainer">current <see cref="BlockUIContainer"/></param>                                                          
        /// <param name="child">child value</param>                                                                            
        /// <returns>current blockUIContainer</returns>                                                                                    
        public static TType Child<TType>(this TType blockUIContainer, UIElement child) where TType : notnull, BlockUIContainer
        {
            blockUIContainer.Child = child;
            return blockUIContainer;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DocumentReference"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DocumentReferenceFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DocumentReference.Source"/> property of the current <see cref="DocumentReference"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" documentReference">current <see cref="DocumentReference"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current documentReference</returns>                                                                                    
        public static DocumentReference Source(this DocumentReference documentReference, Uri source)
        {
            documentReference.Source = source;
            return documentReference;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="FixedDocumentSequence"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class FixedDocumentSequenceFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="FixedDocumentSequence.PrintTicket"/> property of the current <see cref="FixedDocumentSequence"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FixedDocumentSequence</typeparam>                                                                       
        /// <param name=" fixedDocumentSequence">current <see cref="FixedDocumentSequence"/></param>                                                          
        /// <param name="printTicket">printTicket value</param>                                                                            
        /// <returns>current fixedDocumentSequence</returns>                                                                                    
        public static TType PrintTicket<TType>(this TType fixedDocumentSequence, Object printTicket) where TType : notnull, FixedDocumentSequence
        {
            fixedDocumentSequence.PrintTicket = printTicket;
            return fixedDocumentSequence;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Figure"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class FigureFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Figure.HorizontalAnchor"/> property of the current <see cref="Figure"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Figure</typeparam>                                                                       
        /// <param name=" figure">current <see cref="Figure"/></param>                                                          
        /// <param name="horizontalAnchor">horizontalAnchor value</param>                                                                            
        /// <returns>current figure</returns>                                                                                    
        public static TType HorizontalAnchor<TType>(this TType figure, FigureHorizontalAnchor horizontalAnchor) where TType : notnull, Figure
        {
            figure.HorizontalAnchor = horizontalAnchor;
            return figure;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Figure.VerticalAnchor"/> property of the current <see cref="Figure"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Figure</typeparam>                                                                       
        /// <param name=" figure">current <see cref="Figure"/></param>                                                          
        /// <param name="verticalAnchor">verticalAnchor value</param>                                                                            
        /// <returns>current figure</returns>                                                                                    
        public static TType VerticalAnchor<TType>(this TType figure, FigureVerticalAnchor verticalAnchor) where TType : notnull, Figure
        {
            figure.VerticalAnchor = verticalAnchor;
            return figure;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Figure.HorizontalOffset"/> property of the current <see cref="Figure"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Figure</typeparam>                                                                       
        /// <param name=" figure">current <see cref="Figure"/></param>                                                          
        /// <param name="horizontalOffset">horizontalOffset value</param>                                                                            
        /// <returns>current figure</returns>                                                                                    
        public static TType HorizontalOffset<TType>(this TType figure, Double horizontalOffset) where TType : notnull, Figure
        {
            figure.HorizontalOffset = horizontalOffset;
            return figure;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Figure.VerticalOffset"/> property of the current <see cref="Figure"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Figure</typeparam>                                                                       
        /// <param name=" figure">current <see cref="Figure"/></param>                                                          
        /// <param name="verticalOffset">verticalOffset value</param>                                                                            
        /// <returns>current figure</returns>                                                                                    
        public static TType VerticalOffset<TType>(this TType figure, Double verticalOffset) where TType : notnull, Figure
        {
            figure.VerticalOffset = verticalOffset;
            return figure;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Figure.CanDelayPlacement"/> property of the current <see cref="Figure"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Figure</typeparam>                                                                       
        /// <param name=" figure">current <see cref="Figure"/></param>                                                          
        /// <param name="canDelayPlacement">canDelayPlacement value</param>                                                                            
        /// <returns>current figure</returns>                                                                                    
        public static TType CanDelayPlacement<TType>(this TType figure, Boolean canDelayPlacement) where TType : notnull, Figure
        {
            figure.CanDelayPlacement = canDelayPlacement;
            return figure;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Figure.WrapDirection"/> property of the current <see cref="Figure"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Figure</typeparam>                                                                       
        /// <param name=" figure">current <see cref="Figure"/></param>                                                          
        /// <param name="wrapDirection">wrapDirection value</param>                                                                            
        /// <returns>current figure</returns>                                                                                    
        public static TType WrapDirection<TType>(this TType figure, WrapDirection wrapDirection) where TType : notnull, Figure
        {
            figure.WrapDirection = wrapDirection;
            return figure;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Figure.Width"/> property of the current <see cref="Figure"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Figure</typeparam>                                                                       
        /// <param name=" figure">current <see cref="Figure"/></param>                                                          
        /// <param name="width">width value</param>                                                                            
        /// <returns>current figure</returns>                                                                                    
        public static TType Width<TType>(this TType figure, FigureLength width) where TType : notnull, Figure
        {
            figure.Width = width;
            return figure;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Figure.Height"/> property of the current <see cref="Figure"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Figure</typeparam>                                                                       
        /// <param name=" figure">current <see cref="Figure"/></param>                                                          
        /// <param name="height">height value</param>                                                                            
        /// <returns>current figure</returns>                                                                                    
        public static TType Height<TType>(this TType figure, FigureLength height) where TType : notnull, Figure
        {
            figure.Height = height;
            return figure;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="FixedDocument"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class FixedDocumentFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="FixedDocument.PrintTicket"/> property of the current <see cref="FixedDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FixedDocument</typeparam>                                                                       
        /// <param name=" fixedDocument">current <see cref="FixedDocument"/></param>                                                          
        /// <param name="printTicket">printTicket value</param>                                                                            
        /// <returns>current fixedDocument</returns>                                                                                    
        public static TType PrintTicket<TType>(this TType fixedDocument, Object printTicket) where TType : notnull, FixedDocument
        {
            fixedDocument.PrintTicket = printTicket;
            return fixedDocument;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="FixedPage"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class FixedPageFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="FixedPage.PrintTicket"/> property of the current <see cref="FixedPage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" fixedPage">current <see cref="FixedPage"/></param>                                                          
        /// <param name="printTicket">printTicket value</param>                                                                            
        /// <returns>current fixedPage</returns>                                                                                    
        public static FixedPage PrintTicket(this FixedPage fixedPage, Object printTicket)
        {
            fixedPage.PrintTicket = printTicket;
            return fixedPage;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FixedPage.Background"/> property of the current <see cref="FixedPage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" fixedPage">current <see cref="FixedPage"/></param>                                                          
        /// <param name="background">background value</param>                                                                            
        /// <returns>current fixedPage</returns>                                                                                    
        public static FixedPage Background(this FixedPage fixedPage, Brush background)
        {
            fixedPage.Background = background;
            return fixedPage;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FixedPage.ContentBox"/> property of the current <see cref="FixedPage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" fixedPage">current <see cref="FixedPage"/></param>                                                          
        /// <param name="contentBox">contentBox value</param>                                                                            
        /// <returns>current fixedPage</returns>                                                                                    
        public static FixedPage ContentBox(this FixedPage fixedPage, Rect contentBox)
        {
            fixedPage.ContentBox = contentBox;
            return fixedPage;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FixedPage.BleedBox"/> property of the current <see cref="FixedPage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" fixedPage">current <see cref="FixedPage"/></param>                                                          
        /// <param name="bleedBox">bleedBox value</param>                                                                            
        /// <returns>current fixedPage</returns>                                                                                    
        public static FixedPage BleedBox(this FixedPage fixedPage, Rect bleedBox)
        {
            fixedPage.BleedBox = bleedBox;
            return fixedPage;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Floater"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class FloaterFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Floater.HorizontalAlignment"/> property of the current <see cref="Floater"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Floater</typeparam>                                                                       
        /// <param name=" floater">current <see cref="Floater"/></param>                                                          
        /// <param name="horizontalAlignment">horizontalAlignment value</param>                                                                            
        /// <returns>current floater</returns>                                                                                    
        public static TType HorizontalAlignment<TType>(this TType floater, HorizontalAlignment horizontalAlignment) where TType : notnull, Floater
        {
            floater.HorizontalAlignment = horizontalAlignment;
            return floater;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Floater.Width"/> property of the current <see cref="Floater"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Floater</typeparam>                                                                       
        /// <param name=" floater">current <see cref="Floater"/></param>                                                          
        /// <param name="width">width value</param>                                                                            
        /// <returns>current floater</returns>                                                                                    
        public static TType Width<TType>(this TType floater, Double width) where TType : notnull, Floater
        {
            floater.Width = width;
            return floater;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="FlowDocument"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class FlowDocumentFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.FontFamily"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="fontFamily">fontFamily value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType FontFamily<TType>(this TType flowDocument, FontFamily fontFamily) where TType : notnull, FlowDocument
        {
            flowDocument.FontFamily = fontFamily;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.FontStyle"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="fontStyle">fontStyle value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType FontStyle<TType>(this TType flowDocument, FontStyle fontStyle) where TType : notnull, FlowDocument
        {
            flowDocument.FontStyle = fontStyle;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.FontWeight"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="fontWeight">fontWeight value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType FontWeight<TType>(this TType flowDocument, FontWeight fontWeight) where TType : notnull, FlowDocument
        {
            flowDocument.FontWeight = fontWeight;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.FontStretch"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="fontStretch">fontStretch value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType FontStretch<TType>(this TType flowDocument, FontStretch fontStretch) where TType : notnull, FlowDocument
        {
            flowDocument.FontStretch = fontStretch;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.FontSize"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="fontSize">fontSize value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType FontSize<TType>(this TType flowDocument, Double fontSize) where TType : notnull, FlowDocument
        {
            flowDocument.FontSize = fontSize;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.Foreground"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="foreground">foreground value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType Foreground<TType>(this TType flowDocument, Brush foreground) where TType : notnull, FlowDocument
        {
            flowDocument.Foreground = foreground;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.Background"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="background">background value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType Background<TType>(this TType flowDocument, Brush background) where TType : notnull, FlowDocument
        {
            flowDocument.Background = background;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.TextEffects"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="textEffects">textEffects value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType TextEffects<TType>(this TType flowDocument, TextEffectCollection textEffects) where TType : notnull, FlowDocument
        {
            flowDocument.TextEffects = textEffects;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.TextAlignment"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="textAlignment">textAlignment value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType TextAlignment<TType>(this TType flowDocument, TextAlignment textAlignment) where TType : notnull, FlowDocument
        {
            flowDocument.TextAlignment = textAlignment;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.FlowDirection"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="flowDirection">flowDirection value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType FlowDirection<TType>(this TType flowDocument, FlowDirection flowDirection) where TType : notnull, FlowDocument
        {
            flowDocument.FlowDirection = flowDirection;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.LineHeight"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="lineHeight">lineHeight value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType LineHeight<TType>(this TType flowDocument, Double lineHeight) where TType : notnull, FlowDocument
        {
            flowDocument.LineHeight = lineHeight;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.LineStackingStrategy"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="lineStackingStrategy">lineStackingStrategy value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType LineStackingStrategy<TType>(this TType flowDocument, LineStackingStrategy lineStackingStrategy) where TType : notnull, FlowDocument
        {
            flowDocument.LineStackingStrategy = lineStackingStrategy;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.ColumnWidth"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="columnWidth">columnWidth value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType ColumnWidth<TType>(this TType flowDocument, Double columnWidth) where TType : notnull, FlowDocument
        {
            flowDocument.ColumnWidth = columnWidth;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.ColumnGap"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="columnGap">columnGap value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType ColumnGap<TType>(this TType flowDocument, Double columnGap) where TType : notnull, FlowDocument
        {
            flowDocument.ColumnGap = columnGap;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.IsColumnWidthFlexible"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="isColumnWidthFlexible">isColumnWidthFlexible value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType IsColumnWidthFlexible<TType>(this TType flowDocument, Boolean isColumnWidthFlexible) where TType : notnull, FlowDocument
        {
            flowDocument.IsColumnWidthFlexible = isColumnWidthFlexible;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.ColumnRuleWidth"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="columnRuleWidth">columnRuleWidth value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType ColumnRuleWidth<TType>(this TType flowDocument, Double columnRuleWidth) where TType : notnull, FlowDocument
        {
            flowDocument.ColumnRuleWidth = columnRuleWidth;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.ColumnRuleBrush"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="columnRuleBrush">columnRuleBrush value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType ColumnRuleBrush<TType>(this TType flowDocument, Brush columnRuleBrush) where TType : notnull, FlowDocument
        {
            flowDocument.ColumnRuleBrush = columnRuleBrush;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.IsOptimalParagraphEnabled"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="isOptimalParagraphEnabled">isOptimalParagraphEnabled value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType IsOptimalParagraphEnabled<TType>(this TType flowDocument, Boolean isOptimalParagraphEnabled) where TType : notnull, FlowDocument
        {
            flowDocument.IsOptimalParagraphEnabled = isOptimalParagraphEnabled;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.PageWidth"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="pageWidth">pageWidth value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType PageWidth<TType>(this TType flowDocument, Double pageWidth) where TType : notnull, FlowDocument
        {
            flowDocument.PageWidth = pageWidth;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.MinPageWidth"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="minPageWidth">minPageWidth value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType MinPageWidth<TType>(this TType flowDocument, Double minPageWidth) where TType : notnull, FlowDocument
        {
            flowDocument.MinPageWidth = minPageWidth;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.MaxPageWidth"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="maxPageWidth">maxPageWidth value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType MaxPageWidth<TType>(this TType flowDocument, Double maxPageWidth) where TType : notnull, FlowDocument
        {
            flowDocument.MaxPageWidth = maxPageWidth;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.PageHeight"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="pageHeight">pageHeight value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType PageHeight<TType>(this TType flowDocument, Double pageHeight) where TType : notnull, FlowDocument
        {
            flowDocument.PageHeight = pageHeight;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.MinPageHeight"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="minPageHeight">minPageHeight value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType MinPageHeight<TType>(this TType flowDocument, Double minPageHeight) where TType : notnull, FlowDocument
        {
            flowDocument.MinPageHeight = minPageHeight;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.MaxPageHeight"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="maxPageHeight">maxPageHeight value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType MaxPageHeight<TType>(this TType flowDocument, Double maxPageHeight) where TType : notnull, FlowDocument
        {
            flowDocument.MaxPageHeight = maxPageHeight;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.PagePadding"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="pagePadding">pagePadding value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType PagePadding<TType>(this TType flowDocument, Thickness pagePadding) where TType : notnull, FlowDocument
        {
            flowDocument.PagePadding = pagePadding;
            return flowDocument;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocument.IsHyphenationEnabled"/> property of the current <see cref="FlowDocument"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocument</typeparam>                                                                       
        /// <param name=" flowDocument">current <see cref="FlowDocument"/></param>                                                          
        /// <param name="isHyphenationEnabled">isHyphenationEnabled value</param>                                                                            
        /// <returns>current flowDocument</returns>                                                                                    
        public static TType IsHyphenationEnabled<TType>(this TType flowDocument, Boolean isHyphenationEnabled) where TType : notnull, FlowDocument
        {
            flowDocument.IsHyphenationEnabled = isHyphenationEnabled;
            return flowDocument;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Glyphs"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GlyphsFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Glyphs.Fill"/> property of the current <see cref="Glyphs"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" glyphs">current <see cref="Glyphs"/></param>                                                          
        /// <param name="fill">fill value</param>                                                                            
        /// <returns>current glyphs</returns>                                                                                    
        public static Glyphs Fill(this Glyphs glyphs, Brush fill)
        {
            glyphs.Fill = fill;
            return glyphs;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Glyphs.Indices"/> property of the current <see cref="Glyphs"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" glyphs">current <see cref="Glyphs"/></param>                                                          
        /// <param name="indices">indices value</param>                                                                            
        /// <returns>current glyphs</returns>                                                                                    
        public static Glyphs Indices(this Glyphs glyphs, String indices)
        {
            glyphs.Indices = indices;
            return glyphs;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Glyphs.UnicodeString"/> property of the current <see cref="Glyphs"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" glyphs">current <see cref="Glyphs"/></param>                                                          
        /// <param name="unicodeString">unicodeString value</param>                                                                            
        /// <returns>current glyphs</returns>                                                                                    
        public static Glyphs UnicodeString(this Glyphs glyphs, String unicodeString)
        {
            glyphs.UnicodeString = unicodeString;
            return glyphs;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Glyphs.CaretStops"/> property of the current <see cref="Glyphs"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" glyphs">current <see cref="Glyphs"/></param>                                                          
        /// <param name="caretStops">caretStops value</param>                                                                            
        /// <returns>current glyphs</returns>                                                                                    
        public static Glyphs CaretStops(this Glyphs glyphs, String caretStops)
        {
            glyphs.CaretStops = caretStops;
            return glyphs;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Glyphs.FontRenderingEmSize"/> property of the current <see cref="Glyphs"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" glyphs">current <see cref="Glyphs"/></param>                                                          
        /// <param name="fontRenderingEmSize">fontRenderingEmSize value</param>                                                                            
        /// <returns>current glyphs</returns>                                                                                    
        public static Glyphs FontRenderingEmSize(this Glyphs glyphs, Double fontRenderingEmSize)
        {
            glyphs.FontRenderingEmSize = fontRenderingEmSize;
            return glyphs;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Glyphs.OriginX"/> property of the current <see cref="Glyphs"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" glyphs">current <see cref="Glyphs"/></param>                                                          
        /// <param name="originX">originX value</param>                                                                            
        /// <returns>current glyphs</returns>                                                                                    
        public static Glyphs OriginX(this Glyphs glyphs, Double originX)
        {
            glyphs.OriginX = originX;
            return glyphs;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Glyphs.OriginY"/> property of the current <see cref="Glyphs"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" glyphs">current <see cref="Glyphs"/></param>                                                          
        /// <param name="originY">originY value</param>                                                                            
        /// <returns>current glyphs</returns>                                                                                    
        public static Glyphs OriginY(this Glyphs glyphs, Double originY)
        {
            glyphs.OriginY = originY;
            return glyphs;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Glyphs.FontUri"/> property of the current <see cref="Glyphs"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" glyphs">current <see cref="Glyphs"/></param>                                                          
        /// <param name="fontUri">fontUri value</param>                                                                            
        /// <returns>current glyphs</returns>                                                                                    
        public static Glyphs FontUri(this Glyphs glyphs, Uri fontUri)
        {
            glyphs.FontUri = fontUri;
            return glyphs;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Glyphs.StyleSimulations"/> property of the current <see cref="Glyphs"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" glyphs">current <see cref="Glyphs"/></param>                                                          
        /// <param name="styleSimulations">styleSimulations value</param>                                                                            
        /// <returns>current glyphs</returns>                                                                                    
        public static Glyphs StyleSimulations(this Glyphs glyphs, StyleSimulations styleSimulations)
        {
            glyphs.StyleSimulations = styleSimulations;
            return glyphs;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Glyphs.IsSideways"/> property of the current <see cref="Glyphs"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" glyphs">current <see cref="Glyphs"/></param>                                                          
        /// <param name="isSideways">isSideways value</param>                                                                            
        /// <returns>current glyphs</returns>                                                                                    
        public static Glyphs IsSideways(this Glyphs glyphs, Boolean isSideways)
        {
            glyphs.IsSideways = isSideways;
            return glyphs;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Glyphs.BidiLevel"/> property of the current <see cref="Glyphs"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" glyphs">current <see cref="Glyphs"/></param>                                                          
        /// <param name="bidiLevel">bidiLevel value</param>                                                                            
        /// <returns>current glyphs</returns>                                                                                    
        public static Glyphs BidiLevel(this Glyphs glyphs, Int32 bidiLevel)
        {
            glyphs.BidiLevel = bidiLevel;
            return glyphs;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Glyphs.DeviceFontName"/> property of the current <see cref="Glyphs"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" glyphs">current <see cref="Glyphs"/></param>                                                          
        /// <param name="deviceFontName">deviceFontName value</param>                                                                            
        /// <returns>current glyphs</returns>                                                                                    
        public static Glyphs DeviceFontName(this Glyphs glyphs, String deviceFontName)
        {
            glyphs.DeviceFontName = deviceFontName;
            return glyphs;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Hyperlink"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class HyperlinkFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Hyperlink.Command"/> property of the current <see cref="Hyperlink"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Hyperlink</typeparam>                                                                       
        /// <param name=" hyperlink">current <see cref="Hyperlink"/></param>                                                          
        /// <param name="command">command value</param>                                                                            
        /// <returns>current hyperlink</returns>                                                                                    
        public static TType Command<TType>(this TType hyperlink, ICommand command) where TType : notnull, Hyperlink
        {
            hyperlink.Command = command;
            return hyperlink;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Hyperlink.CommandParameter"/> property of the current <see cref="Hyperlink"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Hyperlink</typeparam>                                                                       
        /// <param name=" hyperlink">current <see cref="Hyperlink"/></param>                                                          
        /// <param name="commandParameter">commandParameter value</param>                                                                            
        /// <returns>current hyperlink</returns>                                                                                    
        public static TType CommandParameter<TType>(this TType hyperlink, Object commandParameter) where TType : notnull, Hyperlink
        {
            hyperlink.CommandParameter = commandParameter;
            return hyperlink;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Hyperlink.CommandTarget"/> property of the current <see cref="Hyperlink"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Hyperlink</typeparam>                                                                       
        /// <param name=" hyperlink">current <see cref="Hyperlink"/></param>                                                          
        /// <param name="commandTarget">commandTarget value</param>                                                                            
        /// <returns>current hyperlink</returns>                                                                                    
        public static TType CommandTarget<TType>(this TType hyperlink, IInputElement commandTarget) where TType : notnull, Hyperlink
        {
            hyperlink.CommandTarget = commandTarget;
            return hyperlink;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Hyperlink.NavigateUri"/> property of the current <see cref="Hyperlink"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Hyperlink</typeparam>                                                                       
        /// <param name=" hyperlink">current <see cref="Hyperlink"/></param>                                                          
        /// <param name="navigateUri">navigateUri value</param>                                                                            
        /// <returns>current hyperlink</returns>                                                                                    
        public static TType NavigateUri<TType>(this TType hyperlink, Uri navigateUri) where TType : notnull, Hyperlink
        {
            hyperlink.NavigateUri = navigateUri;
            return hyperlink;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Hyperlink.TargetName"/> property of the current <see cref="Hyperlink"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Hyperlink</typeparam>                                                                       
        /// <param name=" hyperlink">current <see cref="Hyperlink"/></param>                                                          
        /// <param name="targetName">targetName value</param>                                                                            
        /// <returns>current hyperlink</returns>                                                                                    
        public static TType TargetName<TType>(this TType hyperlink, String targetName) where TType : notnull, Hyperlink
        {
            hyperlink.TargetName = targetName;
            return hyperlink;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Inline"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class InlineFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Inline.BaselineAlignment"/> property of the current <see cref="Inline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Inline</typeparam>                                                                       
        /// <param name=" inline">current <see cref="Inline"/></param>                                                          
        /// <param name="baselineAlignment">baselineAlignment value</param>                                                                            
        /// <returns>current inline</returns>                                                                                    
        public static TType BaselineAlignment<TType>(this TType inline, BaselineAlignment baselineAlignment) where TType : notnull, Inline
        {
            inline.BaselineAlignment = baselineAlignment;
            return inline;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Inline.TextDecorations"/> property of the current <see cref="Inline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Inline</typeparam>                                                                       
        /// <param name=" inline">current <see cref="Inline"/></param>                                                          
        /// <param name="textDecorations">textDecorations value</param>                                                                            
        /// <returns>current inline</returns>                                                                                    
        public static TType TextDecorations<TType>(this TType inline, TextDecorationCollection textDecorations) where TType : notnull, Inline
        {
            inline.TextDecorations = textDecorations;
            return inline;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Inline.FlowDirection"/> property of the current <see cref="Inline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Inline</typeparam>                                                                       
        /// <param name=" inline">current <see cref="Inline"/></param>                                                          
        /// <param name="flowDirection">flowDirection value</param>                                                                            
        /// <returns>current inline</returns>                                                                                    
        public static TType FlowDirection<TType>(this TType inline, FlowDirection flowDirection) where TType : notnull, Inline
        {
            inline.FlowDirection = flowDirection;
            return inline;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="InlineUIContainer"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class InlineUIContainerFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="InlineUIContainer.Child"/> property of the current <see cref="InlineUIContainer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InlineUIContainer</typeparam>                                                                       
        /// <param name=" inlineUIContainer">current <see cref="InlineUIContainer"/></param>                                                          
        /// <param name="child">child value</param>                                                                            
        /// <returns>current inlineUIContainer</returns>                                                                                    
        public static TType Child<TType>(this TType inlineUIContainer, UIElement child) where TType : notnull, InlineUIContainer
        {
            inlineUIContainer.Child = child;
            return inlineUIContainer;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="List"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ListFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="List.MarkerStyle"/> property of the current <see cref="List"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">List</typeparam>                                                                       
        /// <param name=" list">current <see cref="List"/></param>                                                          
        /// <param name="markerStyle">markerStyle value</param>                                                                            
        /// <returns>current list</returns>                                                                                    
        public static TType MarkerStyle<TType>(this TType list, TextMarkerStyle markerStyle) where TType : notnull, List
        {
            list.MarkerStyle = markerStyle;
            return list;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="List.MarkerOffset"/> property of the current <see cref="List"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">List</typeparam>                                                                       
        /// <param name=" list">current <see cref="List"/></param>                                                          
        /// <param name="markerOffset">markerOffset value</param>                                                                            
        /// <returns>current list</returns>                                                                                    
        public static TType MarkerOffset<TType>(this TType list, Double markerOffset) where TType : notnull, List
        {
            list.MarkerOffset = markerOffset;
            return list;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="List.StartIndex"/> property of the current <see cref="List"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">List</typeparam>                                                                       
        /// <param name=" list">current <see cref="List"/></param>                                                          
        /// <param name="startIndex">startIndex value</param>                                                                            
        /// <returns>current list</returns>                                                                                    
        public static TType StartIndex<TType>(this TType list, Int32 startIndex) where TType : notnull, List
        {
            list.StartIndex = startIndex;
            return list;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ListItem"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ListItemFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ListItem.Margin"/> property of the current <see cref="ListItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ListItem</typeparam>                                                                       
        /// <param name=" listItem">current <see cref="ListItem"/></param>                                                          
        /// <param name="margin">margin value</param>                                                                            
        /// <returns>current listItem</returns>                                                                                    
        public static TType Margin<TType>(this TType listItem, Thickness margin) where TType : notnull, ListItem
        {
            listItem.Margin = margin;
            return listItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ListItem.Padding"/> property of the current <see cref="ListItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ListItem</typeparam>                                                                       
        /// <param name=" listItem">current <see cref="ListItem"/></param>                                                          
        /// <param name="padding">padding value</param>                                                                            
        /// <returns>current listItem</returns>                                                                                    
        public static TType Padding<TType>(this TType listItem, Thickness padding) where TType : notnull, ListItem
        {
            listItem.Padding = padding;
            return listItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ListItem.BorderThickness"/> property of the current <see cref="ListItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ListItem</typeparam>                                                                       
        /// <param name=" listItem">current <see cref="ListItem"/></param>                                                          
        /// <param name="borderThickness">borderThickness value</param>                                                                            
        /// <returns>current listItem</returns>                                                                                    
        public static TType BorderThickness<TType>(this TType listItem, Thickness borderThickness) where TType : notnull, ListItem
        {
            listItem.BorderThickness = borderThickness;
            return listItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ListItem.BorderBrush"/> property of the current <see cref="ListItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ListItem</typeparam>                                                                       
        /// <param name=" listItem">current <see cref="ListItem"/></param>                                                          
        /// <param name="borderBrush">borderBrush value</param>                                                                            
        /// <returns>current listItem</returns>                                                                                    
        public static TType BorderBrush<TType>(this TType listItem, Brush borderBrush) where TType : notnull, ListItem
        {
            listItem.BorderBrush = borderBrush;
            return listItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ListItem.TextAlignment"/> property of the current <see cref="ListItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ListItem</typeparam>                                                                       
        /// <param name=" listItem">current <see cref="ListItem"/></param>                                                          
        /// <param name="textAlignment">textAlignment value</param>                                                                            
        /// <returns>current listItem</returns>                                                                                    
        public static TType TextAlignment<TType>(this TType listItem, TextAlignment textAlignment) where TType : notnull, ListItem
        {
            listItem.TextAlignment = textAlignment;
            return listItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ListItem.FlowDirection"/> property of the current <see cref="ListItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ListItem</typeparam>                                                                       
        /// <param name=" listItem">current <see cref="ListItem"/></param>                                                          
        /// <param name="flowDirection">flowDirection value</param>                                                                            
        /// <returns>current listItem</returns>                                                                                    
        public static TType FlowDirection<TType>(this TType listItem, FlowDirection flowDirection) where TType : notnull, ListItem
        {
            listItem.FlowDirection = flowDirection;
            return listItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ListItem.LineHeight"/> property of the current <see cref="ListItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ListItem</typeparam>                                                                       
        /// <param name=" listItem">current <see cref="ListItem"/></param>                                                          
        /// <param name="lineHeight">lineHeight value</param>                                                                            
        /// <returns>current listItem</returns>                                                                                    
        public static TType LineHeight<TType>(this TType listItem, Double lineHeight) where TType : notnull, ListItem
        {
            listItem.LineHeight = lineHeight;
            return listItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ListItem.LineStackingStrategy"/> property of the current <see cref="ListItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ListItem</typeparam>                                                                       
        /// <param name=" listItem">current <see cref="ListItem"/></param>                                                          
        /// <param name="lineStackingStrategy">lineStackingStrategy value</param>                                                                            
        /// <returns>current listItem</returns>                                                                                    
        public static TType LineStackingStrategy<TType>(this TType listItem, LineStackingStrategy lineStackingStrategy) where TType : notnull, ListItem
        {
            listItem.LineStackingStrategy = lineStackingStrategy;
            return listItem;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="PageContent"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PageContentFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PageContent.Source"/> property of the current <see cref="PageContent"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pageContent">current <see cref="PageContent"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current pageContent</returns>                                                                                    
        public static PageContent Source(this PageContent pageContent, Uri source)
        {
            pageContent.Source = source;
            return pageContent;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PageContent.Child"/> property of the current <see cref="PageContent"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pageContent">current <see cref="PageContent"/></param>                                                          
        /// <param name="child">child value</param>                                                                            
        /// <returns>current pageContent</returns>                                                                                    
        public static PageContent Child(this PageContent pageContent, FixedPage child)
        {
            pageContent.Child = child;
            return pageContent;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Paragraph"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ParagraphFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Paragraph.TextDecorations"/> property of the current <see cref="Paragraph"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Paragraph</typeparam>                                                                       
        /// <param name=" paragraph">current <see cref="Paragraph"/></param>                                                          
        /// <param name="textDecorations">textDecorations value</param>                                                                            
        /// <returns>current paragraph</returns>                                                                                    
        public static TType TextDecorations<TType>(this TType paragraph, TextDecorationCollection textDecorations) where TType : notnull, Paragraph
        {
            paragraph.TextDecorations = textDecorations;
            return paragraph;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Paragraph.TextIndent"/> property of the current <see cref="Paragraph"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Paragraph</typeparam>                                                                       
        /// <param name=" paragraph">current <see cref="Paragraph"/></param>                                                          
        /// <param name="textIndent">textIndent value</param>                                                                            
        /// <returns>current paragraph</returns>                                                                                    
        public static TType TextIndent<TType>(this TType paragraph, Double textIndent) where TType : notnull, Paragraph
        {
            paragraph.TextIndent = textIndent;
            return paragraph;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Paragraph.MinOrphanLines"/> property of the current <see cref="Paragraph"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Paragraph</typeparam>                                                                       
        /// <param name=" paragraph">current <see cref="Paragraph"/></param>                                                          
        /// <param name="minOrphanLines">minOrphanLines value</param>                                                                            
        /// <returns>current paragraph</returns>                                                                                    
        public static TType MinOrphanLines<TType>(this TType paragraph, Int32 minOrphanLines) where TType : notnull, Paragraph
        {
            paragraph.MinOrphanLines = minOrphanLines;
            return paragraph;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Paragraph.MinWidowLines"/> property of the current <see cref="Paragraph"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Paragraph</typeparam>                                                                       
        /// <param name=" paragraph">current <see cref="Paragraph"/></param>                                                          
        /// <param name="minWidowLines">minWidowLines value</param>                                                                            
        /// <returns>current paragraph</returns>                                                                                    
        public static TType MinWidowLines<TType>(this TType paragraph, Int32 minWidowLines) where TType : notnull, Paragraph
        {
            paragraph.MinWidowLines = minWidowLines;
            return paragraph;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Paragraph.KeepWithNext"/> property of the current <see cref="Paragraph"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Paragraph</typeparam>                                                                       
        /// <param name=" paragraph">current <see cref="Paragraph"/></param>                                                          
        /// <param name="keepWithNext">keepWithNext value</param>                                                                            
        /// <returns>current paragraph</returns>                                                                                    
        public static TType KeepWithNext<TType>(this TType paragraph, Boolean keepWithNext) where TType : notnull, Paragraph
        {
            paragraph.KeepWithNext = keepWithNext;
            return paragraph;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Paragraph.KeepTogether"/> property of the current <see cref="Paragraph"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Paragraph</typeparam>                                                                       
        /// <param name=" paragraph">current <see cref="Paragraph"/></param>                                                          
        /// <param name="keepTogether">keepTogether value</param>                                                                            
        /// <returns>current paragraph</returns>                                                                                    
        public static TType KeepTogether<TType>(this TType paragraph, Boolean keepTogether) where TType : notnull, Paragraph
        {
            paragraph.KeepTogether = keepTogether;
            return paragraph;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Run"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class RunFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Run.Text"/> property of the current <see cref="Run"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Run</typeparam>                                                                       
        /// <param name=" run">current <see cref="Run"/></param>                                                          
        /// <param name="text">text value</param>                                                                            
        /// <returns>current run</returns>                                                                                    
        public static TType Text<TType>(this TType run, String text) where TType : notnull, Run
        {
            run.Text = text;
            return run;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Section"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SectionFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Section.HasTrailingParagraphBreakOnPaste"/> property of the current <see cref="Section"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Section</typeparam>                                                                       
        /// <param name=" section">current <see cref="Section"/></param>                                                          
        /// <param name="hasTrailingParagraphBreakOnPaste">hasTrailingParagraphBreakOnPaste value</param>                                                                            
        /// <returns>current section</returns>                                                                                    
        public static TType HasTrailingParagraphBreakOnPaste<TType>(this TType section, Boolean hasTrailingParagraphBreakOnPaste) where TType : notnull, Section
        {
            section.HasTrailingParagraphBreakOnPaste = hasTrailingParagraphBreakOnPaste;
            return section;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Table"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TableFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Table.CellSpacing"/> property of the current <see cref="Table"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Table</typeparam>                                                                       
        /// <param name=" table">current <see cref="Table"/></param>                                                          
        /// <param name="cellSpacing">cellSpacing value</param>                                                                            
        /// <returns>current table</returns>                                                                                    
        public static TType CellSpacing<TType>(this TType table, Double cellSpacing) where TType : notnull, Table
        {
            table.CellSpacing = cellSpacing;
            return table;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TableCell"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TableCellFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TableCell.ColumnSpan"/> property of the current <see cref="TableCell"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TableCell</typeparam>                                                                       
        /// <param name=" tableCell">current <see cref="TableCell"/></param>                                                          
        /// <param name="columnSpan">columnSpan value</param>                                                                            
        /// <returns>current tableCell</returns>                                                                                    
        public static TType ColumnSpan<TType>(this TType tableCell, Int32 columnSpan) where TType : notnull, TableCell
        {
            tableCell.ColumnSpan = columnSpan;
            return tableCell;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TableCell.RowSpan"/> property of the current <see cref="TableCell"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TableCell</typeparam>                                                                       
        /// <param name=" tableCell">current <see cref="TableCell"/></param>                                                          
        /// <param name="rowSpan">rowSpan value</param>                                                                            
        /// <returns>current tableCell</returns>                                                                                    
        public static TType RowSpan<TType>(this TType tableCell, Int32 rowSpan) where TType : notnull, TableCell
        {
            tableCell.RowSpan = rowSpan;
            return tableCell;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TableCell.Padding"/> property of the current <see cref="TableCell"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TableCell</typeparam>                                                                       
        /// <param name=" tableCell">current <see cref="TableCell"/></param>                                                          
        /// <param name="padding">padding value</param>                                                                            
        /// <returns>current tableCell</returns>                                                                                    
        public static TType Padding<TType>(this TType tableCell, Thickness padding) where TType : notnull, TableCell
        {
            tableCell.Padding = padding;
            return tableCell;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TableCell.BorderThickness"/> property of the current <see cref="TableCell"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TableCell</typeparam>                                                                       
        /// <param name=" tableCell">current <see cref="TableCell"/></param>                                                          
        /// <param name="borderThickness">borderThickness value</param>                                                                            
        /// <returns>current tableCell</returns>                                                                                    
        public static TType BorderThickness<TType>(this TType tableCell, Thickness borderThickness) where TType : notnull, TableCell
        {
            tableCell.BorderThickness = borderThickness;
            return tableCell;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TableCell.BorderBrush"/> property of the current <see cref="TableCell"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TableCell</typeparam>                                                                       
        /// <param name=" tableCell">current <see cref="TableCell"/></param>                                                          
        /// <param name="borderBrush">borderBrush value</param>                                                                            
        /// <returns>current tableCell</returns>                                                                                    
        public static TType BorderBrush<TType>(this TType tableCell, Brush borderBrush) where TType : notnull, TableCell
        {
            tableCell.BorderBrush = borderBrush;
            return tableCell;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TableCell.TextAlignment"/> property of the current <see cref="TableCell"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TableCell</typeparam>                                                                       
        /// <param name=" tableCell">current <see cref="TableCell"/></param>                                                          
        /// <param name="textAlignment">textAlignment value</param>                                                                            
        /// <returns>current tableCell</returns>                                                                                    
        public static TType TextAlignment<TType>(this TType tableCell, TextAlignment textAlignment) where TType : notnull, TableCell
        {
            tableCell.TextAlignment = textAlignment;
            return tableCell;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TableCell.FlowDirection"/> property of the current <see cref="TableCell"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TableCell</typeparam>                                                                       
        /// <param name=" tableCell">current <see cref="TableCell"/></param>                                                          
        /// <param name="flowDirection">flowDirection value</param>                                                                            
        /// <returns>current tableCell</returns>                                                                                    
        public static TType FlowDirection<TType>(this TType tableCell, FlowDirection flowDirection) where TType : notnull, TableCell
        {
            tableCell.FlowDirection = flowDirection;
            return tableCell;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TableCell.LineHeight"/> property of the current <see cref="TableCell"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TableCell</typeparam>                                                                       
        /// <param name=" tableCell">current <see cref="TableCell"/></param>                                                          
        /// <param name="lineHeight">lineHeight value</param>                                                                            
        /// <returns>current tableCell</returns>                                                                                    
        public static TType LineHeight<TType>(this TType tableCell, Double lineHeight) where TType : notnull, TableCell
        {
            tableCell.LineHeight = lineHeight;
            return tableCell;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TableCell.LineStackingStrategy"/> property of the current <see cref="TableCell"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TableCell</typeparam>                                                                       
        /// <param name=" tableCell">current <see cref="TableCell"/></param>                                                          
        /// <param name="lineStackingStrategy">lineStackingStrategy value</param>                                                                            
        /// <returns>current tableCell</returns>                                                                                    
        public static TType LineStackingStrategy<TType>(this TType tableCell, LineStackingStrategy lineStackingStrategy) where TType : notnull, TableCell
        {
            tableCell.LineStackingStrategy = lineStackingStrategy;
            return tableCell;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TableColumn"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TableColumnFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TableColumn.Width"/> property of the current <see cref="TableColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TableColumn</typeparam>                                                                       
        /// <param name=" tableColumn">current <see cref="TableColumn"/></param>                                                          
        /// <param name="width">width value</param>                                                                            
        /// <returns>current tableColumn</returns>                                                                                    
        public static TType Width<TType>(this TType tableColumn, GridLength width) where TType : notnull, TableColumn
        {
            tableColumn.Width = width;
            return tableColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TableColumn.Background"/> property of the current <see cref="TableColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TableColumn</typeparam>                                                                       
        /// <param name=" tableColumn">current <see cref="TableColumn"/></param>                                                          
        /// <param name="background">background value</param>                                                                            
        /// <returns>current tableColumn</returns>                                                                                    
        public static TType Background<TType>(this TType tableColumn, Brush background) where TType : notnull, TableColumn
        {
            tableColumn.Background = background;
            return tableColumn;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TextElement"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TextElementFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TextElement.FontFamily"/> property of the current <see cref="TextElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextElement</typeparam>                                                                       
        /// <param name=" textElement">current <see cref="TextElement"/></param>                                                          
        /// <param name="fontFamily">fontFamily value</param>                                                                            
        /// <returns>current textElement</returns>                                                                                    
        public static TType FontFamily<TType>(this TType textElement, FontFamily fontFamily) where TType : notnull, TextElement
        {
            textElement.FontFamily = fontFamily;
            return textElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextElement.FontStyle"/> property of the current <see cref="TextElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextElement</typeparam>                                                                       
        /// <param name=" textElement">current <see cref="TextElement"/></param>                                                          
        /// <param name="fontStyle">fontStyle value</param>                                                                            
        /// <returns>current textElement</returns>                                                                                    
        public static TType FontStyle<TType>(this TType textElement, FontStyle fontStyle) where TType : notnull, TextElement
        {
            textElement.FontStyle = fontStyle;
            return textElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextElement.FontWeight"/> property of the current <see cref="TextElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextElement</typeparam>                                                                       
        /// <param name=" textElement">current <see cref="TextElement"/></param>                                                          
        /// <param name="fontWeight">fontWeight value</param>                                                                            
        /// <returns>current textElement</returns>                                                                                    
        public static TType FontWeight<TType>(this TType textElement, FontWeight fontWeight) where TType : notnull, TextElement
        {
            textElement.FontWeight = fontWeight;
            return textElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextElement.FontStretch"/> property of the current <see cref="TextElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextElement</typeparam>                                                                       
        /// <param name=" textElement">current <see cref="TextElement"/></param>                                                          
        /// <param name="fontStretch">fontStretch value</param>                                                                            
        /// <returns>current textElement</returns>                                                                                    
        public static TType FontStretch<TType>(this TType textElement, FontStretch fontStretch) where TType : notnull, TextElement
        {
            textElement.FontStretch = fontStretch;
            return textElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextElement.FontSize"/> property of the current <see cref="TextElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextElement</typeparam>                                                                       
        /// <param name=" textElement">current <see cref="TextElement"/></param>                                                          
        /// <param name="fontSize">fontSize value</param>                                                                            
        /// <returns>current textElement</returns>                                                                                    
        public static TType FontSize<TType>(this TType textElement, Double fontSize) where TType : notnull, TextElement
        {
            textElement.FontSize = fontSize;
            return textElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextElement.Foreground"/> property of the current <see cref="TextElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextElement</typeparam>                                                                       
        /// <param name=" textElement">current <see cref="TextElement"/></param>                                                          
        /// <param name="foreground">foreground value</param>                                                                            
        /// <returns>current textElement</returns>                                                                                    
        public static TType Foreground<TType>(this TType textElement, Brush foreground) where TType : notnull, TextElement
        {
            textElement.Foreground = foreground;
            return textElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextElement.Background"/> property of the current <see cref="TextElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextElement</typeparam>                                                                       
        /// <param name=" textElement">current <see cref="TextElement"/></param>                                                          
        /// <param name="background">background value</param>                                                                            
        /// <returns>current textElement</returns>                                                                                    
        public static TType Background<TType>(this TType textElement, Brush background) where TType : notnull, TextElement
        {
            textElement.Background = background;
            return textElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextElement.TextEffects"/> property of the current <see cref="TextElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextElement</typeparam>                                                                       
        /// <param name=" textElement">current <see cref="TextElement"/></param>                                                          
        /// <param name="textEffects">textEffects value</param>                                                                            
        /// <returns>current textElement</returns>                                                                                    
        public static TType TextEffects<TType>(this TType textElement, TextEffectCollection textEffects) where TType : notnull, TextElement
        {
            textElement.TextEffects = textEffects;
            return textElement;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="StickyNoteControl"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class StickyNoteControlFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="StickyNoteControl.IsExpanded"/> property of the current <see cref="StickyNoteControl"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" stickyNoteControl">current <see cref="StickyNoteControl"/></param>                                                          
        /// <param name="isExpanded">isExpanded value</param>                                                                            
        /// <returns>current stickyNoteControl</returns>                                                                                    
        public static StickyNoteControl IsExpanded(this StickyNoteControl stickyNoteControl, Boolean isExpanded)
        {
            stickyNoteControl.IsExpanded = isExpanded;
            return stickyNoteControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="StickyNoteControl.CaptionFontFamily"/> property of the current <see cref="StickyNoteControl"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" stickyNoteControl">current <see cref="StickyNoteControl"/></param>                                                          
        /// <param name="captionFontFamily">captionFontFamily value</param>                                                                            
        /// <returns>current stickyNoteControl</returns>                                                                                    
        public static StickyNoteControl CaptionFontFamily(this StickyNoteControl stickyNoteControl, FontFamily captionFontFamily)
        {
            stickyNoteControl.CaptionFontFamily = captionFontFamily;
            return stickyNoteControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="StickyNoteControl.CaptionFontSize"/> property of the current <see cref="StickyNoteControl"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" stickyNoteControl">current <see cref="StickyNoteControl"/></param>                                                          
        /// <param name="captionFontSize">captionFontSize value</param>                                                                            
        /// <returns>current stickyNoteControl</returns>                                                                                    
        public static StickyNoteControl CaptionFontSize(this StickyNoteControl stickyNoteControl, Double captionFontSize)
        {
            stickyNoteControl.CaptionFontSize = captionFontSize;
            return stickyNoteControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="StickyNoteControl.CaptionFontStretch"/> property of the current <see cref="StickyNoteControl"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" stickyNoteControl">current <see cref="StickyNoteControl"/></param>                                                          
        /// <param name="captionFontStretch">captionFontStretch value</param>                                                                            
        /// <returns>current stickyNoteControl</returns>                                                                                    
        public static StickyNoteControl CaptionFontStretch(this StickyNoteControl stickyNoteControl, FontStretch captionFontStretch)
        {
            stickyNoteControl.CaptionFontStretch = captionFontStretch;
            return stickyNoteControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="StickyNoteControl.CaptionFontStyle"/> property of the current <see cref="StickyNoteControl"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" stickyNoteControl">current <see cref="StickyNoteControl"/></param>                                                          
        /// <param name="captionFontStyle">captionFontStyle value</param>                                                                            
        /// <returns>current stickyNoteControl</returns>                                                                                    
        public static StickyNoteControl CaptionFontStyle(this StickyNoteControl stickyNoteControl, FontStyle captionFontStyle)
        {
            stickyNoteControl.CaptionFontStyle = captionFontStyle;
            return stickyNoteControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="StickyNoteControl.CaptionFontWeight"/> property of the current <see cref="StickyNoteControl"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" stickyNoteControl">current <see cref="StickyNoteControl"/></param>                                                          
        /// <param name="captionFontWeight">captionFontWeight value</param>                                                                            
        /// <returns>current stickyNoteControl</returns>                                                                                    
        public static StickyNoteControl CaptionFontWeight(this StickyNoteControl stickyNoteControl, FontWeight captionFontWeight)
        {
            stickyNoteControl.CaptionFontWeight = captionFontWeight;
            return stickyNoteControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="StickyNoteControl.PenWidth"/> property of the current <see cref="StickyNoteControl"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" stickyNoteControl">current <see cref="StickyNoteControl"/></param>                                                          
        /// <param name="penWidth">penWidth value</param>                                                                            
        /// <returns>current stickyNoteControl</returns>                                                                                    
        public static StickyNoteControl PenWidth(this StickyNoteControl stickyNoteControl, Double penWidth)
        {
            stickyNoteControl.PenWidth = penWidth;
            return stickyNoteControl;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="AccessText"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class AccessTextFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.Text"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="text">text value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType Text<TType>(this TType accessText, String text) where TType : notnull, AccessText
        {
            accessText.Text = text;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.FontFamily"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="fontFamily">fontFamily value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType FontFamily<TType>(this TType accessText, FontFamily fontFamily) where TType : notnull, AccessText
        {
            accessText.FontFamily = fontFamily;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.FontStyle"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="fontStyle">fontStyle value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType FontStyle<TType>(this TType accessText, FontStyle fontStyle) where TType : notnull, AccessText
        {
            accessText.FontStyle = fontStyle;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.FontWeight"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="fontWeight">fontWeight value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType FontWeight<TType>(this TType accessText, FontWeight fontWeight) where TType : notnull, AccessText
        {
            accessText.FontWeight = fontWeight;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.FontStretch"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="fontStretch">fontStretch value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType FontStretch<TType>(this TType accessText, FontStretch fontStretch) where TType : notnull, AccessText
        {
            accessText.FontStretch = fontStretch;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.FontSize"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="fontSize">fontSize value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType FontSize<TType>(this TType accessText, Double fontSize) where TType : notnull, AccessText
        {
            accessText.FontSize = fontSize;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.Foreground"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="foreground">foreground value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType Foreground<TType>(this TType accessText, Brush foreground) where TType : notnull, AccessText
        {
            accessText.Foreground = foreground;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.Background"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="background">background value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType Background<TType>(this TType accessText, Brush background) where TType : notnull, AccessText
        {
            accessText.Background = background;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.TextDecorations"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="textDecorations">textDecorations value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType TextDecorations<TType>(this TType accessText, TextDecorationCollection textDecorations) where TType : notnull, AccessText
        {
            accessText.TextDecorations = textDecorations;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.TextEffects"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="textEffects">textEffects value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType TextEffects<TType>(this TType accessText, TextEffectCollection textEffects) where TType : notnull, AccessText
        {
            accessText.TextEffects = textEffects;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.LineHeight"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="lineHeight">lineHeight value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType LineHeight<TType>(this TType accessText, Double lineHeight) where TType : notnull, AccessText
        {
            accessText.LineHeight = lineHeight;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.LineStackingStrategy"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="lineStackingStrategy">lineStackingStrategy value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType LineStackingStrategy<TType>(this TType accessText, LineStackingStrategy lineStackingStrategy) where TType : notnull, AccessText
        {
            accessText.LineStackingStrategy = lineStackingStrategy;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.TextAlignment"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="textAlignment">textAlignment value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType TextAlignment<TType>(this TType accessText, TextAlignment textAlignment) where TType : notnull, AccessText
        {
            accessText.TextAlignment = textAlignment;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.TextTrimming"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="textTrimming">textTrimming value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType TextTrimming<TType>(this TType accessText, TextTrimming textTrimming) where TType : notnull, AccessText
        {
            accessText.TextTrimming = textTrimming;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.TextWrapping"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="textWrapping">textWrapping value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType TextWrapping<TType>(this TType accessText, TextWrapping textWrapping) where TType : notnull, AccessText
        {
            accessText.TextWrapping = textWrapping;
            return accessText;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AccessText.BaselineOffset"/> property of the current <see cref="AccessText"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AccessText</typeparam>                                                                       
        /// <param name=" accessText">current <see cref="AccessText"/></param>                                                          
        /// <param name="baselineOffset">baselineOffset value</param>                                                                            
        /// <returns>current accessText</returns>                                                                                    
        public static TType BaselineOffset<TType>(this TType accessText, Double baselineOffset) where TType : notnull, AccessText
        {
            accessText.BaselineOffset = baselineOffset;
            return accessText;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="AdornedElementPlaceholder"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class AdornedElementPlaceholderFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="AdornedElementPlaceholder.Child"/> property of the current <see cref="AdornedElementPlaceholder"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">AdornedElementPlaceholder</typeparam>                                                                       
        /// <param name=" adornedElementPlaceholder">current <see cref="AdornedElementPlaceholder"/></param>                                                          
        /// <param name="child">child value</param>                                                                            
        /// <returns>current adornedElementPlaceholder</returns>                                                                                    
        public static TType Child<TType>(this TType adornedElementPlaceholder, UIElement child) where TType : notnull, AdornedElementPlaceholder
        {
            adornedElementPlaceholder.Child = child;
            return adornedElementPlaceholder;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Border"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BorderFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Border.BorderThickness"/> property of the current <see cref="Border"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Border</typeparam>                                                                       
        /// <param name=" border">current <see cref="Border"/></param>                                                          
        /// <param name="borderThickness">borderThickness value</param>                                                                            
        /// <returns>current border</returns>                                                                                    
        public static TType BorderThickness<TType>(this TType border, Thickness borderThickness) where TType : notnull, Border
        {
            border.BorderThickness = borderThickness;
            return border;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Border.Padding"/> property of the current <see cref="Border"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Border</typeparam>                                                                       
        /// <param name=" border">current <see cref="Border"/></param>                                                          
        /// <param name="padding">padding value</param>                                                                            
        /// <returns>current border</returns>                                                                                    
        public static TType Padding<TType>(this TType border, Thickness padding) where TType : notnull, Border
        {
            border.Padding = padding;
            return border;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Border.CornerRadius"/> property of the current <see cref="Border"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Border</typeparam>                                                                       
        /// <param name=" border">current <see cref="Border"/></param>                                                          
        /// <param name="cornerRadius">cornerRadius value</param>                                                                            
        /// <returns>current border</returns>                                                                                    
        public static TType CornerRadius<TType>(this TType border, CornerRadius cornerRadius) where TType : notnull, Border
        {
            border.CornerRadius = cornerRadius;
            return border;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Border.BorderBrush"/> property of the current <see cref="Border"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Border</typeparam>                                                                       
        /// <param name=" border">current <see cref="Border"/></param>                                                          
        /// <param name="borderBrush">borderBrush value</param>                                                                            
        /// <returns>current border</returns>                                                                                    
        public static TType BorderBrush<TType>(this TType border, Brush borderBrush) where TType : notnull, Border
        {
            border.BorderBrush = borderBrush;
            return border;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Border.Background"/> property of the current <see cref="Border"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Border</typeparam>                                                                       
        /// <param name=" border">current <see cref="Border"/></param>                                                          
        /// <param name="background">background value</param>                                                                            
        /// <returns>current border</returns>                                                                                    
        public static TType Background<TType>(this TType border, Brush background) where TType : notnull, Border
        {
            border.Background = background;
            return border;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Button"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ButtonFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Button.IsDefault"/> property of the current <see cref="Button"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Button</typeparam>                                                                       
        /// <param name=" button">current <see cref="Button"/></param>                                                          
        /// <param name="isDefault">isDefault value</param>                                                                            
        /// <returns>current button</returns>                                                                                    
        public static TType IsDefault<TType>(this TType button, Boolean isDefault) where TType : notnull, Button
        {
            button.IsDefault = isDefault;
            return button;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Button.IsCancel"/> property of the current <see cref="Button"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Button</typeparam>                                                                       
        /// <param name=" button">current <see cref="Button"/></param>                                                          
        /// <param name="isCancel">isCancel value</param>                                                                            
        /// <returns>current button</returns>                                                                                    
        public static TType IsCancel<TType>(this TType button, Boolean isCancel) where TType : notnull, Button
        {
            button.IsCancel = isCancel;
            return button;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Calendar"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class CalendarFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Calendar.CalendarButtonStyle"/> property of the current <see cref="Calendar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Calendar</typeparam>                                                                       
        /// <param name=" calendar">current <see cref="Calendar"/></param>                                                          
        /// <param name="calendarButtonStyle">calendarButtonStyle value</param>                                                                            
        /// <returns>current calendar</returns>                                                                                    
        public static TType CalendarButtonStyle<TType>(this TType calendar, Style calendarButtonStyle) where TType : notnull, Calendar
        {
            calendar.CalendarButtonStyle = calendarButtonStyle;
            return calendar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Calendar.CalendarDayButtonStyle"/> property of the current <see cref="Calendar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Calendar</typeparam>                                                                       
        /// <param name=" calendar">current <see cref="Calendar"/></param>                                                          
        /// <param name="calendarDayButtonStyle">calendarDayButtonStyle value</param>                                                                            
        /// <returns>current calendar</returns>                                                                                    
        public static TType CalendarDayButtonStyle<TType>(this TType calendar, Style calendarDayButtonStyle) where TType : notnull, Calendar
        {
            calendar.CalendarDayButtonStyle = calendarDayButtonStyle;
            return calendar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Calendar.CalendarItemStyle"/> property of the current <see cref="Calendar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Calendar</typeparam>                                                                       
        /// <param name=" calendar">current <see cref="Calendar"/></param>                                                          
        /// <param name="calendarItemStyle">calendarItemStyle value</param>                                                                            
        /// <returns>current calendar</returns>                                                                                    
        public static TType CalendarItemStyle<TType>(this TType calendar, Style calendarItemStyle) where TType : notnull, Calendar
        {
            calendar.CalendarItemStyle = calendarItemStyle;
            return calendar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Calendar.DisplayDate"/> property of the current <see cref="Calendar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Calendar</typeparam>                                                                       
        /// <param name=" calendar">current <see cref="Calendar"/></param>                                                          
        /// <param name="displayDate">displayDate value</param>                                                                            
        /// <returns>current calendar</returns>                                                                                    
        public static TType DisplayDate<TType>(this TType calendar, DateTime displayDate) where TType : notnull, Calendar
        {
            calendar.DisplayDate = displayDate;
            return calendar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Calendar.DisplayDateEnd"/> property of the current <see cref="Calendar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Calendar</typeparam>                                                                       
        /// <param name=" calendar">current <see cref="Calendar"/></param>                                                          
        /// <param name="displayDateEnd">displayDateEnd value</param>                                                                            
        /// <returns>current calendar</returns>                                                                                    
        public static TType DisplayDateEnd<TType>(this TType calendar, Nullable<DateTime> displayDateEnd) where TType : notnull, Calendar
        {
            calendar.DisplayDateEnd = displayDateEnd;
            return calendar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Calendar.DisplayDateStart"/> property of the current <see cref="Calendar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Calendar</typeparam>                                                                       
        /// <param name=" calendar">current <see cref="Calendar"/></param>                                                          
        /// <param name="displayDateStart">displayDateStart value</param>                                                                            
        /// <returns>current calendar</returns>                                                                                    
        public static TType DisplayDateStart<TType>(this TType calendar, Nullable<DateTime> displayDateStart) where TType : notnull, Calendar
        {
            calendar.DisplayDateStart = displayDateStart;
            return calendar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Calendar.DisplayMode"/> property of the current <see cref="Calendar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Calendar</typeparam>                                                                       
        /// <param name=" calendar">current <see cref="Calendar"/></param>                                                          
        /// <param name="displayMode">displayMode value</param>                                                                            
        /// <returns>current calendar</returns>                                                                                    
        public static TType DisplayMode<TType>(this TType calendar, CalendarMode displayMode) where TType : notnull, Calendar
        {
            calendar.DisplayMode = displayMode;
            return calendar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Calendar.FirstDayOfWeek"/> property of the current <see cref="Calendar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Calendar</typeparam>                                                                       
        /// <param name=" calendar">current <see cref="Calendar"/></param>                                                          
        /// <param name="firstDayOfWeek">firstDayOfWeek value</param>                                                                            
        /// <returns>current calendar</returns>                                                                                    
        public static TType FirstDayOfWeek<TType>(this TType calendar, DayOfWeek firstDayOfWeek) where TType : notnull, Calendar
        {
            calendar.FirstDayOfWeek = firstDayOfWeek;
            return calendar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Calendar.IsTodayHighlighted"/> property of the current <see cref="Calendar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Calendar</typeparam>                                                                       
        /// <param name=" calendar">current <see cref="Calendar"/></param>                                                          
        /// <param name="isTodayHighlighted">isTodayHighlighted value</param>                                                                            
        /// <returns>current calendar</returns>                                                                                    
        public static TType IsTodayHighlighted<TType>(this TType calendar, Boolean isTodayHighlighted) where TType : notnull, Calendar
        {
            calendar.IsTodayHighlighted = isTodayHighlighted;
            return calendar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Calendar.SelectedDate"/> property of the current <see cref="Calendar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Calendar</typeparam>                                                                       
        /// <param name=" calendar">current <see cref="Calendar"/></param>                                                          
        /// <param name="selectedDate">selectedDate value</param>                                                                            
        /// <returns>current calendar</returns>                                                                                    
        public static TType SelectedDate<TType>(this TType calendar, Nullable<DateTime> selectedDate) where TType : notnull, Calendar
        {
            calendar.SelectedDate = selectedDate;
            return calendar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Calendar.SelectionMode"/> property of the current <see cref="Calendar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Calendar</typeparam>                                                                       
        /// <param name=" calendar">current <see cref="Calendar"/></param>                                                          
        /// <param name="selectionMode">selectionMode value</param>                                                                            
        /// <returns>current calendar</returns>                                                                                    
        public static TType SelectionMode<TType>(this TType calendar, CalendarSelectionMode selectionMode) where TType : notnull, Calendar
        {
            calendar.SelectionMode = selectionMode;
            return calendar;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ComboBox"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ComboBoxFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ComboBox.MaxDropDownHeight"/> property of the current <see cref="ComboBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ComboBox</typeparam>                                                                       
        /// <param name=" comboBox">current <see cref="ComboBox"/></param>                                                          
        /// <param name="maxDropDownHeight">maxDropDownHeight value</param>                                                                            
        /// <returns>current comboBox</returns>                                                                                    
        public static TType MaxDropDownHeight<TType>(this TType comboBox, Double maxDropDownHeight) where TType : notnull, ComboBox
        {
            comboBox.MaxDropDownHeight = maxDropDownHeight;
            return comboBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ComboBox.IsDropDownOpen"/> property of the current <see cref="ComboBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ComboBox</typeparam>                                                                       
        /// <param name=" comboBox">current <see cref="ComboBox"/></param>                                                          
        /// <param name="isDropDownOpen">isDropDownOpen value</param>                                                                            
        /// <returns>current comboBox</returns>                                                                                    
        public static TType IsDropDownOpen<TType>(this TType comboBox, Boolean isDropDownOpen) where TType : notnull, ComboBox
        {
            comboBox.IsDropDownOpen = isDropDownOpen;
            return comboBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ComboBox.ShouldPreserveUserEnteredPrefix"/> property of the current <see cref="ComboBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ComboBox</typeparam>                                                                       
        /// <param name=" comboBox">current <see cref="ComboBox"/></param>                                                          
        /// <param name="shouldPreserveUserEnteredPrefix">shouldPreserveUserEnteredPrefix value</param>                                                                            
        /// <returns>current comboBox</returns>                                                                                    
        public static TType ShouldPreserveUserEnteredPrefix<TType>(this TType comboBox, Boolean shouldPreserveUserEnteredPrefix) where TType : notnull, ComboBox
        {
            comboBox.ShouldPreserveUserEnteredPrefix = shouldPreserveUserEnteredPrefix;
            return comboBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ComboBox.IsEditable"/> property of the current <see cref="ComboBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ComboBox</typeparam>                                                                       
        /// <param name=" comboBox">current <see cref="ComboBox"/></param>                                                          
        /// <param name="isEditable">isEditable value</param>                                                                            
        /// <returns>current comboBox</returns>                                                                                    
        public static TType IsEditable<TType>(this TType comboBox, Boolean isEditable) where TType : notnull, ComboBox
        {
            comboBox.IsEditable = isEditable;
            return comboBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ComboBox.Text"/> property of the current <see cref="ComboBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ComboBox</typeparam>                                                                       
        /// <param name=" comboBox">current <see cref="ComboBox"/></param>                                                          
        /// <param name="text">text value</param>                                                                            
        /// <returns>current comboBox</returns>                                                                                    
        public static TType Text<TType>(this TType comboBox, String text) where TType : notnull, ComboBox
        {
            comboBox.Text = text;
            return comboBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ComboBox.IsReadOnly"/> property of the current <see cref="ComboBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ComboBox</typeparam>                                                                       
        /// <param name=" comboBox">current <see cref="ComboBox"/></param>                                                          
        /// <param name="isReadOnly">isReadOnly value</param>                                                                            
        /// <returns>current comboBox</returns>                                                                                    
        public static TType IsReadOnly<TType>(this TType comboBox, Boolean isReadOnly) where TType : notnull, ComboBox
        {
            comboBox.IsReadOnly = isReadOnly;
            return comboBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ComboBox.StaysOpenOnEdit"/> property of the current <see cref="ComboBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ComboBox</typeparam>                                                                       
        /// <param name=" comboBox">current <see cref="ComboBox"/></param>                                                          
        /// <param name="staysOpenOnEdit">staysOpenOnEdit value</param>                                                                            
        /// <returns>current comboBox</returns>                                                                                    
        public static TType StaysOpenOnEdit<TType>(this TType comboBox, Boolean staysOpenOnEdit) where TType : notnull, ComboBox
        {
            comboBox.StaysOpenOnEdit = staysOpenOnEdit;
            return comboBox;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ContentControl"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ContentControlFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ContentControl.Content"/> property of the current <see cref="ContentControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContentControl</typeparam>                                                                       
        /// <param name=" contentControl">current <see cref="ContentControl"/></param>                                                          
        /// <param name="content">content value</param>                                                                            
        /// <returns>current contentControl</returns>                                                                                    
        public static TType Content<TType>(this TType contentControl, Object content) where TType : notnull, ContentControl
        {
            contentControl.Content = content;
            return contentControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContentControl.ContentTemplate"/> property of the current <see cref="ContentControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContentControl</typeparam>                                                                       
        /// <param name=" contentControl">current <see cref="ContentControl"/></param>                                                          
        /// <param name="contentTemplate">contentTemplate value</param>                                                                            
        /// <returns>current contentControl</returns>                                                                                    
        public static TType ContentTemplate<TType>(this TType contentControl, DataTemplate contentTemplate) where TType : notnull, ContentControl
        {
            contentControl.ContentTemplate = contentTemplate;
            return contentControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContentControl.ContentTemplateSelector"/> property of the current <see cref="ContentControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContentControl</typeparam>                                                                       
        /// <param name=" contentControl">current <see cref="ContentControl"/></param>                                                          
        /// <param name="contentTemplateSelector">contentTemplateSelector value</param>                                                                            
        /// <returns>current contentControl</returns>                                                                                    
        public static TType ContentTemplateSelector<TType>(this TType contentControl, DataTemplateSelector contentTemplateSelector) where TType : notnull, ContentControl
        {
            contentControl.ContentTemplateSelector = contentTemplateSelector;
            return contentControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContentControl.ContentStringFormat"/> property of the current <see cref="ContentControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContentControl</typeparam>                                                                       
        /// <param name=" contentControl">current <see cref="ContentControl"/></param>                                                          
        /// <param name="contentStringFormat">contentStringFormat value</param>                                                                            
        /// <returns>current contentControl</returns>                                                                                    
        public static TType ContentStringFormat<TType>(this TType contentControl, String contentStringFormat) where TType : notnull, ContentControl
        {
            contentControl.ContentStringFormat = contentStringFormat;
            return contentControl;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ContentPresenter"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ContentPresenterFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ContentPresenter.RecognizesAccessKey"/> property of the current <see cref="ContentPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContentPresenter</typeparam>                                                                       
        /// <param name=" contentPresenter">current <see cref="ContentPresenter"/></param>                                                          
        /// <param name="recognizesAccessKey">recognizesAccessKey value</param>                                                                            
        /// <returns>current contentPresenter</returns>                                                                                    
        public static TType RecognizesAccessKey<TType>(this TType contentPresenter, Boolean recognizesAccessKey) where TType : notnull, ContentPresenter
        {
            contentPresenter.RecognizesAccessKey = recognizesAccessKey;
            return contentPresenter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContentPresenter.Content"/> property of the current <see cref="ContentPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContentPresenter</typeparam>                                                                       
        /// <param name=" contentPresenter">current <see cref="ContentPresenter"/></param>                                                          
        /// <param name="content">content value</param>                                                                            
        /// <returns>current contentPresenter</returns>                                                                                    
        public static TType Content<TType>(this TType contentPresenter, Object content) where TType : notnull, ContentPresenter
        {
            contentPresenter.Content = content;
            return contentPresenter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContentPresenter.ContentTemplate"/> property of the current <see cref="ContentPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContentPresenter</typeparam>                                                                       
        /// <param name=" contentPresenter">current <see cref="ContentPresenter"/></param>                                                          
        /// <param name="contentTemplate">contentTemplate value</param>                                                                            
        /// <returns>current contentPresenter</returns>                                                                                    
        public static TType ContentTemplate<TType>(this TType contentPresenter, DataTemplate contentTemplate) where TType : notnull, ContentPresenter
        {
            contentPresenter.ContentTemplate = contentTemplate;
            return contentPresenter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContentPresenter.ContentTemplateSelector"/> property of the current <see cref="ContentPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContentPresenter</typeparam>                                                                       
        /// <param name=" contentPresenter">current <see cref="ContentPresenter"/></param>                                                          
        /// <param name="contentTemplateSelector">contentTemplateSelector value</param>                                                                            
        /// <returns>current contentPresenter</returns>                                                                                    
        public static TType ContentTemplateSelector<TType>(this TType contentPresenter, DataTemplateSelector contentTemplateSelector) where TType : notnull, ContentPresenter
        {
            contentPresenter.ContentTemplateSelector = contentTemplateSelector;
            return contentPresenter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContentPresenter.ContentStringFormat"/> property of the current <see cref="ContentPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContentPresenter</typeparam>                                                                       
        /// <param name=" contentPresenter">current <see cref="ContentPresenter"/></param>                                                          
        /// <param name="contentStringFormat">contentStringFormat value</param>                                                                            
        /// <returns>current contentPresenter</returns>                                                                                    
        public static TType ContentStringFormat<TType>(this TType contentPresenter, String contentStringFormat) where TType : notnull, ContentPresenter
        {
            contentPresenter.ContentStringFormat = contentStringFormat;
            return contentPresenter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContentPresenter.ContentSource"/> property of the current <see cref="ContentPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContentPresenter</typeparam>                                                                       
        /// <param name=" contentPresenter">current <see cref="ContentPresenter"/></param>                                                          
        /// <param name="contentSource">contentSource value</param>                                                                            
        /// <returns>current contentPresenter</returns>                                                                                    
        public static TType ContentSource<TType>(this TType contentPresenter, String contentSource) where TType : notnull, ContentPresenter
        {
            contentPresenter.ContentSource = contentSource;
            return contentPresenter;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ContextMenu"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ContextMenuFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ContextMenu.HorizontalOffset"/> property of the current <see cref="ContextMenu"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContextMenu</typeparam>                                                                       
        /// <param name=" contextMenu">current <see cref="ContextMenu"/></param>                                                          
        /// <param name="horizontalOffset">horizontalOffset value</param>                                                                            
        /// <returns>current contextMenu</returns>                                                                                    
        public static TType HorizontalOffset<TType>(this TType contextMenu, Double horizontalOffset) where TType : notnull, ContextMenu
        {
            contextMenu.HorizontalOffset = horizontalOffset;
            return contextMenu;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContextMenu.VerticalOffset"/> property of the current <see cref="ContextMenu"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContextMenu</typeparam>                                                                       
        /// <param name=" contextMenu">current <see cref="ContextMenu"/></param>                                                          
        /// <param name="verticalOffset">verticalOffset value</param>                                                                            
        /// <returns>current contextMenu</returns>                                                                                    
        public static TType VerticalOffset<TType>(this TType contextMenu, Double verticalOffset) where TType : notnull, ContextMenu
        {
            contextMenu.VerticalOffset = verticalOffset;
            return contextMenu;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContextMenu.IsOpen"/> property of the current <see cref="ContextMenu"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContextMenu</typeparam>                                                                       
        /// <param name=" contextMenu">current <see cref="ContextMenu"/></param>                                                          
        /// <param name="isOpen">isOpen value</param>                                                                            
        /// <returns>current contextMenu</returns>                                                                                    
        public static TType IsOpen<TType>(this TType contextMenu, Boolean isOpen) where TType : notnull, ContextMenu
        {
            contextMenu.IsOpen = isOpen;
            return contextMenu;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContextMenu.PlacementTarget"/> property of the current <see cref="ContextMenu"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContextMenu</typeparam>                                                                       
        /// <param name=" contextMenu">current <see cref="ContextMenu"/></param>                                                          
        /// <param name="placementTarget">placementTarget value</param>                                                                            
        /// <returns>current contextMenu</returns>                                                                                    
        public static TType PlacementTarget<TType>(this TType contextMenu, UIElement placementTarget) where TType : notnull, ContextMenu
        {
            contextMenu.PlacementTarget = placementTarget;
            return contextMenu;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContextMenu.PlacementRectangle"/> property of the current <see cref="ContextMenu"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContextMenu</typeparam>                                                                       
        /// <param name=" contextMenu">current <see cref="ContextMenu"/></param>                                                          
        /// <param name="placementRectangle">placementRectangle value</param>                                                                            
        /// <returns>current contextMenu</returns>                                                                                    
        public static TType PlacementRectangle<TType>(this TType contextMenu, Rect placementRectangle) where TType : notnull, ContextMenu
        {
            contextMenu.PlacementRectangle = placementRectangle;
            return contextMenu;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContextMenu.Placement"/> property of the current <see cref="ContextMenu"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContextMenu</typeparam>                                                                       
        /// <param name=" contextMenu">current <see cref="ContextMenu"/></param>                                                          
        /// <param name="placement">placement value</param>                                                                            
        /// <returns>current contextMenu</returns>                                                                                    
        public static TType Placement<TType>(this TType contextMenu, PlacementMode placement) where TType : notnull, ContextMenu
        {
            contextMenu.Placement = placement;
            return contextMenu;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContextMenu.HasDropShadow"/> property of the current <see cref="ContextMenu"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContextMenu</typeparam>                                                                       
        /// <param name=" contextMenu">current <see cref="ContextMenu"/></param>                                                          
        /// <param name="hasDropShadow">hasDropShadow value</param>                                                                            
        /// <returns>current contextMenu</returns>                                                                                    
        public static TType HasDropShadow<TType>(this TType contextMenu, Boolean hasDropShadow) where TType : notnull, ContextMenu
        {
            contextMenu.HasDropShadow = hasDropShadow;
            return contextMenu;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContextMenu.CustomPopupPlacementCallback"/> property of the current <see cref="ContextMenu"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContextMenu</typeparam>                                                                       
        /// <param name=" contextMenu">current <see cref="ContextMenu"/></param>                                                          
        /// <param name="customPopupPlacementCallback">customPopupPlacementCallback value</param>                                                                            
        /// <returns>current contextMenu</returns>                                                                                    
        public static TType CustomPopupPlacementCallback<TType>(this TType contextMenu, CustomPopupPlacementCallback customPopupPlacementCallback) where TType : notnull, ContextMenu
        {
            contextMenu.CustomPopupPlacementCallback = customPopupPlacementCallback;
            return contextMenu;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContextMenu.StaysOpen"/> property of the current <see cref="ContextMenu"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContextMenu</typeparam>                                                                       
        /// <param name=" contextMenu">current <see cref="ContextMenu"/></param>                                                          
        /// <param name="staysOpen">staysOpen value</param>                                                                            
        /// <returns>current contextMenu</returns>                                                                                    
        public static TType StaysOpen<TType>(this TType contextMenu, Boolean staysOpen) where TType : notnull, ContextMenu
        {
            contextMenu.StaysOpen = staysOpen;
            return contextMenu;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Control"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ControlFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.BorderBrush"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="borderBrush">borderBrush value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType BorderBrush<TType>(this TType control, Brush borderBrush) where TType : notnull, Control
        {
            control.BorderBrush = borderBrush;
            return control;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.BorderThickness"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="borderThickness">borderThickness value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType BorderThickness<TType>(this TType control, Thickness borderThickness) where TType : notnull, Control
        {
            control.BorderThickness = borderThickness;
            return control;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.Background"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="background">background value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType Background<TType>(this TType control, Brush background) where TType : notnull, Control
        {
            control.Background = background;
            return control;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.Foreground"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="foreground">foreground value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType Foreground<TType>(this TType control, Brush foreground) where TType : notnull, Control
        {
            control.Foreground = foreground;
            return control;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.FontFamily"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="fontFamily">fontFamily value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType FontFamily<TType>(this TType control, FontFamily fontFamily) where TType : notnull, Control
        {
            control.FontFamily = fontFamily;
            return control;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.FontSize"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="fontSize">fontSize value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType FontSize<TType>(this TType control, Double fontSize) where TType : notnull, Control
        {
            control.FontSize = fontSize;
            return control;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.FontStretch"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="fontStretch">fontStretch value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType FontStretch<TType>(this TType control, FontStretch fontStretch) where TType : notnull, Control
        {
            control.FontStretch = fontStretch;
            return control;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.FontStyle"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="fontStyle">fontStyle value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType FontStyle<TType>(this TType control, FontStyle fontStyle) where TType : notnull, Control
        {
            control.FontStyle = fontStyle;
            return control;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.FontWeight"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="fontWeight">fontWeight value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType FontWeight<TType>(this TType control, FontWeight fontWeight) where TType : notnull, Control
        {
            control.FontWeight = fontWeight;
            return control;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.HorizontalContentAlignment"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="horizontalContentAlignment">horizontalContentAlignment value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType HorizontalContentAlignment<TType>(this TType control, HorizontalAlignment horizontalContentAlignment) where TType : notnull, Control
        {
            control.HorizontalContentAlignment = horizontalContentAlignment;
            return control;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.VerticalContentAlignment"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="verticalContentAlignment">verticalContentAlignment value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType VerticalContentAlignment<TType>(this TType control, VerticalAlignment verticalContentAlignment) where TType : notnull, Control
        {
            control.VerticalContentAlignment = verticalContentAlignment;
            return control;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.TabIndex"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="tabIndex">tabIndex value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType TabIndex<TType>(this TType control, Int32 tabIndex) where TType : notnull, Control
        {
            control.TabIndex = tabIndex;
            return control;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.IsTabStop"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="isTabStop">isTabStop value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType IsTabStop<TType>(this TType control, Boolean isTabStop) where TType : notnull, Control
        {
            control.IsTabStop = isTabStop;
            return control;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.Padding"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="padding">padding value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType Padding<TType>(this TType control, Thickness padding) where TType : notnull, Control
        {
            control.Padding = padding;
            return control;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Control.Template"/> property of the current <see cref="Control"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Control</typeparam>                                                                       
        /// <param name=" control">current <see cref="Control"/></param>                                                          
        /// <param name="template">template value</param>                                                                            
        /// <returns>current control</returns>                                                                                    
        public static TType Template<TType>(this TType control, ControlTemplate template) where TType : notnull, Control
        {
            control.Template = template;
            return control;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DataGrid"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DataGridFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.CanUserResizeColumns"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="canUserResizeColumns">canUserResizeColumns value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType CanUserResizeColumns<TType>(this TType dataGrid, Boolean canUserResizeColumns) where TType : notnull, DataGrid
        {
            dataGrid.CanUserResizeColumns = canUserResizeColumns;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.ColumnWidth"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="columnWidth">columnWidth value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType ColumnWidth<TType>(this TType dataGrid, DataGridLength columnWidth) where TType : notnull, DataGrid
        {
            dataGrid.ColumnWidth = columnWidth;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.MinColumnWidth"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="minColumnWidth">minColumnWidth value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType MinColumnWidth<TType>(this TType dataGrid, Double minColumnWidth) where TType : notnull, DataGrid
        {
            dataGrid.MinColumnWidth = minColumnWidth;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.MaxColumnWidth"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="maxColumnWidth">maxColumnWidth value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType MaxColumnWidth<TType>(this TType dataGrid, Double maxColumnWidth) where TType : notnull, DataGrid
        {
            dataGrid.MaxColumnWidth = maxColumnWidth;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.GridLinesVisibility"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="gridLinesVisibility">gridLinesVisibility value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType GridLinesVisibility<TType>(this TType dataGrid, DataGridGridLinesVisibility gridLinesVisibility) where TType : notnull, DataGrid
        {
            dataGrid.GridLinesVisibility = gridLinesVisibility;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.HorizontalGridLinesBrush"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="horizontalGridLinesBrush">horizontalGridLinesBrush value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType HorizontalGridLinesBrush<TType>(this TType dataGrid, Brush horizontalGridLinesBrush) where TType : notnull, DataGrid
        {
            dataGrid.HorizontalGridLinesBrush = horizontalGridLinesBrush;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.VerticalGridLinesBrush"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="verticalGridLinesBrush">verticalGridLinesBrush value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType VerticalGridLinesBrush<TType>(this TType dataGrid, Brush verticalGridLinesBrush) where TType : notnull, DataGrid
        {
            dataGrid.VerticalGridLinesBrush = verticalGridLinesBrush;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.RowStyle"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="rowStyle">rowStyle value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType RowStyle<TType>(this TType dataGrid, Style rowStyle) where TType : notnull, DataGrid
        {
            dataGrid.RowStyle = rowStyle;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.RowValidationErrorTemplate"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="rowValidationErrorTemplate">rowValidationErrorTemplate value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType RowValidationErrorTemplate<TType>(this TType dataGrid, ControlTemplate rowValidationErrorTemplate) where TType : notnull, DataGrid
        {
            dataGrid.RowValidationErrorTemplate = rowValidationErrorTemplate;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.RowStyleSelector"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="rowStyleSelector">rowStyleSelector value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType RowStyleSelector<TType>(this TType dataGrid, StyleSelector rowStyleSelector) where TType : notnull, DataGrid
        {
            dataGrid.RowStyleSelector = rowStyleSelector;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.RowBackground"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="rowBackground">rowBackground value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType RowBackground<TType>(this TType dataGrid, Brush rowBackground) where TType : notnull, DataGrid
        {
            dataGrid.RowBackground = rowBackground;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.AlternatingRowBackground"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="alternatingRowBackground">alternatingRowBackground value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType AlternatingRowBackground<TType>(this TType dataGrid, Brush alternatingRowBackground) where TType : notnull, DataGrid
        {
            dataGrid.AlternatingRowBackground = alternatingRowBackground;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.RowHeight"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="rowHeight">rowHeight value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType RowHeight<TType>(this TType dataGrid, Double rowHeight) where TType : notnull, DataGrid
        {
            dataGrid.RowHeight = rowHeight;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.MinRowHeight"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="minRowHeight">minRowHeight value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType MinRowHeight<TType>(this TType dataGrid, Double minRowHeight) where TType : notnull, DataGrid
        {
            dataGrid.MinRowHeight = minRowHeight;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.RowHeaderWidth"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="rowHeaderWidth">rowHeaderWidth value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType RowHeaderWidth<TType>(this TType dataGrid, Double rowHeaderWidth) where TType : notnull, DataGrid
        {
            dataGrid.RowHeaderWidth = rowHeaderWidth;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.ColumnHeaderHeight"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="columnHeaderHeight">columnHeaderHeight value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType ColumnHeaderHeight<TType>(this TType dataGrid, Double columnHeaderHeight) where TType : notnull, DataGrid
        {
            dataGrid.ColumnHeaderHeight = columnHeaderHeight;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.HeadersVisibility"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="headersVisibility">headersVisibility value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType HeadersVisibility<TType>(this TType dataGrid, DataGridHeadersVisibility headersVisibility) where TType : notnull, DataGrid
        {
            dataGrid.HeadersVisibility = headersVisibility;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.CellStyle"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="cellStyle">cellStyle value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType CellStyle<TType>(this TType dataGrid, Style cellStyle) where TType : notnull, DataGrid
        {
            dataGrid.CellStyle = cellStyle;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.ColumnHeaderStyle"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="columnHeaderStyle">columnHeaderStyle value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType ColumnHeaderStyle<TType>(this TType dataGrid, Style columnHeaderStyle) where TType : notnull, DataGrid
        {
            dataGrid.ColumnHeaderStyle = columnHeaderStyle;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.RowHeaderStyle"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="rowHeaderStyle">rowHeaderStyle value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType RowHeaderStyle<TType>(this TType dataGrid, Style rowHeaderStyle) where TType : notnull, DataGrid
        {
            dataGrid.RowHeaderStyle = rowHeaderStyle;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.RowHeaderTemplate"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="rowHeaderTemplate">rowHeaderTemplate value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType RowHeaderTemplate<TType>(this TType dataGrid, DataTemplate rowHeaderTemplate) where TType : notnull, DataGrid
        {
            dataGrid.RowHeaderTemplate = rowHeaderTemplate;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.RowHeaderTemplateSelector"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="rowHeaderTemplateSelector">rowHeaderTemplateSelector value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType RowHeaderTemplateSelector<TType>(this TType dataGrid, DataTemplateSelector rowHeaderTemplateSelector) where TType : notnull, DataGrid
        {
            dataGrid.RowHeaderTemplateSelector = rowHeaderTemplateSelector;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.HorizontalScrollBarVisibility"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="horizontalScrollBarVisibility">horizontalScrollBarVisibility value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType HorizontalScrollBarVisibility<TType>(this TType dataGrid, ScrollBarVisibility horizontalScrollBarVisibility) where TType : notnull, DataGrid
        {
            dataGrid.HorizontalScrollBarVisibility = horizontalScrollBarVisibility;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.VerticalScrollBarVisibility"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="verticalScrollBarVisibility">verticalScrollBarVisibility value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType VerticalScrollBarVisibility<TType>(this TType dataGrid, ScrollBarVisibility verticalScrollBarVisibility) where TType : notnull, DataGrid
        {
            dataGrid.VerticalScrollBarVisibility = verticalScrollBarVisibility;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.IsReadOnly"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="isReadOnly">isReadOnly value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType IsReadOnly<TType>(this TType dataGrid, Boolean isReadOnly) where TType : notnull, DataGrid
        {
            dataGrid.IsReadOnly = isReadOnly;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.CurrentItem"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="currentItem">currentItem value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType CurrentItem<TType>(this TType dataGrid, Object currentItem) where TType : notnull, DataGrid
        {
            dataGrid.CurrentItem = currentItem;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.CurrentColumn"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="currentColumn">currentColumn value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType CurrentColumn<TType>(this TType dataGrid, DataGridColumn currentColumn) where TType : notnull, DataGrid
        {
            dataGrid.CurrentColumn = currentColumn;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.CurrentCell"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="currentCell">currentCell value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType CurrentCell<TType>(this TType dataGrid, DataGridCellInfo currentCell) where TType : notnull, DataGrid
        {
            dataGrid.CurrentCell = currentCell;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.CanUserAddRows"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="canUserAddRows">canUserAddRows value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType CanUserAddRows<TType>(this TType dataGrid, Boolean canUserAddRows) where TType : notnull, DataGrid
        {
            dataGrid.CanUserAddRows = canUserAddRows;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.CanUserDeleteRows"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="canUserDeleteRows">canUserDeleteRows value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType CanUserDeleteRows<TType>(this TType dataGrid, Boolean canUserDeleteRows) where TType : notnull, DataGrid
        {
            dataGrid.CanUserDeleteRows = canUserDeleteRows;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.RowDetailsVisibilityMode"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="rowDetailsVisibilityMode">rowDetailsVisibilityMode value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType RowDetailsVisibilityMode<TType>(this TType dataGrid, DataGridRowDetailsVisibilityMode rowDetailsVisibilityMode) where TType : notnull, DataGrid
        {
            dataGrid.RowDetailsVisibilityMode = rowDetailsVisibilityMode;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.AreRowDetailsFrozen"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="areRowDetailsFrozen">areRowDetailsFrozen value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType AreRowDetailsFrozen<TType>(this TType dataGrid, Boolean areRowDetailsFrozen) where TType : notnull, DataGrid
        {
            dataGrid.AreRowDetailsFrozen = areRowDetailsFrozen;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.RowDetailsTemplate"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="rowDetailsTemplate">rowDetailsTemplate value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType RowDetailsTemplate<TType>(this TType dataGrid, DataTemplate rowDetailsTemplate) where TType : notnull, DataGrid
        {
            dataGrid.RowDetailsTemplate = rowDetailsTemplate;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.RowDetailsTemplateSelector"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="rowDetailsTemplateSelector">rowDetailsTemplateSelector value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType RowDetailsTemplateSelector<TType>(this TType dataGrid, DataTemplateSelector rowDetailsTemplateSelector) where TType : notnull, DataGrid
        {
            dataGrid.RowDetailsTemplateSelector = rowDetailsTemplateSelector;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.CanUserResizeRows"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="canUserResizeRows">canUserResizeRows value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType CanUserResizeRows<TType>(this TType dataGrid, Boolean canUserResizeRows) where TType : notnull, DataGrid
        {
            dataGrid.CanUserResizeRows = canUserResizeRows;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.SelectionMode"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="selectionMode">selectionMode value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType SelectionMode<TType>(this TType dataGrid, DataGridSelectionMode selectionMode) where TType : notnull, DataGrid
        {
            dataGrid.SelectionMode = selectionMode;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.SelectionUnit"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="selectionUnit">selectionUnit value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType SelectionUnit<TType>(this TType dataGrid, DataGridSelectionUnit selectionUnit) where TType : notnull, DataGrid
        {
            dataGrid.SelectionUnit = selectionUnit;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.CanUserSortColumns"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="canUserSortColumns">canUserSortColumns value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType CanUserSortColumns<TType>(this TType dataGrid, Boolean canUserSortColumns) where TType : notnull, DataGrid
        {
            dataGrid.CanUserSortColumns = canUserSortColumns;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.AutoGenerateColumns"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="autoGenerateColumns">autoGenerateColumns value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType AutoGenerateColumns<TType>(this TType dataGrid, Boolean autoGenerateColumns) where TType : notnull, DataGrid
        {
            dataGrid.AutoGenerateColumns = autoGenerateColumns;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.FrozenColumnCount"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="frozenColumnCount">frozenColumnCount value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType FrozenColumnCount<TType>(this TType dataGrid, Int32 frozenColumnCount) where TType : notnull, DataGrid
        {
            dataGrid.FrozenColumnCount = frozenColumnCount;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.EnableRowVirtualization"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="enableRowVirtualization">enableRowVirtualization value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType EnableRowVirtualization<TType>(this TType dataGrid, Boolean enableRowVirtualization) where TType : notnull, DataGrid
        {
            dataGrid.EnableRowVirtualization = enableRowVirtualization;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.EnableColumnVirtualization"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="enableColumnVirtualization">enableColumnVirtualization value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType EnableColumnVirtualization<TType>(this TType dataGrid, Boolean enableColumnVirtualization) where TType : notnull, DataGrid
        {
            dataGrid.EnableColumnVirtualization = enableColumnVirtualization;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.CanUserReorderColumns"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="canUserReorderColumns">canUserReorderColumns value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType CanUserReorderColumns<TType>(this TType dataGrid, Boolean canUserReorderColumns) where TType : notnull, DataGrid
        {
            dataGrid.CanUserReorderColumns = canUserReorderColumns;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.DragIndicatorStyle"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="dragIndicatorStyle">dragIndicatorStyle value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType DragIndicatorStyle<TType>(this TType dataGrid, Style dragIndicatorStyle) where TType : notnull, DataGrid
        {
            dataGrid.DragIndicatorStyle = dragIndicatorStyle;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.DropLocationIndicatorStyle"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="dropLocationIndicatorStyle">dropLocationIndicatorStyle value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType DropLocationIndicatorStyle<TType>(this TType dataGrid, Style dropLocationIndicatorStyle) where TType : notnull, DataGrid
        {
            dataGrid.DropLocationIndicatorStyle = dropLocationIndicatorStyle;
            return dataGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGrid.ClipboardCopyMode"/> property of the current <see cref="DataGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGrid</typeparam>                                                                       
        /// <param name=" dataGrid">current <see cref="DataGrid"/></param>                                                          
        /// <param name="clipboardCopyMode">clipboardCopyMode value</param>                                                                            
        /// <returns>current dataGrid</returns>                                                                                    
        public static TType ClipboardCopyMode<TType>(this TType dataGrid, DataGridClipboardCopyMode clipboardCopyMode) where TType : notnull, DataGrid
        {
            dataGrid.ClipboardCopyMode = clipboardCopyMode;
            return dataGrid;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DataGridBoundColumn"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DataGridBoundColumnFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridBoundColumn.Binding"/> property of the current <see cref="DataGridBoundColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridBoundColumn</typeparam>                                                                       
        /// <param name=" dataGridBoundColumn">current <see cref="DataGridBoundColumn"/></param>                                                          
        /// <param name="binding">binding value</param>                                                                            
        /// <returns>current dataGridBoundColumn</returns>                                                                                    
        public static TType Binding<TType>(this TType dataGridBoundColumn, BindingBase binding) where TType : notnull, DataGridBoundColumn
        {
            dataGridBoundColumn.Binding = binding;
            return dataGridBoundColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridBoundColumn.ElementStyle"/> property of the current <see cref="DataGridBoundColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridBoundColumn</typeparam>                                                                       
        /// <param name=" dataGridBoundColumn">current <see cref="DataGridBoundColumn"/></param>                                                          
        /// <param name="elementStyle">elementStyle value</param>                                                                            
        /// <returns>current dataGridBoundColumn</returns>                                                                                    
        public static TType ElementStyle<TType>(this TType dataGridBoundColumn, Style elementStyle) where TType : notnull, DataGridBoundColumn
        {
            dataGridBoundColumn.ElementStyle = elementStyle;
            return dataGridBoundColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridBoundColumn.EditingElementStyle"/> property of the current <see cref="DataGridBoundColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridBoundColumn</typeparam>                                                                       
        /// <param name=" dataGridBoundColumn">current <see cref="DataGridBoundColumn"/></param>                                                          
        /// <param name="editingElementStyle">editingElementStyle value</param>                                                                            
        /// <returns>current dataGridBoundColumn</returns>                                                                                    
        public static TType EditingElementStyle<TType>(this TType dataGridBoundColumn, Style editingElementStyle) where TType : notnull, DataGridBoundColumn
        {
            dataGridBoundColumn.EditingElementStyle = editingElementStyle;
            return dataGridBoundColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridBoundColumn.ClipboardContentBinding"/> property of the current <see cref="DataGridBoundColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridBoundColumn</typeparam>                                                                       
        /// <param name=" dataGridBoundColumn">current <see cref="DataGridBoundColumn"/></param>                                                          
        /// <param name="clipboardContentBinding">clipboardContentBinding value</param>                                                                            
        /// <returns>current dataGridBoundColumn</returns>                                                                                    
        public static TType ClipboardContentBinding<TType>(this TType dataGridBoundColumn, BindingBase clipboardContentBinding) where TType : notnull, DataGridBoundColumn
        {
            dataGridBoundColumn.ClipboardContentBinding = clipboardContentBinding;
            return dataGridBoundColumn;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DataGridCell"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DataGridCellFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridCell.IsEditing"/> property of the current <see cref="DataGridCell"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridCell</typeparam>                                                                       
        /// <param name=" dataGridCell">current <see cref="DataGridCell"/></param>                                                          
        /// <param name="isEditing">isEditing value</param>                                                                            
        /// <returns>current dataGridCell</returns>                                                                                    
        public static TType IsEditing<TType>(this TType dataGridCell, Boolean isEditing) where TType : notnull, DataGridCell
        {
            dataGridCell.IsEditing = isEditing;
            return dataGridCell;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridCell.IsSelected"/> property of the current <see cref="DataGridCell"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridCell</typeparam>                                                                       
        /// <param name=" dataGridCell">current <see cref="DataGridCell"/></param>                                                          
        /// <param name="isSelected">isSelected value</param>                                                                            
        /// <returns>current dataGridCell</returns>                                                                                    
        public static TType IsSelected<TType>(this TType dataGridCell, Boolean isSelected) where TType : notnull, DataGridCell
        {
            dataGridCell.IsSelected = isSelected;
            return dataGridCell;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DataGridCheckBoxColumn"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DataGridCheckBoxColumnFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridCheckBoxColumn.IsThreeState"/> property of the current <see cref="DataGridCheckBoxColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridCheckBoxColumn</typeparam>                                                                       
        /// <param name=" dataGridCheckBoxColumn">current <see cref="DataGridCheckBoxColumn"/></param>                                                          
        /// <param name="isThreeState">isThreeState value</param>                                                                            
        /// <returns>current dataGridCheckBoxColumn</returns>                                                                                    
        public static TType IsThreeState<TType>(this TType dataGridCheckBoxColumn, Boolean isThreeState) where TType : notnull, DataGridCheckBoxColumn
        {
            dataGridCheckBoxColumn.IsThreeState = isThreeState;
            return dataGridCheckBoxColumn;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DataGridColumn"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DataGridColumnFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.Header"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="header">header value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType Header<TType>(this TType dataGridColumn, Object header) where TType : notnull, DataGridColumn
        {
            dataGridColumn.Header = header;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.HeaderStyle"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="headerStyle">headerStyle value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType HeaderStyle<TType>(this TType dataGridColumn, Style headerStyle) where TType : notnull, DataGridColumn
        {
            dataGridColumn.HeaderStyle = headerStyle;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.HeaderStringFormat"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="headerStringFormat">headerStringFormat value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType HeaderStringFormat<TType>(this TType dataGridColumn, String headerStringFormat) where TType : notnull, DataGridColumn
        {
            dataGridColumn.HeaderStringFormat = headerStringFormat;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.HeaderTemplate"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="headerTemplate">headerTemplate value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType HeaderTemplate<TType>(this TType dataGridColumn, DataTemplate headerTemplate) where TType : notnull, DataGridColumn
        {
            dataGridColumn.HeaderTemplate = headerTemplate;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.HeaderTemplateSelector"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="headerTemplateSelector">headerTemplateSelector value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType HeaderTemplateSelector<TType>(this TType dataGridColumn, DataTemplateSelector headerTemplateSelector) where TType : notnull, DataGridColumn
        {
            dataGridColumn.HeaderTemplateSelector = headerTemplateSelector;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.CellStyle"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="cellStyle">cellStyle value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType CellStyle<TType>(this TType dataGridColumn, Style cellStyle) where TType : notnull, DataGridColumn
        {
            dataGridColumn.CellStyle = cellStyle;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.IsReadOnly"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="isReadOnly">isReadOnly value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType IsReadOnly<TType>(this TType dataGridColumn, Boolean isReadOnly) where TType : notnull, DataGridColumn
        {
            dataGridColumn.IsReadOnly = isReadOnly;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.Width"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="width">width value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType Width<TType>(this TType dataGridColumn, DataGridLength width) where TType : notnull, DataGridColumn
        {
            dataGridColumn.Width = width;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.MinWidth"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="minWidth">minWidth value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType MinWidth<TType>(this TType dataGridColumn, Double minWidth) where TType : notnull, DataGridColumn
        {
            dataGridColumn.MinWidth = minWidth;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.MaxWidth"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="maxWidth">maxWidth value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType MaxWidth<TType>(this TType dataGridColumn, Double maxWidth) where TType : notnull, DataGridColumn
        {
            dataGridColumn.MaxWidth = maxWidth;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.DisplayIndex"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="displayIndex">displayIndex value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType DisplayIndex<TType>(this TType dataGridColumn, Int32 displayIndex) where TType : notnull, DataGridColumn
        {
            dataGridColumn.DisplayIndex = displayIndex;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.SortMemberPath"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="sortMemberPath">sortMemberPath value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType SortMemberPath<TType>(this TType dataGridColumn, String sortMemberPath) where TType : notnull, DataGridColumn
        {
            dataGridColumn.SortMemberPath = sortMemberPath;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.CanUserSort"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="canUserSort">canUserSort value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType CanUserSort<TType>(this TType dataGridColumn, Boolean canUserSort) where TType : notnull, DataGridColumn
        {
            dataGridColumn.CanUserSort = canUserSort;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.SortDirection"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="sortDirection">sortDirection value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType SortDirection<TType>(this TType dataGridColumn, Nullable<ListSortDirection> sortDirection) where TType : notnull, DataGridColumn
        {
            dataGridColumn.SortDirection = sortDirection;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.CanUserReorder"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="canUserReorder">canUserReorder value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType CanUserReorder<TType>(this TType dataGridColumn, Boolean canUserReorder) where TType : notnull, DataGridColumn
        {
            dataGridColumn.CanUserReorder = canUserReorder;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.DragIndicatorStyle"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="dragIndicatorStyle">dragIndicatorStyle value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType DragIndicatorStyle<TType>(this TType dataGridColumn, Style dragIndicatorStyle) where TType : notnull, DataGridColumn
        {
            dataGridColumn.DragIndicatorStyle = dragIndicatorStyle;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.ClipboardContentBinding"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="clipboardContentBinding">clipboardContentBinding value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType ClipboardContentBinding<TType>(this TType dataGridColumn, BindingBase clipboardContentBinding) where TType : notnull, DataGridColumn
        {
            dataGridColumn.ClipboardContentBinding = clipboardContentBinding;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.CanUserResize"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="canUserResize">canUserResize value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType CanUserResize<TType>(this TType dataGridColumn, Boolean canUserResize) where TType : notnull, DataGridColumn
        {
            dataGridColumn.CanUserResize = canUserResize;
            return dataGridColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumn.Visibility"/> property of the current <see cref="DataGridColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumn</typeparam>                                                                       
        /// <param name=" dataGridColumn">current <see cref="DataGridColumn"/></param>                                                          
        /// <param name="visibility">visibility value</param>                                                                            
        /// <returns>current dataGridColumn</returns>                                                                                    
        public static TType Visibility<TType>(this TType dataGridColumn, Visibility visibility) where TType : notnull, DataGridColumn
        {
            dataGridColumn.Visibility = visibility;
            return dataGridColumn;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DataGridComboBoxColumn"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DataGridComboBoxColumnFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridComboBoxColumn.SelectedValueBinding"/> property of the current <see cref="DataGridComboBoxColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridComboBoxColumn</typeparam>                                                                       
        /// <param name=" dataGridComboBoxColumn">current <see cref="DataGridComboBoxColumn"/></param>                                                          
        /// <param name="selectedValueBinding">selectedValueBinding value</param>                                                                            
        /// <returns>current dataGridComboBoxColumn</returns>                                                                                    
        public static TType SelectedValueBinding<TType>(this TType dataGridComboBoxColumn, BindingBase selectedValueBinding) where TType : notnull, DataGridComboBoxColumn
        {
            dataGridComboBoxColumn.SelectedValueBinding = selectedValueBinding;
            return dataGridComboBoxColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridComboBoxColumn.SelectedItemBinding"/> property of the current <see cref="DataGridComboBoxColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridComboBoxColumn</typeparam>                                                                       
        /// <param name=" dataGridComboBoxColumn">current <see cref="DataGridComboBoxColumn"/></param>                                                          
        /// <param name="selectedItemBinding">selectedItemBinding value</param>                                                                            
        /// <returns>current dataGridComboBoxColumn</returns>                                                                                    
        public static TType SelectedItemBinding<TType>(this TType dataGridComboBoxColumn, BindingBase selectedItemBinding) where TType : notnull, DataGridComboBoxColumn
        {
            dataGridComboBoxColumn.SelectedItemBinding = selectedItemBinding;
            return dataGridComboBoxColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridComboBoxColumn.TextBinding"/> property of the current <see cref="DataGridComboBoxColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridComboBoxColumn</typeparam>                                                                       
        /// <param name=" dataGridComboBoxColumn">current <see cref="DataGridComboBoxColumn"/></param>                                                          
        /// <param name="textBinding">textBinding value</param>                                                                            
        /// <returns>current dataGridComboBoxColumn</returns>                                                                                    
        public static TType TextBinding<TType>(this TType dataGridComboBoxColumn, BindingBase textBinding) where TType : notnull, DataGridComboBoxColumn
        {
            dataGridComboBoxColumn.TextBinding = textBinding;
            return dataGridComboBoxColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridComboBoxColumn.ElementStyle"/> property of the current <see cref="DataGridComboBoxColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridComboBoxColumn</typeparam>                                                                       
        /// <param name=" dataGridComboBoxColumn">current <see cref="DataGridComboBoxColumn"/></param>                                                          
        /// <param name="elementStyle">elementStyle value</param>                                                                            
        /// <returns>current dataGridComboBoxColumn</returns>                                                                                    
        public static TType ElementStyle<TType>(this TType dataGridComboBoxColumn, Style elementStyle) where TType : notnull, DataGridComboBoxColumn
        {
            dataGridComboBoxColumn.ElementStyle = elementStyle;
            return dataGridComboBoxColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridComboBoxColumn.EditingElementStyle"/> property of the current <see cref="DataGridComboBoxColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridComboBoxColumn</typeparam>                                                                       
        /// <param name=" dataGridComboBoxColumn">current <see cref="DataGridComboBoxColumn"/></param>                                                          
        /// <param name="editingElementStyle">editingElementStyle value</param>                                                                            
        /// <returns>current dataGridComboBoxColumn</returns>                                                                                    
        public static TType EditingElementStyle<TType>(this TType dataGridComboBoxColumn, Style editingElementStyle) where TType : notnull, DataGridComboBoxColumn
        {
            dataGridComboBoxColumn.EditingElementStyle = editingElementStyle;
            return dataGridComboBoxColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridComboBoxColumn.ClipboardContentBinding"/> property of the current <see cref="DataGridComboBoxColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridComboBoxColumn</typeparam>                                                                       
        /// <param name=" dataGridComboBoxColumn">current <see cref="DataGridComboBoxColumn"/></param>                                                          
        /// <param name="clipboardContentBinding">clipboardContentBinding value</param>                                                                            
        /// <returns>current dataGridComboBoxColumn</returns>                                                                                    
        public static TType ClipboardContentBinding<TType>(this TType dataGridComboBoxColumn, BindingBase clipboardContentBinding) where TType : notnull, DataGridComboBoxColumn
        {
            dataGridComboBoxColumn.ClipboardContentBinding = clipboardContentBinding;
            return dataGridComboBoxColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridComboBoxColumn.ItemsSource"/> property of the current <see cref="DataGridComboBoxColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridComboBoxColumn</typeparam>                                                                       
        /// <param name=" dataGridComboBoxColumn">current <see cref="DataGridComboBoxColumn"/></param>                                                          
        /// <param name="itemsSource">itemsSource value</param>                                                                            
        /// <returns>current dataGridComboBoxColumn</returns>                                                                                    
        public static TType ItemsSource<TType>(this TType dataGridComboBoxColumn, IEnumerable itemsSource) where TType : notnull, DataGridComboBoxColumn
        {
            dataGridComboBoxColumn.ItemsSource = itemsSource;
            return dataGridComboBoxColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridComboBoxColumn.DisplayMemberPath"/> property of the current <see cref="DataGridComboBoxColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridComboBoxColumn</typeparam>                                                                       
        /// <param name=" dataGridComboBoxColumn">current <see cref="DataGridComboBoxColumn"/></param>                                                          
        /// <param name="displayMemberPath">displayMemberPath value</param>                                                                            
        /// <returns>current dataGridComboBoxColumn</returns>                                                                                    
        public static TType DisplayMemberPath<TType>(this TType dataGridComboBoxColumn, String displayMemberPath) where TType : notnull, DataGridComboBoxColumn
        {
            dataGridComboBoxColumn.DisplayMemberPath = displayMemberPath;
            return dataGridComboBoxColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridComboBoxColumn.SelectedValuePath"/> property of the current <see cref="DataGridComboBoxColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridComboBoxColumn</typeparam>                                                                       
        /// <param name=" dataGridComboBoxColumn">current <see cref="DataGridComboBoxColumn"/></param>                                                          
        /// <param name="selectedValuePath">selectedValuePath value</param>                                                                            
        /// <returns>current dataGridComboBoxColumn</returns>                                                                                    
        public static TType SelectedValuePath<TType>(this TType dataGridComboBoxColumn, String selectedValuePath) where TType : notnull, DataGridComboBoxColumn
        {
            dataGridComboBoxColumn.SelectedValuePath = selectedValuePath;
            return dataGridComboBoxColumn;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DataGridHyperlinkColumn"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DataGridHyperlinkColumnFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridHyperlinkColumn.TargetName"/> property of the current <see cref="DataGridHyperlinkColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridHyperlinkColumn</typeparam>                                                                       
        /// <param name=" dataGridHyperlinkColumn">current <see cref="DataGridHyperlinkColumn"/></param>                                                          
        /// <param name="targetName">targetName value</param>                                                                            
        /// <returns>current dataGridHyperlinkColumn</returns>                                                                                    
        public static TType TargetName<TType>(this TType dataGridHyperlinkColumn, String targetName) where TType : notnull, DataGridHyperlinkColumn
        {
            dataGridHyperlinkColumn.TargetName = targetName;
            return dataGridHyperlinkColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridHyperlinkColumn.ContentBinding"/> property of the current <see cref="DataGridHyperlinkColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridHyperlinkColumn</typeparam>                                                                       
        /// <param name=" dataGridHyperlinkColumn">current <see cref="DataGridHyperlinkColumn"/></param>                                                          
        /// <param name="contentBinding">contentBinding value</param>                                                                            
        /// <returns>current dataGridHyperlinkColumn</returns>                                                                                    
        public static TType ContentBinding<TType>(this TType dataGridHyperlinkColumn, BindingBase contentBinding) where TType : notnull, DataGridHyperlinkColumn
        {
            dataGridHyperlinkColumn.ContentBinding = contentBinding;
            return dataGridHyperlinkColumn;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DataGridRow"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DataGridRowFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridRow.ItemsPanel"/> property of the current <see cref="DataGridRow"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridRow</typeparam>                                                                       
        /// <param name=" dataGridRow">current <see cref="DataGridRow"/></param>                                                          
        /// <param name="itemsPanel">itemsPanel value</param>                                                                            
        /// <returns>current dataGridRow</returns>                                                                                    
        public static TType ItemsPanel<TType>(this TType dataGridRow, ItemsPanelTemplate itemsPanel) where TType : notnull, DataGridRow
        {
            dataGridRow.ItemsPanel = itemsPanel;
            return dataGridRow;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridRow.Header"/> property of the current <see cref="DataGridRow"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridRow</typeparam>                                                                       
        /// <param name=" dataGridRow">current <see cref="DataGridRow"/></param>                                                          
        /// <param name="header">header value</param>                                                                            
        /// <returns>current dataGridRow</returns>                                                                                    
        public static TType Header<TType>(this TType dataGridRow, Object header) where TType : notnull, DataGridRow
        {
            dataGridRow.Header = header;
            return dataGridRow;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridRow.HeaderStyle"/> property of the current <see cref="DataGridRow"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridRow</typeparam>                                                                       
        /// <param name=" dataGridRow">current <see cref="DataGridRow"/></param>                                                          
        /// <param name="headerStyle">headerStyle value</param>                                                                            
        /// <returns>current dataGridRow</returns>                                                                                    
        public static TType HeaderStyle<TType>(this TType dataGridRow, Style headerStyle) where TType : notnull, DataGridRow
        {
            dataGridRow.HeaderStyle = headerStyle;
            return dataGridRow;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridRow.HeaderTemplate"/> property of the current <see cref="DataGridRow"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridRow</typeparam>                                                                       
        /// <param name=" dataGridRow">current <see cref="DataGridRow"/></param>                                                          
        /// <param name="headerTemplate">headerTemplate value</param>                                                                            
        /// <returns>current dataGridRow</returns>                                                                                    
        public static TType HeaderTemplate<TType>(this TType dataGridRow, DataTemplate headerTemplate) where TType : notnull, DataGridRow
        {
            dataGridRow.HeaderTemplate = headerTemplate;
            return dataGridRow;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridRow.HeaderTemplateSelector"/> property of the current <see cref="DataGridRow"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridRow</typeparam>                                                                       
        /// <param name=" dataGridRow">current <see cref="DataGridRow"/></param>                                                          
        /// <param name="headerTemplateSelector">headerTemplateSelector value</param>                                                                            
        /// <returns>current dataGridRow</returns>                                                                                    
        public static TType HeaderTemplateSelector<TType>(this TType dataGridRow, DataTemplateSelector headerTemplateSelector) where TType : notnull, DataGridRow
        {
            dataGridRow.HeaderTemplateSelector = headerTemplateSelector;
            return dataGridRow;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridRow.ValidationErrorTemplate"/> property of the current <see cref="DataGridRow"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridRow</typeparam>                                                                       
        /// <param name=" dataGridRow">current <see cref="DataGridRow"/></param>                                                          
        /// <param name="validationErrorTemplate">validationErrorTemplate value</param>                                                                            
        /// <returns>current dataGridRow</returns>                                                                                    
        public static TType ValidationErrorTemplate<TType>(this TType dataGridRow, ControlTemplate validationErrorTemplate) where TType : notnull, DataGridRow
        {
            dataGridRow.ValidationErrorTemplate = validationErrorTemplate;
            return dataGridRow;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridRow.DetailsTemplate"/> property of the current <see cref="DataGridRow"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridRow</typeparam>                                                                       
        /// <param name=" dataGridRow">current <see cref="DataGridRow"/></param>                                                          
        /// <param name="detailsTemplate">detailsTemplate value</param>                                                                            
        /// <returns>current dataGridRow</returns>                                                                                    
        public static TType DetailsTemplate<TType>(this TType dataGridRow, DataTemplate detailsTemplate) where TType : notnull, DataGridRow
        {
            dataGridRow.DetailsTemplate = detailsTemplate;
            return dataGridRow;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridRow.DetailsTemplateSelector"/> property of the current <see cref="DataGridRow"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridRow</typeparam>                                                                       
        /// <param name=" dataGridRow">current <see cref="DataGridRow"/></param>                                                          
        /// <param name="detailsTemplateSelector">detailsTemplateSelector value</param>                                                                            
        /// <returns>current dataGridRow</returns>                                                                                    
        public static TType DetailsTemplateSelector<TType>(this TType dataGridRow, DataTemplateSelector detailsTemplateSelector) where TType : notnull, DataGridRow
        {
            dataGridRow.DetailsTemplateSelector = detailsTemplateSelector;
            return dataGridRow;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridRow.DetailsVisibility"/> property of the current <see cref="DataGridRow"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridRow</typeparam>                                                                       
        /// <param name=" dataGridRow">current <see cref="DataGridRow"/></param>                                                          
        /// <param name="detailsVisibility">detailsVisibility value</param>                                                                            
        /// <returns>current dataGridRow</returns>                                                                                    
        public static TType DetailsVisibility<TType>(this TType dataGridRow, Visibility detailsVisibility) where TType : notnull, DataGridRow
        {
            dataGridRow.DetailsVisibility = detailsVisibility;
            return dataGridRow;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridRow.IsSelected"/> property of the current <see cref="DataGridRow"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridRow</typeparam>                                                                       
        /// <param name=" dataGridRow">current <see cref="DataGridRow"/></param>                                                          
        /// <param name="isSelected">isSelected value</param>                                                                            
        /// <returns>current dataGridRow</returns>                                                                                    
        public static TType IsSelected<TType>(this TType dataGridRow, Boolean isSelected) where TType : notnull, DataGridRow
        {
            dataGridRow.IsSelected = isSelected;
            return dataGridRow;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DataGridTemplateColumn"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DataGridTemplateColumnFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridTemplateColumn.CellTemplate"/> property of the current <see cref="DataGridTemplateColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridTemplateColumn</typeparam>                                                                       
        /// <param name=" dataGridTemplateColumn">current <see cref="DataGridTemplateColumn"/></param>                                                          
        /// <param name="cellTemplate">cellTemplate value</param>                                                                            
        /// <returns>current dataGridTemplateColumn</returns>                                                                                    
        public static TType CellTemplate<TType>(this TType dataGridTemplateColumn, DataTemplate cellTemplate) where TType : notnull, DataGridTemplateColumn
        {
            dataGridTemplateColumn.CellTemplate = cellTemplate;
            return dataGridTemplateColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridTemplateColumn.CellTemplateSelector"/> property of the current <see cref="DataGridTemplateColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridTemplateColumn</typeparam>                                                                       
        /// <param name=" dataGridTemplateColumn">current <see cref="DataGridTemplateColumn"/></param>                                                          
        /// <param name="cellTemplateSelector">cellTemplateSelector value</param>                                                                            
        /// <returns>current dataGridTemplateColumn</returns>                                                                                    
        public static TType CellTemplateSelector<TType>(this TType dataGridTemplateColumn, DataTemplateSelector cellTemplateSelector) where TType : notnull, DataGridTemplateColumn
        {
            dataGridTemplateColumn.CellTemplateSelector = cellTemplateSelector;
            return dataGridTemplateColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridTemplateColumn.CellEditingTemplate"/> property of the current <see cref="DataGridTemplateColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridTemplateColumn</typeparam>                                                                       
        /// <param name=" dataGridTemplateColumn">current <see cref="DataGridTemplateColumn"/></param>                                                          
        /// <param name="cellEditingTemplate">cellEditingTemplate value</param>                                                                            
        /// <returns>current dataGridTemplateColumn</returns>                                                                                    
        public static TType CellEditingTemplate<TType>(this TType dataGridTemplateColumn, DataTemplate cellEditingTemplate) where TType : notnull, DataGridTemplateColumn
        {
            dataGridTemplateColumn.CellEditingTemplate = cellEditingTemplate;
            return dataGridTemplateColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridTemplateColumn.CellEditingTemplateSelector"/> property of the current <see cref="DataGridTemplateColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridTemplateColumn</typeparam>                                                                       
        /// <param name=" dataGridTemplateColumn">current <see cref="DataGridTemplateColumn"/></param>                                                          
        /// <param name="cellEditingTemplateSelector">cellEditingTemplateSelector value</param>                                                                            
        /// <returns>current dataGridTemplateColumn</returns>                                                                                    
        public static TType CellEditingTemplateSelector<TType>(this TType dataGridTemplateColumn, DataTemplateSelector cellEditingTemplateSelector) where TType : notnull, DataGridTemplateColumn
        {
            dataGridTemplateColumn.CellEditingTemplateSelector = cellEditingTemplateSelector;
            return dataGridTemplateColumn;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DataGridTextColumn"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DataGridTextColumnFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridTextColumn.FontFamily"/> property of the current <see cref="DataGridTextColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridTextColumn</typeparam>                                                                       
        /// <param name=" dataGridTextColumn">current <see cref="DataGridTextColumn"/></param>                                                          
        /// <param name="fontFamily">fontFamily value</param>                                                                            
        /// <returns>current dataGridTextColumn</returns>                                                                                    
        public static TType FontFamily<TType>(this TType dataGridTextColumn, FontFamily fontFamily) where TType : notnull, DataGridTextColumn
        {
            dataGridTextColumn.FontFamily = fontFamily;
            return dataGridTextColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridTextColumn.FontSize"/> property of the current <see cref="DataGridTextColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridTextColumn</typeparam>                                                                       
        /// <param name=" dataGridTextColumn">current <see cref="DataGridTextColumn"/></param>                                                          
        /// <param name="fontSize">fontSize value</param>                                                                            
        /// <returns>current dataGridTextColumn</returns>                                                                                    
        public static TType FontSize<TType>(this TType dataGridTextColumn, Double fontSize) where TType : notnull, DataGridTextColumn
        {
            dataGridTextColumn.FontSize = fontSize;
            return dataGridTextColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridTextColumn.FontStyle"/> property of the current <see cref="DataGridTextColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridTextColumn</typeparam>                                                                       
        /// <param name=" dataGridTextColumn">current <see cref="DataGridTextColumn"/></param>                                                          
        /// <param name="fontStyle">fontStyle value</param>                                                                            
        /// <returns>current dataGridTextColumn</returns>                                                                                    
        public static TType FontStyle<TType>(this TType dataGridTextColumn, FontStyle fontStyle) where TType : notnull, DataGridTextColumn
        {
            dataGridTextColumn.FontStyle = fontStyle;
            return dataGridTextColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridTextColumn.FontWeight"/> property of the current <see cref="DataGridTextColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridTextColumn</typeparam>                                                                       
        /// <param name=" dataGridTextColumn">current <see cref="DataGridTextColumn"/></param>                                                          
        /// <param name="fontWeight">fontWeight value</param>                                                                            
        /// <returns>current dataGridTextColumn</returns>                                                                                    
        public static TType FontWeight<TType>(this TType dataGridTextColumn, FontWeight fontWeight) where TType : notnull, DataGridTextColumn
        {
            dataGridTextColumn.FontWeight = fontWeight;
            return dataGridTextColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridTextColumn.Foreground"/> property of the current <see cref="DataGridTextColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridTextColumn</typeparam>                                                                       
        /// <param name=" dataGridTextColumn">current <see cref="DataGridTextColumn"/></param>                                                          
        /// <param name="foreground">foreground value</param>                                                                            
        /// <returns>current dataGridTextColumn</returns>                                                                                    
        public static TType Foreground<TType>(this TType dataGridTextColumn, Brush foreground) where TType : notnull, DataGridTextColumn
        {
            dataGridTextColumn.Foreground = foreground;
            return dataGridTextColumn;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DatePicker"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DatePickerFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DatePicker.CalendarStyle"/> property of the current <see cref="DatePicker"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DatePicker</typeparam>                                                                       
        /// <param name=" datePicker">current <see cref="DatePicker"/></param>                                                          
        /// <param name="calendarStyle">calendarStyle value</param>                                                                            
        /// <returns>current datePicker</returns>                                                                                    
        public static TType CalendarStyle<TType>(this TType datePicker, Style calendarStyle) where TType : notnull, DatePicker
        {
            datePicker.CalendarStyle = calendarStyle;
            return datePicker;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DatePicker.DisplayDate"/> property of the current <see cref="DatePicker"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DatePicker</typeparam>                                                                       
        /// <param name=" datePicker">current <see cref="DatePicker"/></param>                                                          
        /// <param name="displayDate">displayDate value</param>                                                                            
        /// <returns>current datePicker</returns>                                                                                    
        public static TType DisplayDate<TType>(this TType datePicker, DateTime displayDate) where TType : notnull, DatePicker
        {
            datePicker.DisplayDate = displayDate;
            return datePicker;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DatePicker.DisplayDateEnd"/> property of the current <see cref="DatePicker"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DatePicker</typeparam>                                                                       
        /// <param name=" datePicker">current <see cref="DatePicker"/></param>                                                          
        /// <param name="displayDateEnd">displayDateEnd value</param>                                                                            
        /// <returns>current datePicker</returns>                                                                                    
        public static TType DisplayDateEnd<TType>(this TType datePicker, Nullable<DateTime> displayDateEnd) where TType : notnull, DatePicker
        {
            datePicker.DisplayDateEnd = displayDateEnd;
            return datePicker;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DatePicker.DisplayDateStart"/> property of the current <see cref="DatePicker"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DatePicker</typeparam>                                                                       
        /// <param name=" datePicker">current <see cref="DatePicker"/></param>                                                          
        /// <param name="displayDateStart">displayDateStart value</param>                                                                            
        /// <returns>current datePicker</returns>                                                                                    
        public static TType DisplayDateStart<TType>(this TType datePicker, Nullable<DateTime> displayDateStart) where TType : notnull, DatePicker
        {
            datePicker.DisplayDateStart = displayDateStart;
            return datePicker;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DatePicker.FirstDayOfWeek"/> property of the current <see cref="DatePicker"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DatePicker</typeparam>                                                                       
        /// <param name=" datePicker">current <see cref="DatePicker"/></param>                                                          
        /// <param name="firstDayOfWeek">firstDayOfWeek value</param>                                                                            
        /// <returns>current datePicker</returns>                                                                                    
        public static TType FirstDayOfWeek<TType>(this TType datePicker, DayOfWeek firstDayOfWeek) where TType : notnull, DatePicker
        {
            datePicker.FirstDayOfWeek = firstDayOfWeek;
            return datePicker;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DatePicker.IsDropDownOpen"/> property of the current <see cref="DatePicker"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DatePicker</typeparam>                                                                       
        /// <param name=" datePicker">current <see cref="DatePicker"/></param>                                                          
        /// <param name="isDropDownOpen">isDropDownOpen value</param>                                                                            
        /// <returns>current datePicker</returns>                                                                                    
        public static TType IsDropDownOpen<TType>(this TType datePicker, Boolean isDropDownOpen) where TType : notnull, DatePicker
        {
            datePicker.IsDropDownOpen = isDropDownOpen;
            return datePicker;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DatePicker.IsTodayHighlighted"/> property of the current <see cref="DatePicker"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DatePicker</typeparam>                                                                       
        /// <param name=" datePicker">current <see cref="DatePicker"/></param>                                                          
        /// <param name="isTodayHighlighted">isTodayHighlighted value</param>                                                                            
        /// <returns>current datePicker</returns>                                                                                    
        public static TType IsTodayHighlighted<TType>(this TType datePicker, Boolean isTodayHighlighted) where TType : notnull, DatePicker
        {
            datePicker.IsTodayHighlighted = isTodayHighlighted;
            return datePicker;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DatePicker.SelectedDate"/> property of the current <see cref="DatePicker"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DatePicker</typeparam>                                                                       
        /// <param name=" datePicker">current <see cref="DatePicker"/></param>                                                          
        /// <param name="selectedDate">selectedDate value</param>                                                                            
        /// <returns>current datePicker</returns>                                                                                    
        public static TType SelectedDate<TType>(this TType datePicker, Nullable<DateTime> selectedDate) where TType : notnull, DatePicker
        {
            datePicker.SelectedDate = selectedDate;
            return datePicker;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DatePicker.SelectedDateFormat"/> property of the current <see cref="DatePicker"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DatePicker</typeparam>                                                                       
        /// <param name=" datePicker">current <see cref="DatePicker"/></param>                                                          
        /// <param name="selectedDateFormat">selectedDateFormat value</param>                                                                            
        /// <returns>current datePicker</returns>                                                                                    
        public static TType SelectedDateFormat<TType>(this TType datePicker, DatePickerFormat selectedDateFormat) where TType : notnull, DatePicker
        {
            datePicker.SelectedDateFormat = selectedDateFormat;
            return datePicker;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DatePicker.Text"/> property of the current <see cref="DatePicker"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DatePicker</typeparam>                                                                       
        /// <param name=" datePicker">current <see cref="DatePicker"/></param>                                                          
        /// <param name="text">text value</param>                                                                            
        /// <returns>current datePicker</returns>                                                                                    
        public static TType Text<TType>(this TType datePicker, String text) where TType : notnull, DatePicker
        {
            datePicker.Text = text;
            return datePicker;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Decorator"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DecoratorFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Decorator.Child"/> property of the current <see cref="Decorator"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Decorator</typeparam>                                                                       
        /// <param name=" decorator">current <see cref="Decorator"/></param>                                                          
        /// <param name="child">child value</param>                                                                            
        /// <returns>current decorator</returns>                                                                                    
        public static TType Child<TType>(this TType decorator, UIElement child) where TType : notnull, Decorator
        {
            decorator.Child = child;
            return decorator;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DefinitionBase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DefinitionBaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DefinitionBase.SharedSizeGroup"/> property of the current <see cref="DefinitionBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DefinitionBase</typeparam>                                                                       
        /// <param name=" definitionBase">current <see cref="DefinitionBase"/></param>                                                          
        /// <param name="sharedSizeGroup">sharedSizeGroup value</param>                                                                            
        /// <returns>current definitionBase</returns>                                                                                    
        public static TType SharedSizeGroup<TType>(this TType definitionBase, String sharedSizeGroup) where TType : notnull, DefinitionBase
        {
            definitionBase.SharedSizeGroup = sharedSizeGroup;
            return definitionBase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DockPanel"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DockPanelFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DockPanel.LastChildFill"/> property of the current <see cref="DockPanel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DockPanel</typeparam>                                                                       
        /// <param name=" dockPanel">current <see cref="DockPanel"/></param>                                                          
        /// <param name="lastChildFill">lastChildFill value</param>                                                                            
        /// <returns>current dockPanel</returns>                                                                                    
        public static TType LastChildFill<TType>(this TType dockPanel, Boolean lastChildFill) where TType : notnull, DockPanel
        {
            dockPanel.LastChildFill = lastChildFill;
            return dockPanel;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DocumentViewer"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DocumentViewerFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DocumentViewer.HorizontalOffset"/> property of the current <see cref="DocumentViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DocumentViewer</typeparam>                                                                       
        /// <param name=" documentViewer">current <see cref="DocumentViewer"/></param>                                                          
        /// <param name="horizontalOffset">horizontalOffset value</param>                                                                            
        /// <returns>current documentViewer</returns>                                                                                    
        public static TType HorizontalOffset<TType>(this TType documentViewer, Double horizontalOffset) where TType : notnull, DocumentViewer
        {
            documentViewer.HorizontalOffset = horizontalOffset;
            return documentViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DocumentViewer.VerticalOffset"/> property of the current <see cref="DocumentViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DocumentViewer</typeparam>                                                                       
        /// <param name=" documentViewer">current <see cref="DocumentViewer"/></param>                                                          
        /// <param name="verticalOffset">verticalOffset value</param>                                                                            
        /// <returns>current documentViewer</returns>                                                                                    
        public static TType VerticalOffset<TType>(this TType documentViewer, Double verticalOffset) where TType : notnull, DocumentViewer
        {
            documentViewer.VerticalOffset = verticalOffset;
            return documentViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DocumentViewer.ShowPageBorders"/> property of the current <see cref="DocumentViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DocumentViewer</typeparam>                                                                       
        /// <param name=" documentViewer">current <see cref="DocumentViewer"/></param>                                                          
        /// <param name="showPageBorders">showPageBorders value</param>                                                                            
        /// <returns>current documentViewer</returns>                                                                                    
        public static TType ShowPageBorders<TType>(this TType documentViewer, Boolean showPageBorders) where TType : notnull, DocumentViewer
        {
            documentViewer.ShowPageBorders = showPageBorders;
            return documentViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DocumentViewer.Zoom"/> property of the current <see cref="DocumentViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DocumentViewer</typeparam>                                                                       
        /// <param name=" documentViewer">current <see cref="DocumentViewer"/></param>                                                          
        /// <param name="zoom">zoom value</param>                                                                            
        /// <returns>current documentViewer</returns>                                                                                    
        public static TType Zoom<TType>(this TType documentViewer, Double zoom) where TType : notnull, DocumentViewer
        {
            documentViewer.Zoom = zoom;
            return documentViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DocumentViewer.MaxPagesAcross"/> property of the current <see cref="DocumentViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DocumentViewer</typeparam>                                                                       
        /// <param name=" documentViewer">current <see cref="DocumentViewer"/></param>                                                          
        /// <param name="maxPagesAcross">maxPagesAcross value</param>                                                                            
        /// <returns>current documentViewer</returns>                                                                                    
        public static TType MaxPagesAcross<TType>(this TType documentViewer, Int32 maxPagesAcross) where TType : notnull, DocumentViewer
        {
            documentViewer.MaxPagesAcross = maxPagesAcross;
            return documentViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DocumentViewer.VerticalPageSpacing"/> property of the current <see cref="DocumentViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DocumentViewer</typeparam>                                                                       
        /// <param name=" documentViewer">current <see cref="DocumentViewer"/></param>                                                          
        /// <param name="verticalPageSpacing">verticalPageSpacing value</param>                                                                            
        /// <returns>current documentViewer</returns>                                                                                    
        public static TType VerticalPageSpacing<TType>(this TType documentViewer, Double verticalPageSpacing) where TType : notnull, DocumentViewer
        {
            documentViewer.VerticalPageSpacing = verticalPageSpacing;
            return documentViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DocumentViewer.HorizontalPageSpacing"/> property of the current <see cref="DocumentViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DocumentViewer</typeparam>                                                                       
        /// <param name=" documentViewer">current <see cref="DocumentViewer"/></param>                                                          
        /// <param name="horizontalPageSpacing">horizontalPageSpacing value</param>                                                                            
        /// <returns>current documentViewer</returns>                                                                                    
        public static TType HorizontalPageSpacing<TType>(this TType documentViewer, Double horizontalPageSpacing) where TType : notnull, DocumentViewer
        {
            documentViewer.HorizontalPageSpacing = horizontalPageSpacing;
            return documentViewer;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Expander"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ExpanderFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Expander.ExpandDirection"/> property of the current <see cref="Expander"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Expander</typeparam>                                                                       
        /// <param name=" expander">current <see cref="Expander"/></param>                                                          
        /// <param name="expandDirection">expandDirection value</param>                                                                            
        /// <returns>current expander</returns>                                                                                    
        public static TType ExpandDirection<TType>(this TType expander, ExpandDirection expandDirection) where TType : notnull, Expander
        {
            expander.ExpandDirection = expandDirection;
            return expander;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Expander.IsExpanded"/> property of the current <see cref="Expander"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Expander</typeparam>                                                                       
        /// <param name=" expander">current <see cref="Expander"/></param>                                                          
        /// <param name="isExpanded">isExpanded value</param>                                                                            
        /// <returns>current expander</returns>                                                                                    
        public static TType IsExpanded<TType>(this TType expander, Boolean isExpanded) where TType : notnull, Expander
        {
            expander.IsExpanded = isExpanded;
            return expander;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="FlowDocumentReader"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class FlowDocumentReaderFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentReader.ViewingMode"/> property of the current <see cref="FlowDocumentReader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentReader</typeparam>                                                                       
        /// <param name=" flowDocumentReader">current <see cref="FlowDocumentReader"/></param>                                                          
        /// <param name="viewingMode">viewingMode value</param>                                                                            
        /// <returns>current flowDocumentReader</returns>                                                                                    
        public static TType ViewingMode<TType>(this TType flowDocumentReader, FlowDocumentReaderViewingMode viewingMode) where TType : notnull, FlowDocumentReader
        {
            flowDocumentReader.ViewingMode = viewingMode;
            return flowDocumentReader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentReader.IsPageViewEnabled"/> property of the current <see cref="FlowDocumentReader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentReader</typeparam>                                                                       
        /// <param name=" flowDocumentReader">current <see cref="FlowDocumentReader"/></param>                                                          
        /// <param name="isPageViewEnabled">isPageViewEnabled value</param>                                                                            
        /// <returns>current flowDocumentReader</returns>                                                                                    
        public static TType IsPageViewEnabled<TType>(this TType flowDocumentReader, Boolean isPageViewEnabled) where TType : notnull, FlowDocumentReader
        {
            flowDocumentReader.IsPageViewEnabled = isPageViewEnabled;
            return flowDocumentReader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentReader.IsTwoPageViewEnabled"/> property of the current <see cref="FlowDocumentReader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentReader</typeparam>                                                                       
        /// <param name=" flowDocumentReader">current <see cref="FlowDocumentReader"/></param>                                                          
        /// <param name="isTwoPageViewEnabled">isTwoPageViewEnabled value</param>                                                                            
        /// <returns>current flowDocumentReader</returns>                                                                                    
        public static TType IsTwoPageViewEnabled<TType>(this TType flowDocumentReader, Boolean isTwoPageViewEnabled) where TType : notnull, FlowDocumentReader
        {
            flowDocumentReader.IsTwoPageViewEnabled = isTwoPageViewEnabled;
            return flowDocumentReader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentReader.IsScrollViewEnabled"/> property of the current <see cref="FlowDocumentReader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentReader</typeparam>                                                                       
        /// <param name=" flowDocumentReader">current <see cref="FlowDocumentReader"/></param>                                                          
        /// <param name="isScrollViewEnabled">isScrollViewEnabled value</param>                                                                            
        /// <returns>current flowDocumentReader</returns>                                                                                    
        public static TType IsScrollViewEnabled<TType>(this TType flowDocumentReader, Boolean isScrollViewEnabled) where TType : notnull, FlowDocumentReader
        {
            flowDocumentReader.IsScrollViewEnabled = isScrollViewEnabled;
            return flowDocumentReader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentReader.IsFindEnabled"/> property of the current <see cref="FlowDocumentReader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentReader</typeparam>                                                                       
        /// <param name=" flowDocumentReader">current <see cref="FlowDocumentReader"/></param>                                                          
        /// <param name="isFindEnabled">isFindEnabled value</param>                                                                            
        /// <returns>current flowDocumentReader</returns>                                                                                    
        public static TType IsFindEnabled<TType>(this TType flowDocumentReader, Boolean isFindEnabled) where TType : notnull, FlowDocumentReader
        {
            flowDocumentReader.IsFindEnabled = isFindEnabled;
            return flowDocumentReader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentReader.IsPrintEnabled"/> property of the current <see cref="FlowDocumentReader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentReader</typeparam>                                                                       
        /// <param name=" flowDocumentReader">current <see cref="FlowDocumentReader"/></param>                                                          
        /// <param name="isPrintEnabled">isPrintEnabled value</param>                                                                            
        /// <returns>current flowDocumentReader</returns>                                                                                    
        public static TType IsPrintEnabled<TType>(this TType flowDocumentReader, Boolean isPrintEnabled) where TType : notnull, FlowDocumentReader
        {
            flowDocumentReader.IsPrintEnabled = isPrintEnabled;
            return flowDocumentReader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentReader.Document"/> property of the current <see cref="FlowDocumentReader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentReader</typeparam>                                                                       
        /// <param name=" flowDocumentReader">current <see cref="FlowDocumentReader"/></param>                                                          
        /// <param name="document">document value</param>                                                                            
        /// <returns>current flowDocumentReader</returns>                                                                                    
        public static TType Document<TType>(this TType flowDocumentReader, FlowDocument document) where TType : notnull, FlowDocumentReader
        {
            flowDocumentReader.Document = document;
            return flowDocumentReader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentReader.Zoom"/> property of the current <see cref="FlowDocumentReader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentReader</typeparam>                                                                       
        /// <param name=" flowDocumentReader">current <see cref="FlowDocumentReader"/></param>                                                          
        /// <param name="zoom">zoom value</param>                                                                            
        /// <returns>current flowDocumentReader</returns>                                                                                    
        public static TType Zoom<TType>(this TType flowDocumentReader, Double zoom) where TType : notnull, FlowDocumentReader
        {
            flowDocumentReader.Zoom = zoom;
            return flowDocumentReader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentReader.MaxZoom"/> property of the current <see cref="FlowDocumentReader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentReader</typeparam>                                                                       
        /// <param name=" flowDocumentReader">current <see cref="FlowDocumentReader"/></param>                                                          
        /// <param name="maxZoom">maxZoom value</param>                                                                            
        /// <returns>current flowDocumentReader</returns>                                                                                    
        public static TType MaxZoom<TType>(this TType flowDocumentReader, Double maxZoom) where TType : notnull, FlowDocumentReader
        {
            flowDocumentReader.MaxZoom = maxZoom;
            return flowDocumentReader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentReader.MinZoom"/> property of the current <see cref="FlowDocumentReader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentReader</typeparam>                                                                       
        /// <param name=" flowDocumentReader">current <see cref="FlowDocumentReader"/></param>                                                          
        /// <param name="minZoom">minZoom value</param>                                                                            
        /// <returns>current flowDocumentReader</returns>                                                                                    
        public static TType MinZoom<TType>(this TType flowDocumentReader, Double minZoom) where TType : notnull, FlowDocumentReader
        {
            flowDocumentReader.MinZoom = minZoom;
            return flowDocumentReader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentReader.ZoomIncrement"/> property of the current <see cref="FlowDocumentReader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentReader</typeparam>                                                                       
        /// <param name=" flowDocumentReader">current <see cref="FlowDocumentReader"/></param>                                                          
        /// <param name="zoomIncrement">zoomIncrement value</param>                                                                            
        /// <returns>current flowDocumentReader</returns>                                                                                    
        public static TType ZoomIncrement<TType>(this TType flowDocumentReader, Double zoomIncrement) where TType : notnull, FlowDocumentReader
        {
            flowDocumentReader.ZoomIncrement = zoomIncrement;
            return flowDocumentReader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentReader.SelectionBrush"/> property of the current <see cref="FlowDocumentReader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentReader</typeparam>                                                                       
        /// <param name=" flowDocumentReader">current <see cref="FlowDocumentReader"/></param>                                                          
        /// <param name="selectionBrush">selectionBrush value</param>                                                                            
        /// <returns>current flowDocumentReader</returns>                                                                                    
        public static TType SelectionBrush<TType>(this TType flowDocumentReader, Brush selectionBrush) where TType : notnull, FlowDocumentReader
        {
            flowDocumentReader.SelectionBrush = selectionBrush;
            return flowDocumentReader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentReader.SelectionOpacity"/> property of the current <see cref="FlowDocumentReader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentReader</typeparam>                                                                       
        /// <param name=" flowDocumentReader">current <see cref="FlowDocumentReader"/></param>                                                          
        /// <param name="selectionOpacity">selectionOpacity value</param>                                                                            
        /// <returns>current flowDocumentReader</returns>                                                                                    
        public static TType SelectionOpacity<TType>(this TType flowDocumentReader, Double selectionOpacity) where TType : notnull, FlowDocumentReader
        {
            flowDocumentReader.SelectionOpacity = selectionOpacity;
            return flowDocumentReader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentReader.IsInactiveSelectionHighlightEnabled"/> property of the current <see cref="FlowDocumentReader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentReader</typeparam>                                                                       
        /// <param name=" flowDocumentReader">current <see cref="FlowDocumentReader"/></param>                                                          
        /// <param name="isInactiveSelectionHighlightEnabled">isInactiveSelectionHighlightEnabled value</param>                                                                            
        /// <returns>current flowDocumentReader</returns>                                                                                    
        public static TType IsInactiveSelectionHighlightEnabled<TType>(this TType flowDocumentReader, Boolean isInactiveSelectionHighlightEnabled) where TType : notnull, FlowDocumentReader
        {
            flowDocumentReader.IsInactiveSelectionHighlightEnabled = isInactiveSelectionHighlightEnabled;
            return flowDocumentReader;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="FlowDocumentScrollViewer"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class FlowDocumentScrollViewerFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentScrollViewer.Document"/> property of the current <see cref="FlowDocumentScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentScrollViewer</typeparam>                                                                       
        /// <param name=" flowDocumentScrollViewer">current <see cref="FlowDocumentScrollViewer"/></param>                                                          
        /// <param name="document">document value</param>                                                                            
        /// <returns>current flowDocumentScrollViewer</returns>                                                                                    
        public static TType Document<TType>(this TType flowDocumentScrollViewer, FlowDocument document) where TType : notnull, FlowDocumentScrollViewer
        {
            flowDocumentScrollViewer.Document = document;
            return flowDocumentScrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentScrollViewer.Zoom"/> property of the current <see cref="FlowDocumentScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentScrollViewer</typeparam>                                                                       
        /// <param name=" flowDocumentScrollViewer">current <see cref="FlowDocumentScrollViewer"/></param>                                                          
        /// <param name="zoom">zoom value</param>                                                                            
        /// <returns>current flowDocumentScrollViewer</returns>                                                                                    
        public static TType Zoom<TType>(this TType flowDocumentScrollViewer, Double zoom) where TType : notnull, FlowDocumentScrollViewer
        {
            flowDocumentScrollViewer.Zoom = zoom;
            return flowDocumentScrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentScrollViewer.MaxZoom"/> property of the current <see cref="FlowDocumentScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentScrollViewer</typeparam>                                                                       
        /// <param name=" flowDocumentScrollViewer">current <see cref="FlowDocumentScrollViewer"/></param>                                                          
        /// <param name="maxZoom">maxZoom value</param>                                                                            
        /// <returns>current flowDocumentScrollViewer</returns>                                                                                    
        public static TType MaxZoom<TType>(this TType flowDocumentScrollViewer, Double maxZoom) where TType : notnull, FlowDocumentScrollViewer
        {
            flowDocumentScrollViewer.MaxZoom = maxZoom;
            return flowDocumentScrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentScrollViewer.MinZoom"/> property of the current <see cref="FlowDocumentScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentScrollViewer</typeparam>                                                                       
        /// <param name=" flowDocumentScrollViewer">current <see cref="FlowDocumentScrollViewer"/></param>                                                          
        /// <param name="minZoom">minZoom value</param>                                                                            
        /// <returns>current flowDocumentScrollViewer</returns>                                                                                    
        public static TType MinZoom<TType>(this TType flowDocumentScrollViewer, Double minZoom) where TType : notnull, FlowDocumentScrollViewer
        {
            flowDocumentScrollViewer.MinZoom = minZoom;
            return flowDocumentScrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentScrollViewer.ZoomIncrement"/> property of the current <see cref="FlowDocumentScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentScrollViewer</typeparam>                                                                       
        /// <param name=" flowDocumentScrollViewer">current <see cref="FlowDocumentScrollViewer"/></param>                                                          
        /// <param name="zoomIncrement">zoomIncrement value</param>                                                                            
        /// <returns>current flowDocumentScrollViewer</returns>                                                                                    
        public static TType ZoomIncrement<TType>(this TType flowDocumentScrollViewer, Double zoomIncrement) where TType : notnull, FlowDocumentScrollViewer
        {
            flowDocumentScrollViewer.ZoomIncrement = zoomIncrement;
            return flowDocumentScrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentScrollViewer.IsSelectionEnabled"/> property of the current <see cref="FlowDocumentScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentScrollViewer</typeparam>                                                                       
        /// <param name=" flowDocumentScrollViewer">current <see cref="FlowDocumentScrollViewer"/></param>                                                          
        /// <param name="isSelectionEnabled">isSelectionEnabled value</param>                                                                            
        /// <returns>current flowDocumentScrollViewer</returns>                                                                                    
        public static TType IsSelectionEnabled<TType>(this TType flowDocumentScrollViewer, Boolean isSelectionEnabled) where TType : notnull, FlowDocumentScrollViewer
        {
            flowDocumentScrollViewer.IsSelectionEnabled = isSelectionEnabled;
            return flowDocumentScrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentScrollViewer.IsToolBarVisible"/> property of the current <see cref="FlowDocumentScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentScrollViewer</typeparam>                                                                       
        /// <param name=" flowDocumentScrollViewer">current <see cref="FlowDocumentScrollViewer"/></param>                                                          
        /// <param name="isToolBarVisible">isToolBarVisible value</param>                                                                            
        /// <returns>current flowDocumentScrollViewer</returns>                                                                                    
        public static TType IsToolBarVisible<TType>(this TType flowDocumentScrollViewer, Boolean isToolBarVisible) where TType : notnull, FlowDocumentScrollViewer
        {
            flowDocumentScrollViewer.IsToolBarVisible = isToolBarVisible;
            return flowDocumentScrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentScrollViewer.HorizontalScrollBarVisibility"/> property of the current <see cref="FlowDocumentScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentScrollViewer</typeparam>                                                                       
        /// <param name=" flowDocumentScrollViewer">current <see cref="FlowDocumentScrollViewer"/></param>                                                          
        /// <param name="horizontalScrollBarVisibility">horizontalScrollBarVisibility value</param>                                                                            
        /// <returns>current flowDocumentScrollViewer</returns>                                                                                    
        public static TType HorizontalScrollBarVisibility<TType>(this TType flowDocumentScrollViewer, ScrollBarVisibility horizontalScrollBarVisibility) where TType : notnull, FlowDocumentScrollViewer
        {
            flowDocumentScrollViewer.HorizontalScrollBarVisibility = horizontalScrollBarVisibility;
            return flowDocumentScrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentScrollViewer.VerticalScrollBarVisibility"/> property of the current <see cref="FlowDocumentScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentScrollViewer</typeparam>                                                                       
        /// <param name=" flowDocumentScrollViewer">current <see cref="FlowDocumentScrollViewer"/></param>                                                          
        /// <param name="verticalScrollBarVisibility">verticalScrollBarVisibility value</param>                                                                            
        /// <returns>current flowDocumentScrollViewer</returns>                                                                                    
        public static TType VerticalScrollBarVisibility<TType>(this TType flowDocumentScrollViewer, ScrollBarVisibility verticalScrollBarVisibility) where TType : notnull, FlowDocumentScrollViewer
        {
            flowDocumentScrollViewer.VerticalScrollBarVisibility = verticalScrollBarVisibility;
            return flowDocumentScrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentScrollViewer.SelectionBrush"/> property of the current <see cref="FlowDocumentScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentScrollViewer</typeparam>                                                                       
        /// <param name=" flowDocumentScrollViewer">current <see cref="FlowDocumentScrollViewer"/></param>                                                          
        /// <param name="selectionBrush">selectionBrush value</param>                                                                            
        /// <returns>current flowDocumentScrollViewer</returns>                                                                                    
        public static TType SelectionBrush<TType>(this TType flowDocumentScrollViewer, Brush selectionBrush) where TType : notnull, FlowDocumentScrollViewer
        {
            flowDocumentScrollViewer.SelectionBrush = selectionBrush;
            return flowDocumentScrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentScrollViewer.SelectionOpacity"/> property of the current <see cref="FlowDocumentScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentScrollViewer</typeparam>                                                                       
        /// <param name=" flowDocumentScrollViewer">current <see cref="FlowDocumentScrollViewer"/></param>                                                          
        /// <param name="selectionOpacity">selectionOpacity value</param>                                                                            
        /// <returns>current flowDocumentScrollViewer</returns>                                                                                    
        public static TType SelectionOpacity<TType>(this TType flowDocumentScrollViewer, Double selectionOpacity) where TType : notnull, FlowDocumentScrollViewer
        {
            flowDocumentScrollViewer.SelectionOpacity = selectionOpacity;
            return flowDocumentScrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentScrollViewer.IsInactiveSelectionHighlightEnabled"/> property of the current <see cref="FlowDocumentScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentScrollViewer</typeparam>                                                                       
        /// <param name=" flowDocumentScrollViewer">current <see cref="FlowDocumentScrollViewer"/></param>                                                          
        /// <param name="isInactiveSelectionHighlightEnabled">isInactiveSelectionHighlightEnabled value</param>                                                                            
        /// <returns>current flowDocumentScrollViewer</returns>                                                                                    
        public static TType IsInactiveSelectionHighlightEnabled<TType>(this TType flowDocumentScrollViewer, Boolean isInactiveSelectionHighlightEnabled) where TType : notnull, FlowDocumentScrollViewer
        {
            flowDocumentScrollViewer.IsInactiveSelectionHighlightEnabled = isInactiveSelectionHighlightEnabled;
            return flowDocumentScrollViewer;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Frame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class FrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Frame.Source"/> property of the current <see cref="Frame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Frame</typeparam>                                                                       
        /// <param name=" frame">current <see cref="Frame"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current frame</returns>                                                                                    
        public static TType Source<TType>(this TType frame, Uri source) where TType : notnull, Frame
        {
            frame.Source = source;
            return frame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Frame.NavigationUIVisibility"/> property of the current <see cref="Frame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Frame</typeparam>                                                                       
        /// <param name=" frame">current <see cref="Frame"/></param>                                                          
        /// <param name="navigationUIVisibility">navigationUIVisibility value</param>                                                                            
        /// <returns>current frame</returns>                                                                                    
        public static TType NavigationUIVisibility<TType>(this TType frame, NavigationUIVisibility navigationUIVisibility) where TType : notnull, Frame
        {
            frame.NavigationUIVisibility = navigationUIVisibility;
            return frame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Frame.SandboxExternalContent"/> property of the current <see cref="Frame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Frame</typeparam>                                                                       
        /// <param name=" frame">current <see cref="Frame"/></param>                                                          
        /// <param name="sandboxExternalContent">sandboxExternalContent value</param>                                                                            
        /// <returns>current frame</returns>                                                                                    
        public static TType SandboxExternalContent<TType>(this TType frame, Boolean sandboxExternalContent) where TType : notnull, Frame
        {
            frame.SandboxExternalContent = sandboxExternalContent;
            return frame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Frame.JournalOwnership"/> property of the current <see cref="Frame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Frame</typeparam>                                                                       
        /// <param name=" frame">current <see cref="Frame"/></param>                                                          
        /// <param name="journalOwnership">journalOwnership value</param>                                                                            
        /// <returns>current frame</returns>                                                                                    
        public static TType JournalOwnership<TType>(this TType frame, JournalOwnership journalOwnership) where TType : notnull, Frame
        {
            frame.JournalOwnership = journalOwnership;
            return frame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Grid"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GridFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Grid.ShowGridLines"/> property of the current <see cref="Grid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Grid</typeparam>                                                                       
        /// <param name=" grid">current <see cref="Grid"/></param>                                                          
        /// <param name="showGridLines">showGridLines value</param>                                                                            
        /// <returns>current grid</returns>                                                                                    
        public static TType ShowGridLines<TType>(this TType grid, Boolean showGridLines) where TType : notnull, Grid
        {
            grid.ShowGridLines = showGridLines;
            return grid;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="GridSplitter"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GridSplitterFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GridSplitter.ResizeDirection"/> property of the current <see cref="GridSplitter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridSplitter</typeparam>                                                                       
        /// <param name=" gridSplitter">current <see cref="GridSplitter"/></param>                                                          
        /// <param name="resizeDirection">resizeDirection value</param>                                                                            
        /// <returns>current gridSplitter</returns>                                                                                    
        public static TType ResizeDirection<TType>(this TType gridSplitter, GridResizeDirection resizeDirection) where TType : notnull, GridSplitter
        {
            gridSplitter.ResizeDirection = resizeDirection;
            return gridSplitter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridSplitter.ResizeBehavior"/> property of the current <see cref="GridSplitter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridSplitter</typeparam>                                                                       
        /// <param name=" gridSplitter">current <see cref="GridSplitter"/></param>                                                          
        /// <param name="resizeBehavior">resizeBehavior value</param>                                                                            
        /// <returns>current gridSplitter</returns>                                                                                    
        public static TType ResizeBehavior<TType>(this TType gridSplitter, GridResizeBehavior resizeBehavior) where TType : notnull, GridSplitter
        {
            gridSplitter.ResizeBehavior = resizeBehavior;
            return gridSplitter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridSplitter.ShowsPreview"/> property of the current <see cref="GridSplitter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridSplitter</typeparam>                                                                       
        /// <param name=" gridSplitter">current <see cref="GridSplitter"/></param>                                                          
        /// <param name="showsPreview">showsPreview value</param>                                                                            
        /// <returns>current gridSplitter</returns>                                                                                    
        public static TType ShowsPreview<TType>(this TType gridSplitter, Boolean showsPreview) where TType : notnull, GridSplitter
        {
            gridSplitter.ShowsPreview = showsPreview;
            return gridSplitter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridSplitter.PreviewStyle"/> property of the current <see cref="GridSplitter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridSplitter</typeparam>                                                                       
        /// <param name=" gridSplitter">current <see cref="GridSplitter"/></param>                                                          
        /// <param name="previewStyle">previewStyle value</param>                                                                            
        /// <returns>current gridSplitter</returns>                                                                                    
        public static TType PreviewStyle<TType>(this TType gridSplitter, Style previewStyle) where TType : notnull, GridSplitter
        {
            gridSplitter.PreviewStyle = previewStyle;
            return gridSplitter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridSplitter.KeyboardIncrement"/> property of the current <see cref="GridSplitter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridSplitter</typeparam>                                                                       
        /// <param name=" gridSplitter">current <see cref="GridSplitter"/></param>                                                          
        /// <param name="keyboardIncrement">keyboardIncrement value</param>                                                                            
        /// <returns>current gridSplitter</returns>                                                                                    
        public static TType KeyboardIncrement<TType>(this TType gridSplitter, Double keyboardIncrement) where TType : notnull, GridSplitter
        {
            gridSplitter.KeyboardIncrement = keyboardIncrement;
            return gridSplitter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridSplitter.DragIncrement"/> property of the current <see cref="GridSplitter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridSplitter</typeparam>                                                                       
        /// <param name=" gridSplitter">current <see cref="GridSplitter"/></param>                                                          
        /// <param name="dragIncrement">dragIncrement value</param>                                                                            
        /// <returns>current gridSplitter</returns>                                                                                    
        public static TType DragIncrement<TType>(this TType gridSplitter, Double dragIncrement) where TType : notnull, GridSplitter
        {
            gridSplitter.DragIncrement = dragIncrement;
            return gridSplitter;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="GridView"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GridViewFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GridView.ColumnHeaderContainerStyle"/> property of the current <see cref="GridView"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridView</typeparam>                                                                       
        /// <param name=" gridView">current <see cref="GridView"/></param>                                                          
        /// <param name="columnHeaderContainerStyle">columnHeaderContainerStyle value</param>                                                                            
        /// <returns>current gridView</returns>                                                                                    
        public static TType ColumnHeaderContainerStyle<TType>(this TType gridView, Style columnHeaderContainerStyle) where TType : notnull, GridView
        {
            gridView.ColumnHeaderContainerStyle = columnHeaderContainerStyle;
            return gridView;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridView.ColumnHeaderTemplate"/> property of the current <see cref="GridView"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridView</typeparam>                                                                       
        /// <param name=" gridView">current <see cref="GridView"/></param>                                                          
        /// <param name="columnHeaderTemplate">columnHeaderTemplate value</param>                                                                            
        /// <returns>current gridView</returns>                                                                                    
        public static TType ColumnHeaderTemplate<TType>(this TType gridView, DataTemplate columnHeaderTemplate) where TType : notnull, GridView
        {
            gridView.ColumnHeaderTemplate = columnHeaderTemplate;
            return gridView;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridView.ColumnHeaderTemplateSelector"/> property of the current <see cref="GridView"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridView</typeparam>                                                                       
        /// <param name=" gridView">current <see cref="GridView"/></param>                                                          
        /// <param name="columnHeaderTemplateSelector">columnHeaderTemplateSelector value</param>                                                                            
        /// <returns>current gridView</returns>                                                                                    
        public static TType ColumnHeaderTemplateSelector<TType>(this TType gridView, DataTemplateSelector columnHeaderTemplateSelector) where TType : notnull, GridView
        {
            gridView.ColumnHeaderTemplateSelector = columnHeaderTemplateSelector;
            return gridView;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridView.ColumnHeaderStringFormat"/> property of the current <see cref="GridView"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridView</typeparam>                                                                       
        /// <param name=" gridView">current <see cref="GridView"/></param>                                                          
        /// <param name="columnHeaderStringFormat">columnHeaderStringFormat value</param>                                                                            
        /// <returns>current gridView</returns>                                                                                    
        public static TType ColumnHeaderStringFormat<TType>(this TType gridView, String columnHeaderStringFormat) where TType : notnull, GridView
        {
            gridView.ColumnHeaderStringFormat = columnHeaderStringFormat;
            return gridView;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridView.AllowsColumnReorder"/> property of the current <see cref="GridView"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridView</typeparam>                                                                       
        /// <param name=" gridView">current <see cref="GridView"/></param>                                                          
        /// <param name="allowsColumnReorder">allowsColumnReorder value</param>                                                                            
        /// <returns>current gridView</returns>                                                                                    
        public static TType AllowsColumnReorder<TType>(this TType gridView, Boolean allowsColumnReorder) where TType : notnull, GridView
        {
            gridView.AllowsColumnReorder = allowsColumnReorder;
            return gridView;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridView.ColumnHeaderContextMenu"/> property of the current <see cref="GridView"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridView</typeparam>                                                                       
        /// <param name=" gridView">current <see cref="GridView"/></param>                                                          
        /// <param name="columnHeaderContextMenu">columnHeaderContextMenu value</param>                                                                            
        /// <returns>current gridView</returns>                                                                                    
        public static TType ColumnHeaderContextMenu<TType>(this TType gridView, ContextMenu columnHeaderContextMenu) where TType : notnull, GridView
        {
            gridView.ColumnHeaderContextMenu = columnHeaderContextMenu;
            return gridView;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridView.ColumnHeaderToolTip"/> property of the current <see cref="GridView"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridView</typeparam>                                                                       
        /// <param name=" gridView">current <see cref="GridView"/></param>                                                          
        /// <param name="columnHeaderToolTip">columnHeaderToolTip value</param>                                                                            
        /// <returns>current gridView</returns>                                                                                    
        public static TType ColumnHeaderToolTip<TType>(this TType gridView, Object columnHeaderToolTip) where TType : notnull, GridView
        {
            gridView.ColumnHeaderToolTip = columnHeaderToolTip;
            return gridView;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="GridViewColumn"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GridViewColumnFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewColumn.Header"/> property of the current <see cref="GridViewColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewColumn</typeparam>                                                                       
        /// <param name=" gridViewColumn">current <see cref="GridViewColumn"/></param>                                                          
        /// <param name="header">header value</param>                                                                            
        /// <returns>current gridViewColumn</returns>                                                                                    
        public static TType Header<TType>(this TType gridViewColumn, Object header) where TType : notnull, GridViewColumn
        {
            gridViewColumn.Header = header;
            return gridViewColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewColumn.HeaderContainerStyle"/> property of the current <see cref="GridViewColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewColumn</typeparam>                                                                       
        /// <param name=" gridViewColumn">current <see cref="GridViewColumn"/></param>                                                          
        /// <param name="headerContainerStyle">headerContainerStyle value</param>                                                                            
        /// <returns>current gridViewColumn</returns>                                                                                    
        public static TType HeaderContainerStyle<TType>(this TType gridViewColumn, Style headerContainerStyle) where TType : notnull, GridViewColumn
        {
            gridViewColumn.HeaderContainerStyle = headerContainerStyle;
            return gridViewColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewColumn.HeaderTemplate"/> property of the current <see cref="GridViewColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewColumn</typeparam>                                                                       
        /// <param name=" gridViewColumn">current <see cref="GridViewColumn"/></param>                                                          
        /// <param name="headerTemplate">headerTemplate value</param>                                                                            
        /// <returns>current gridViewColumn</returns>                                                                                    
        public static TType HeaderTemplate<TType>(this TType gridViewColumn, DataTemplate headerTemplate) where TType : notnull, GridViewColumn
        {
            gridViewColumn.HeaderTemplate = headerTemplate;
            return gridViewColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewColumn.HeaderTemplateSelector"/> property of the current <see cref="GridViewColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewColumn</typeparam>                                                                       
        /// <param name=" gridViewColumn">current <see cref="GridViewColumn"/></param>                                                          
        /// <param name="headerTemplateSelector">headerTemplateSelector value</param>                                                                            
        /// <returns>current gridViewColumn</returns>                                                                                    
        public static TType HeaderTemplateSelector<TType>(this TType gridViewColumn, DataTemplateSelector headerTemplateSelector) where TType : notnull, GridViewColumn
        {
            gridViewColumn.HeaderTemplateSelector = headerTemplateSelector;
            return gridViewColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewColumn.HeaderStringFormat"/> property of the current <see cref="GridViewColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewColumn</typeparam>                                                                       
        /// <param name=" gridViewColumn">current <see cref="GridViewColumn"/></param>                                                          
        /// <param name="headerStringFormat">headerStringFormat value</param>                                                                            
        /// <returns>current gridViewColumn</returns>                                                                                    
        public static TType HeaderStringFormat<TType>(this TType gridViewColumn, String headerStringFormat) where TType : notnull, GridViewColumn
        {
            gridViewColumn.HeaderStringFormat = headerStringFormat;
            return gridViewColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewColumn.DisplayMemberBinding"/> property of the current <see cref="GridViewColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewColumn</typeparam>                                                                       
        /// <param name=" gridViewColumn">current <see cref="GridViewColumn"/></param>                                                          
        /// <param name="displayMemberBinding">displayMemberBinding value</param>                                                                            
        /// <returns>current gridViewColumn</returns>                                                                                    
        public static TType DisplayMemberBinding<TType>(this TType gridViewColumn, BindingBase displayMemberBinding) where TType : notnull, GridViewColumn
        {
            gridViewColumn.DisplayMemberBinding = displayMemberBinding;
            return gridViewColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewColumn.CellTemplate"/> property of the current <see cref="GridViewColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewColumn</typeparam>                                                                       
        /// <param name=" gridViewColumn">current <see cref="GridViewColumn"/></param>                                                          
        /// <param name="cellTemplate">cellTemplate value</param>                                                                            
        /// <returns>current gridViewColumn</returns>                                                                                    
        public static TType CellTemplate<TType>(this TType gridViewColumn, DataTemplate cellTemplate) where TType : notnull, GridViewColumn
        {
            gridViewColumn.CellTemplate = cellTemplate;
            return gridViewColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewColumn.CellTemplateSelector"/> property of the current <see cref="GridViewColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewColumn</typeparam>                                                                       
        /// <param name=" gridViewColumn">current <see cref="GridViewColumn"/></param>                                                          
        /// <param name="cellTemplateSelector">cellTemplateSelector value</param>                                                                            
        /// <returns>current gridViewColumn</returns>                                                                                    
        public static TType CellTemplateSelector<TType>(this TType gridViewColumn, DataTemplateSelector cellTemplateSelector) where TType : notnull, GridViewColumn
        {
            gridViewColumn.CellTemplateSelector = cellTemplateSelector;
            return gridViewColumn;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewColumn.Width"/> property of the current <see cref="GridViewColumn"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewColumn</typeparam>                                                                       
        /// <param name=" gridViewColumn">current <see cref="GridViewColumn"/></param>                                                          
        /// <param name="width">width value</param>                                                                            
        /// <returns>current gridViewColumn</returns>                                                                                    
        public static TType Width<TType>(this TType gridViewColumn, Double width) where TType : notnull, GridViewColumn
        {
            gridViewColumn.Width = width;
            return gridViewColumn;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="GridViewHeaderRowPresenter"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GridViewHeaderRowPresenterFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewHeaderRowPresenter.ColumnHeaderContainerStyle"/> property of the current <see cref="GridViewHeaderRowPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewHeaderRowPresenter</typeparam>                                                                       
        /// <param name=" gridViewHeaderRowPresenter">current <see cref="GridViewHeaderRowPresenter"/></param>                                                          
        /// <param name="columnHeaderContainerStyle">columnHeaderContainerStyle value</param>                                                                            
        /// <returns>current gridViewHeaderRowPresenter</returns>                                                                                    
        public static TType ColumnHeaderContainerStyle<TType>(this TType gridViewHeaderRowPresenter, Style columnHeaderContainerStyle) where TType : notnull, GridViewHeaderRowPresenter
        {
            gridViewHeaderRowPresenter.ColumnHeaderContainerStyle = columnHeaderContainerStyle;
            return gridViewHeaderRowPresenter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewHeaderRowPresenter.ColumnHeaderTemplate"/> property of the current <see cref="GridViewHeaderRowPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewHeaderRowPresenter</typeparam>                                                                       
        /// <param name=" gridViewHeaderRowPresenter">current <see cref="GridViewHeaderRowPresenter"/></param>                                                          
        /// <param name="columnHeaderTemplate">columnHeaderTemplate value</param>                                                                            
        /// <returns>current gridViewHeaderRowPresenter</returns>                                                                                    
        public static TType ColumnHeaderTemplate<TType>(this TType gridViewHeaderRowPresenter, DataTemplate columnHeaderTemplate) where TType : notnull, GridViewHeaderRowPresenter
        {
            gridViewHeaderRowPresenter.ColumnHeaderTemplate = columnHeaderTemplate;
            return gridViewHeaderRowPresenter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewHeaderRowPresenter.ColumnHeaderTemplateSelector"/> property of the current <see cref="GridViewHeaderRowPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewHeaderRowPresenter</typeparam>                                                                       
        /// <param name=" gridViewHeaderRowPresenter">current <see cref="GridViewHeaderRowPresenter"/></param>                                                          
        /// <param name="columnHeaderTemplateSelector">columnHeaderTemplateSelector value</param>                                                                            
        /// <returns>current gridViewHeaderRowPresenter</returns>                                                                                    
        public static TType ColumnHeaderTemplateSelector<TType>(this TType gridViewHeaderRowPresenter, DataTemplateSelector columnHeaderTemplateSelector) where TType : notnull, GridViewHeaderRowPresenter
        {
            gridViewHeaderRowPresenter.ColumnHeaderTemplateSelector = columnHeaderTemplateSelector;
            return gridViewHeaderRowPresenter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewHeaderRowPresenter.ColumnHeaderStringFormat"/> property of the current <see cref="GridViewHeaderRowPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewHeaderRowPresenter</typeparam>                                                                       
        /// <param name=" gridViewHeaderRowPresenter">current <see cref="GridViewHeaderRowPresenter"/></param>                                                          
        /// <param name="columnHeaderStringFormat">columnHeaderStringFormat value</param>                                                                            
        /// <returns>current gridViewHeaderRowPresenter</returns>                                                                                    
        public static TType ColumnHeaderStringFormat<TType>(this TType gridViewHeaderRowPresenter, String columnHeaderStringFormat) where TType : notnull, GridViewHeaderRowPresenter
        {
            gridViewHeaderRowPresenter.ColumnHeaderStringFormat = columnHeaderStringFormat;
            return gridViewHeaderRowPresenter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewHeaderRowPresenter.AllowsColumnReorder"/> property of the current <see cref="GridViewHeaderRowPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewHeaderRowPresenter</typeparam>                                                                       
        /// <param name=" gridViewHeaderRowPresenter">current <see cref="GridViewHeaderRowPresenter"/></param>                                                          
        /// <param name="allowsColumnReorder">allowsColumnReorder value</param>                                                                            
        /// <returns>current gridViewHeaderRowPresenter</returns>                                                                                    
        public static TType AllowsColumnReorder<TType>(this TType gridViewHeaderRowPresenter, Boolean allowsColumnReorder) where TType : notnull, GridViewHeaderRowPresenter
        {
            gridViewHeaderRowPresenter.AllowsColumnReorder = allowsColumnReorder;
            return gridViewHeaderRowPresenter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewHeaderRowPresenter.ColumnHeaderContextMenu"/> property of the current <see cref="GridViewHeaderRowPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewHeaderRowPresenter</typeparam>                                                                       
        /// <param name=" gridViewHeaderRowPresenter">current <see cref="GridViewHeaderRowPresenter"/></param>                                                          
        /// <param name="columnHeaderContextMenu">columnHeaderContextMenu value</param>                                                                            
        /// <returns>current gridViewHeaderRowPresenter</returns>                                                                                    
        public static TType ColumnHeaderContextMenu<TType>(this TType gridViewHeaderRowPresenter, ContextMenu columnHeaderContextMenu) where TType : notnull, GridViewHeaderRowPresenter
        {
            gridViewHeaderRowPresenter.ColumnHeaderContextMenu = columnHeaderContextMenu;
            return gridViewHeaderRowPresenter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewHeaderRowPresenter.ColumnHeaderToolTip"/> property of the current <see cref="GridViewHeaderRowPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewHeaderRowPresenter</typeparam>                                                                       
        /// <param name=" gridViewHeaderRowPresenter">current <see cref="GridViewHeaderRowPresenter"/></param>                                                          
        /// <param name="columnHeaderToolTip">columnHeaderToolTip value</param>                                                                            
        /// <returns>current gridViewHeaderRowPresenter</returns>                                                                                    
        public static TType ColumnHeaderToolTip<TType>(this TType gridViewHeaderRowPresenter, Object columnHeaderToolTip) where TType : notnull, GridViewHeaderRowPresenter
        {
            gridViewHeaderRowPresenter.ColumnHeaderToolTip = columnHeaderToolTip;
            return gridViewHeaderRowPresenter;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="GridViewRowPresenter"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GridViewRowPresenterFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewRowPresenter.Content"/> property of the current <see cref="GridViewRowPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewRowPresenter</typeparam>                                                                       
        /// <param name=" gridViewRowPresenter">current <see cref="GridViewRowPresenter"/></param>                                                          
        /// <param name="content">content value</param>                                                                            
        /// <returns>current gridViewRowPresenter</returns>                                                                                    
        public static TType Content<TType>(this TType gridViewRowPresenter, Object content) where TType : notnull, GridViewRowPresenter
        {
            gridViewRowPresenter.Content = content;
            return gridViewRowPresenter;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="HeaderedContentControl"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class HeaderedContentControlFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="HeaderedContentControl.Header"/> property of the current <see cref="HeaderedContentControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">HeaderedContentControl</typeparam>                                                                       
        /// <param name=" headeredContentControl">current <see cref="HeaderedContentControl"/></param>                                                          
        /// <param name="header">header value</param>                                                                            
        /// <returns>current headeredContentControl</returns>                                                                                    
        public static TType Header<TType>(this TType headeredContentControl, Object header) where TType : notnull, HeaderedContentControl
        {
            headeredContentControl.Header = header;
            return headeredContentControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="HeaderedContentControl.HeaderTemplate"/> property of the current <see cref="HeaderedContentControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">HeaderedContentControl</typeparam>                                                                       
        /// <param name=" headeredContentControl">current <see cref="HeaderedContentControl"/></param>                                                          
        /// <param name="headerTemplate">headerTemplate value</param>                                                                            
        /// <returns>current headeredContentControl</returns>                                                                                    
        public static TType HeaderTemplate<TType>(this TType headeredContentControl, DataTemplate headerTemplate) where TType : notnull, HeaderedContentControl
        {
            headeredContentControl.HeaderTemplate = headerTemplate;
            return headeredContentControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="HeaderedContentControl.HeaderTemplateSelector"/> property of the current <see cref="HeaderedContentControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">HeaderedContentControl</typeparam>                                                                       
        /// <param name=" headeredContentControl">current <see cref="HeaderedContentControl"/></param>                                                          
        /// <param name="headerTemplateSelector">headerTemplateSelector value</param>                                                                            
        /// <returns>current headeredContentControl</returns>                                                                                    
        public static TType HeaderTemplateSelector<TType>(this TType headeredContentControl, DataTemplateSelector headerTemplateSelector) where TType : notnull, HeaderedContentControl
        {
            headeredContentControl.HeaderTemplateSelector = headerTemplateSelector;
            return headeredContentControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="HeaderedContentControl.HeaderStringFormat"/> property of the current <see cref="HeaderedContentControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">HeaderedContentControl</typeparam>                                                                       
        /// <param name=" headeredContentControl">current <see cref="HeaderedContentControl"/></param>                                                          
        /// <param name="headerStringFormat">headerStringFormat value</param>                                                                            
        /// <returns>current headeredContentControl</returns>                                                                                    
        public static TType HeaderStringFormat<TType>(this TType headeredContentControl, String headerStringFormat) where TType : notnull, HeaderedContentControl
        {
            headeredContentControl.HeaderStringFormat = headerStringFormat;
            return headeredContentControl;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="HeaderedItemsControl"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class HeaderedItemsControlFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="HeaderedItemsControl.Header"/> property of the current <see cref="HeaderedItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">HeaderedItemsControl</typeparam>                                                                       
        /// <param name=" headeredItemsControl">current <see cref="HeaderedItemsControl"/></param>                                                          
        /// <param name="header">header value</param>                                                                            
        /// <returns>current headeredItemsControl</returns>                                                                                    
        public static TType Header<TType>(this TType headeredItemsControl, Object header) where TType : notnull, HeaderedItemsControl
        {
            headeredItemsControl.Header = header;
            return headeredItemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="HeaderedItemsControl.HeaderTemplate"/> property of the current <see cref="HeaderedItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">HeaderedItemsControl</typeparam>                                                                       
        /// <param name=" headeredItemsControl">current <see cref="HeaderedItemsControl"/></param>                                                          
        /// <param name="headerTemplate">headerTemplate value</param>                                                                            
        /// <returns>current headeredItemsControl</returns>                                                                                    
        public static TType HeaderTemplate<TType>(this TType headeredItemsControl, DataTemplate headerTemplate) where TType : notnull, HeaderedItemsControl
        {
            headeredItemsControl.HeaderTemplate = headerTemplate;
            return headeredItemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="HeaderedItemsControl.HeaderTemplateSelector"/> property of the current <see cref="HeaderedItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">HeaderedItemsControl</typeparam>                                                                       
        /// <param name=" headeredItemsControl">current <see cref="HeaderedItemsControl"/></param>                                                          
        /// <param name="headerTemplateSelector">headerTemplateSelector value</param>                                                                            
        /// <returns>current headeredItemsControl</returns>                                                                                    
        public static TType HeaderTemplateSelector<TType>(this TType headeredItemsControl, DataTemplateSelector headerTemplateSelector) where TType : notnull, HeaderedItemsControl
        {
            headeredItemsControl.HeaderTemplateSelector = headerTemplateSelector;
            return headeredItemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="HeaderedItemsControl.HeaderStringFormat"/> property of the current <see cref="HeaderedItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">HeaderedItemsControl</typeparam>                                                                       
        /// <param name=" headeredItemsControl">current <see cref="HeaderedItemsControl"/></param>                                                          
        /// <param name="headerStringFormat">headerStringFormat value</param>                                                                            
        /// <returns>current headeredItemsControl</returns>                                                                                    
        public static TType HeaderStringFormat<TType>(this TType headeredItemsControl, String headerStringFormat) where TType : notnull, HeaderedItemsControl
        {
            headeredItemsControl.HeaderStringFormat = headerStringFormat;
            return headeredItemsControl;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Image"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ImageFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Image.Source"/> property of the current <see cref="Image"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Image</typeparam>                                                                       
        /// <param name=" image">current <see cref="Image"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current image</returns>                                                                                    
        public static TType Source<TType>(this TType image, ImageSource source) where TType : notnull, Image
        {
            image.Source = source;
            return image;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Image.Stretch"/> property of the current <see cref="Image"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Image</typeparam>                                                                       
        /// <param name=" image">current <see cref="Image"/></param>                                                          
        /// <param name="stretch">stretch value</param>                                                                            
        /// <returns>current image</returns>                                                                                    
        public static TType Stretch<TType>(this TType image, Stretch stretch) where TType : notnull, Image
        {
            image.Stretch = stretch;
            return image;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Image.StretchDirection"/> property of the current <see cref="Image"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Image</typeparam>                                                                       
        /// <param name=" image">current <see cref="Image"/></param>                                                          
        /// <param name="stretchDirection">stretchDirection value</param>                                                                            
        /// <returns>current image</returns>                                                                                    
        public static TType StretchDirection<TType>(this TType image, StretchDirection stretchDirection) where TType : notnull, Image
        {
            image.StretchDirection = stretchDirection;
            return image;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="InkCanvas"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class InkCanvasFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="InkCanvas.Background"/> property of the current <see cref="InkCanvas"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InkCanvas</typeparam>                                                                       
        /// <param name=" inkCanvas">current <see cref="InkCanvas"/></param>                                                          
        /// <param name="background">background value</param>                                                                            
        /// <returns>current inkCanvas</returns>                                                                                    
        public static TType Background<TType>(this TType inkCanvas, Brush background) where TType : notnull, InkCanvas
        {
            inkCanvas.Background = background;
            return inkCanvas;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="InkCanvas.Strokes"/> property of the current <see cref="InkCanvas"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InkCanvas</typeparam>                                                                       
        /// <param name=" inkCanvas">current <see cref="InkCanvas"/></param>                                                          
        /// <param name="strokes">strokes value</param>                                                                            
        /// <returns>current inkCanvas</returns>                                                                                    
        public static TType Strokes<TType>(this TType inkCanvas, StrokeCollection strokes) where TType : notnull, InkCanvas
        {
            inkCanvas.Strokes = strokes;
            return inkCanvas;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="InkCanvas.DefaultDrawingAttributes"/> property of the current <see cref="InkCanvas"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InkCanvas</typeparam>                                                                       
        /// <param name=" inkCanvas">current <see cref="InkCanvas"/></param>                                                          
        /// <param name="defaultDrawingAttributes">defaultDrawingAttributes value</param>                                                                            
        /// <returns>current inkCanvas</returns>                                                                                    
        public static TType DefaultDrawingAttributes<TType>(this TType inkCanvas, DrawingAttributes defaultDrawingAttributes) where TType : notnull, InkCanvas
        {
            inkCanvas.DefaultDrawingAttributes = defaultDrawingAttributes;
            return inkCanvas;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="InkCanvas.EraserShape"/> property of the current <see cref="InkCanvas"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InkCanvas</typeparam>                                                                       
        /// <param name=" inkCanvas">current <see cref="InkCanvas"/></param>                                                          
        /// <param name="eraserShape">eraserShape value</param>                                                                            
        /// <returns>current inkCanvas</returns>                                                                                    
        public static TType EraserShape<TType>(this TType inkCanvas, StylusShape eraserShape) where TType : notnull, InkCanvas
        {
            inkCanvas.EraserShape = eraserShape;
            return inkCanvas;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="InkCanvas.EditingMode"/> property of the current <see cref="InkCanvas"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InkCanvas</typeparam>                                                                       
        /// <param name=" inkCanvas">current <see cref="InkCanvas"/></param>                                                          
        /// <param name="editingMode">editingMode value</param>                                                                            
        /// <returns>current inkCanvas</returns>                                                                                    
        public static TType EditingMode<TType>(this TType inkCanvas, InkCanvasEditingMode editingMode) where TType : notnull, InkCanvas
        {
            inkCanvas.EditingMode = editingMode;
            return inkCanvas;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="InkCanvas.EditingModeInverted"/> property of the current <see cref="InkCanvas"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InkCanvas</typeparam>                                                                       
        /// <param name=" inkCanvas">current <see cref="InkCanvas"/></param>                                                          
        /// <param name="editingModeInverted">editingModeInverted value</param>                                                                            
        /// <returns>current inkCanvas</returns>                                                                                    
        public static TType EditingModeInverted<TType>(this TType inkCanvas, InkCanvasEditingMode editingModeInverted) where TType : notnull, InkCanvas
        {
            inkCanvas.EditingModeInverted = editingModeInverted;
            return inkCanvas;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="InkCanvas.UseCustomCursor"/> property of the current <see cref="InkCanvas"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InkCanvas</typeparam>                                                                       
        /// <param name=" inkCanvas">current <see cref="InkCanvas"/></param>                                                          
        /// <param name="useCustomCursor">useCustomCursor value</param>                                                                            
        /// <returns>current inkCanvas</returns>                                                                                    
        public static TType UseCustomCursor<TType>(this TType inkCanvas, Boolean useCustomCursor) where TType : notnull, InkCanvas
        {
            inkCanvas.UseCustomCursor = useCustomCursor;
            return inkCanvas;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="InkCanvas.MoveEnabled"/> property of the current <see cref="InkCanvas"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InkCanvas</typeparam>                                                                       
        /// <param name=" inkCanvas">current <see cref="InkCanvas"/></param>                                                          
        /// <param name="moveEnabled">moveEnabled value</param>                                                                            
        /// <returns>current inkCanvas</returns>                                                                                    
        public static TType MoveEnabled<TType>(this TType inkCanvas, Boolean moveEnabled) where TType : notnull, InkCanvas
        {
            inkCanvas.MoveEnabled = moveEnabled;
            return inkCanvas;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="InkCanvas.ResizeEnabled"/> property of the current <see cref="InkCanvas"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InkCanvas</typeparam>                                                                       
        /// <param name=" inkCanvas">current <see cref="InkCanvas"/></param>                                                          
        /// <param name="resizeEnabled">resizeEnabled value</param>                                                                            
        /// <returns>current inkCanvas</returns>                                                                                    
        public static TType ResizeEnabled<TType>(this TType inkCanvas, Boolean resizeEnabled) where TType : notnull, InkCanvas
        {
            inkCanvas.ResizeEnabled = resizeEnabled;
            return inkCanvas;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="InkCanvas.DefaultStylusPointDescription"/> property of the current <see cref="InkCanvas"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InkCanvas</typeparam>                                                                       
        /// <param name=" inkCanvas">current <see cref="InkCanvas"/></param>                                                          
        /// <param name="defaultStylusPointDescription">defaultStylusPointDescription value</param>                                                                            
        /// <returns>current inkCanvas</returns>                                                                                    
        public static TType DefaultStylusPointDescription<TType>(this TType inkCanvas, StylusPointDescription defaultStylusPointDescription) where TType : notnull, InkCanvas
        {
            inkCanvas.DefaultStylusPointDescription = defaultStylusPointDescription;
            return inkCanvas;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="InkCanvas.PreferredPasteFormats"/> property of the current <see cref="InkCanvas"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InkCanvas</typeparam>                                                                       
        /// <param name=" inkCanvas">current <see cref="InkCanvas"/></param>                                                          
        /// <param name="preferredPasteFormats">preferredPasteFormats value</param>                                                                            
        /// <returns>current inkCanvas</returns>                                                                                    
        public static TType PreferredPasteFormats<TType>(this TType inkCanvas, IEnumerable<InkCanvasClipboardFormat> preferredPasteFormats) where TType : notnull, InkCanvas
        {
            inkCanvas.PreferredPasteFormats = preferredPasteFormats;
            return inkCanvas;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="InkPresenter"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class InkPresenterFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="InkPresenter.Strokes"/> property of the current <see cref="InkPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InkPresenter</typeparam>                                                                       
        /// <param name=" inkPresenter">current <see cref="InkPresenter"/></param>                                                          
        /// <param name="strokes">strokes value</param>                                                                            
        /// <returns>current inkPresenter</returns>                                                                                    
        public static TType Strokes<TType>(this TType inkPresenter, StrokeCollection strokes) where TType : notnull, InkPresenter
        {
            inkPresenter.Strokes = strokes;
            return inkPresenter;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ItemsControl"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ItemsControlFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ItemsControl.ItemsSource"/> property of the current <see cref="ItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ItemsControl</typeparam>                                                                       
        /// <param name=" itemsControl">current <see cref="ItemsControl"/></param>                                                          
        /// <param name="itemsSource">itemsSource value</param>                                                                            
        /// <returns>current itemsControl</returns>                                                                                    
        public static TType ItemsSource<TType>(this TType itemsControl, IEnumerable itemsSource) where TType : notnull, ItemsControl
        {
            itemsControl.ItemsSource = itemsSource;
            return itemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ItemsControl.DisplayMemberPath"/> property of the current <see cref="ItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ItemsControl</typeparam>                                                                       
        /// <param name=" itemsControl">current <see cref="ItemsControl"/></param>                                                          
        /// <param name="displayMemberPath">displayMemberPath value</param>                                                                            
        /// <returns>current itemsControl</returns>                                                                                    
        public static TType DisplayMemberPath<TType>(this TType itemsControl, String displayMemberPath) where TType : notnull, ItemsControl
        {
            itemsControl.DisplayMemberPath = displayMemberPath;
            return itemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ItemsControl.ItemTemplate"/> property of the current <see cref="ItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ItemsControl</typeparam>                                                                       
        /// <param name=" itemsControl">current <see cref="ItemsControl"/></param>                                                          
        /// <param name="itemTemplate">itemTemplate value</param>                                                                            
        /// <returns>current itemsControl</returns>                                                                                    
        public static TType ItemTemplate<TType>(this TType itemsControl, DataTemplate itemTemplate) where TType : notnull, ItemsControl
        {
            itemsControl.ItemTemplate = itemTemplate;
            return itemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ItemsControl.ItemTemplateSelector"/> property of the current <see cref="ItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ItemsControl</typeparam>                                                                       
        /// <param name=" itemsControl">current <see cref="ItemsControl"/></param>                                                          
        /// <param name="itemTemplateSelector">itemTemplateSelector value</param>                                                                            
        /// <returns>current itemsControl</returns>                                                                                    
        public static TType ItemTemplateSelector<TType>(this TType itemsControl, DataTemplateSelector itemTemplateSelector) where TType : notnull, ItemsControl
        {
            itemsControl.ItemTemplateSelector = itemTemplateSelector;
            return itemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ItemsControl.ItemStringFormat"/> property of the current <see cref="ItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ItemsControl</typeparam>                                                                       
        /// <param name=" itemsControl">current <see cref="ItemsControl"/></param>                                                          
        /// <param name="itemStringFormat">itemStringFormat value</param>                                                                            
        /// <returns>current itemsControl</returns>                                                                                    
        public static TType ItemStringFormat<TType>(this TType itemsControl, String itemStringFormat) where TType : notnull, ItemsControl
        {
            itemsControl.ItemStringFormat = itemStringFormat;
            return itemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ItemsControl.ItemBindingGroup"/> property of the current <see cref="ItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ItemsControl</typeparam>                                                                       
        /// <param name=" itemsControl">current <see cref="ItemsControl"/></param>                                                          
        /// <param name="itemBindingGroup">itemBindingGroup value</param>                                                                            
        /// <returns>current itemsControl</returns>                                                                                    
        public static TType ItemBindingGroup<TType>(this TType itemsControl, BindingGroup itemBindingGroup) where TType : notnull, ItemsControl
        {
            itemsControl.ItemBindingGroup = itemBindingGroup;
            return itemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ItemsControl.ItemContainerStyle"/> property of the current <see cref="ItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ItemsControl</typeparam>                                                                       
        /// <param name=" itemsControl">current <see cref="ItemsControl"/></param>                                                          
        /// <param name="itemContainerStyle">itemContainerStyle value</param>                                                                            
        /// <returns>current itemsControl</returns>                                                                                    
        public static TType ItemContainerStyle<TType>(this TType itemsControl, Style itemContainerStyle) where TType : notnull, ItemsControl
        {
            itemsControl.ItemContainerStyle = itemContainerStyle;
            return itemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ItemsControl.ItemContainerStyleSelector"/> property of the current <see cref="ItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ItemsControl</typeparam>                                                                       
        /// <param name=" itemsControl">current <see cref="ItemsControl"/></param>                                                          
        /// <param name="itemContainerStyleSelector">itemContainerStyleSelector value</param>                                                                            
        /// <returns>current itemsControl</returns>                                                                                    
        public static TType ItemContainerStyleSelector<TType>(this TType itemsControl, StyleSelector itemContainerStyleSelector) where TType : notnull, ItemsControl
        {
            itemsControl.ItemContainerStyleSelector = itemContainerStyleSelector;
            return itemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ItemsControl.ItemsPanel"/> property of the current <see cref="ItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ItemsControl</typeparam>                                                                       
        /// <param name=" itemsControl">current <see cref="ItemsControl"/></param>                                                          
        /// <param name="itemsPanel">itemsPanel value</param>                                                                            
        /// <returns>current itemsControl</returns>                                                                                    
        public static TType ItemsPanel<TType>(this TType itemsControl, ItemsPanelTemplate itemsPanel) where TType : notnull, ItemsControl
        {
            itemsControl.ItemsPanel = itemsPanel;
            return itemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ItemsControl.GroupStyleSelector"/> property of the current <see cref="ItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ItemsControl</typeparam>                                                                       
        /// <param name=" itemsControl">current <see cref="ItemsControl"/></param>                                                          
        /// <param name="groupStyleSelector">groupStyleSelector value</param>                                                                            
        /// <returns>current itemsControl</returns>                                                                                    
        public static TType GroupStyleSelector<TType>(this TType itemsControl, GroupStyleSelector groupStyleSelector) where TType : notnull, ItemsControl
        {
            itemsControl.GroupStyleSelector = groupStyleSelector;
            return itemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ItemsControl.AlternationCount"/> property of the current <see cref="ItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ItemsControl</typeparam>                                                                       
        /// <param name=" itemsControl">current <see cref="ItemsControl"/></param>                                                          
        /// <param name="alternationCount">alternationCount value</param>                                                                            
        /// <returns>current itemsControl</returns>                                                                                    
        public static TType AlternationCount<TType>(this TType itemsControl, Int32 alternationCount) where TType : notnull, ItemsControl
        {
            itemsControl.AlternationCount = alternationCount;
            return itemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ItemsControl.IsTextSearchEnabled"/> property of the current <see cref="ItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ItemsControl</typeparam>                                                                       
        /// <param name=" itemsControl">current <see cref="ItemsControl"/></param>                                                          
        /// <param name="isTextSearchEnabled">isTextSearchEnabled value</param>                                                                            
        /// <returns>current itemsControl</returns>                                                                                    
        public static TType IsTextSearchEnabled<TType>(this TType itemsControl, Boolean isTextSearchEnabled) where TType : notnull, ItemsControl
        {
            itemsControl.IsTextSearchEnabled = isTextSearchEnabled;
            return itemsControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ItemsControl.IsTextSearchCaseSensitive"/> property of the current <see cref="ItemsControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ItemsControl</typeparam>                                                                       
        /// <param name=" itemsControl">current <see cref="ItemsControl"/></param>                                                          
        /// <param name="isTextSearchCaseSensitive">isTextSearchCaseSensitive value</param>                                                                            
        /// <returns>current itemsControl</returns>                                                                                    
        public static TType IsTextSearchCaseSensitive<TType>(this TType itemsControl, Boolean isTextSearchCaseSensitive) where TType : notnull, ItemsControl
        {
            itemsControl.IsTextSearchCaseSensitive = isTextSearchCaseSensitive;
            return itemsControl;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Label"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class LabelFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Label.Target"/> property of the current <see cref="Label"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Label</typeparam>                                                                       
        /// <param name=" label">current <see cref="Label"/></param>                                                          
        /// <param name="target">target value</param>                                                                            
        /// <returns>current label</returns>                                                                                    
        public static TType Target<TType>(this TType label, UIElement target) where TType : notnull, Label
        {
            label.Target = target;
            return label;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ListBox"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ListBoxFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ListBox.SelectionMode"/> property of the current <see cref="ListBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ListBox</typeparam>                                                                       
        /// <param name=" listBox">current <see cref="ListBox"/></param>                                                          
        /// <param name="selectionMode">selectionMode value</param>                                                                            
        /// <returns>current listBox</returns>                                                                                    
        public static TType SelectionMode<TType>(this TType listBox, SelectionMode selectionMode) where TType : notnull, ListBox
        {
            listBox.SelectionMode = selectionMode;
            return listBox;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ListBoxItem"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ListBoxItemFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ListBoxItem.IsSelected"/> property of the current <see cref="ListBoxItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ListBoxItem</typeparam>                                                                       
        /// <param name=" listBoxItem">current <see cref="ListBoxItem"/></param>                                                          
        /// <param name="isSelected">isSelected value</param>                                                                            
        /// <returns>current listBoxItem</returns>                                                                                    
        public static TType IsSelected<TType>(this TType listBoxItem, Boolean isSelected) where TType : notnull, ListBoxItem
        {
            listBoxItem.IsSelected = isSelected;
            return listBoxItem;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ListView"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ListViewFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ListView.View"/> property of the current <see cref="ListView"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ListView</typeparam>                                                                       
        /// <param name=" listView">current <see cref="ListView"/></param>                                                          
        /// <param name="view">view value</param>                                                                            
        /// <returns>current listView</returns>                                                                                    
        public static TType View<TType>(this TType listView, ViewBase view) where TType : notnull, ListView
        {
            listView.View = view;
            return listView;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="MediaElement"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MediaElementFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaElement.Source"/> property of the current <see cref="MediaElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaElement</typeparam>                                                                       
        /// <param name=" mediaElement">current <see cref="MediaElement"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current mediaElement</returns>                                                                                    
        public static TType Source<TType>(this TType mediaElement, Uri source) where TType : notnull, MediaElement
        {
            mediaElement.Source = source;
            return mediaElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaElement.Clock"/> property of the current <see cref="MediaElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaElement</typeparam>                                                                       
        /// <param name=" mediaElement">current <see cref="MediaElement"/></param>                                                          
        /// <param name="clock">clock value</param>                                                                            
        /// <returns>current mediaElement</returns>                                                                                    
        public static TType Clock<TType>(this TType mediaElement, MediaClock clock) where TType : notnull, MediaElement
        {
            mediaElement.Clock = clock;
            return mediaElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaElement.Stretch"/> property of the current <see cref="MediaElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaElement</typeparam>                                                                       
        /// <param name=" mediaElement">current <see cref="MediaElement"/></param>                                                          
        /// <param name="stretch">stretch value</param>                                                                            
        /// <returns>current mediaElement</returns>                                                                                    
        public static TType Stretch<TType>(this TType mediaElement, Stretch stretch) where TType : notnull, MediaElement
        {
            mediaElement.Stretch = stretch;
            return mediaElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaElement.StretchDirection"/> property of the current <see cref="MediaElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaElement</typeparam>                                                                       
        /// <param name=" mediaElement">current <see cref="MediaElement"/></param>                                                          
        /// <param name="stretchDirection">stretchDirection value</param>                                                                            
        /// <returns>current mediaElement</returns>                                                                                    
        public static TType StretchDirection<TType>(this TType mediaElement, StretchDirection stretchDirection) where TType : notnull, MediaElement
        {
            mediaElement.StretchDirection = stretchDirection;
            return mediaElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaElement.Volume"/> property of the current <see cref="MediaElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaElement</typeparam>                                                                       
        /// <param name=" mediaElement">current <see cref="MediaElement"/></param>                                                          
        /// <param name="volume">volume value</param>                                                                            
        /// <returns>current mediaElement</returns>                                                                                    
        public static TType Volume<TType>(this TType mediaElement, Double volume) where TType : notnull, MediaElement
        {
            mediaElement.Volume = volume;
            return mediaElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaElement.Balance"/> property of the current <see cref="MediaElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaElement</typeparam>                                                                       
        /// <param name=" mediaElement">current <see cref="MediaElement"/></param>                                                          
        /// <param name="balance">balance value</param>                                                                            
        /// <returns>current mediaElement</returns>                                                                                    
        public static TType Balance<TType>(this TType mediaElement, Double balance) where TType : notnull, MediaElement
        {
            mediaElement.Balance = balance;
            return mediaElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaElement.IsMuted"/> property of the current <see cref="MediaElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaElement</typeparam>                                                                       
        /// <param name=" mediaElement">current <see cref="MediaElement"/></param>                                                          
        /// <param name="isMuted">isMuted value</param>                                                                            
        /// <returns>current mediaElement</returns>                                                                                    
        public static TType IsMuted<TType>(this TType mediaElement, Boolean isMuted) where TType : notnull, MediaElement
        {
            mediaElement.IsMuted = isMuted;
            return mediaElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaElement.ScrubbingEnabled"/> property of the current <see cref="MediaElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaElement</typeparam>                                                                       
        /// <param name=" mediaElement">current <see cref="MediaElement"/></param>                                                          
        /// <param name="scrubbingEnabled">scrubbingEnabled value</param>                                                                            
        /// <returns>current mediaElement</returns>                                                                                    
        public static TType ScrubbingEnabled<TType>(this TType mediaElement, Boolean scrubbingEnabled) where TType : notnull, MediaElement
        {
            mediaElement.ScrubbingEnabled = scrubbingEnabled;
            return mediaElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaElement.UnloadedBehavior"/> property of the current <see cref="MediaElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaElement</typeparam>                                                                       
        /// <param name=" mediaElement">current <see cref="MediaElement"/></param>                                                          
        /// <param name="unloadedBehavior">unloadedBehavior value</param>                                                                            
        /// <returns>current mediaElement</returns>                                                                                    
        public static TType UnloadedBehavior<TType>(this TType mediaElement, MediaState unloadedBehavior) where TType : notnull, MediaElement
        {
            mediaElement.UnloadedBehavior = unloadedBehavior;
            return mediaElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaElement.LoadedBehavior"/> property of the current <see cref="MediaElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaElement</typeparam>                                                                       
        /// <param name=" mediaElement">current <see cref="MediaElement"/></param>                                                          
        /// <param name="loadedBehavior">loadedBehavior value</param>                                                                            
        /// <returns>current mediaElement</returns>                                                                                    
        public static TType LoadedBehavior<TType>(this TType mediaElement, MediaState loadedBehavior) where TType : notnull, MediaElement
        {
            mediaElement.LoadedBehavior = loadedBehavior;
            return mediaElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaElement.Position"/> property of the current <see cref="MediaElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaElement</typeparam>                                                                       
        /// <param name=" mediaElement">current <see cref="MediaElement"/></param>                                                          
        /// <param name="position">position value</param>                                                                            
        /// <returns>current mediaElement</returns>                                                                                    
        public static TType Position<TType>(this TType mediaElement, TimeSpan position) where TType : notnull, MediaElement
        {
            mediaElement.Position = position;
            return mediaElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaElement.SpeedRatio"/> property of the current <see cref="MediaElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaElement</typeparam>                                                                       
        /// <param name=" mediaElement">current <see cref="MediaElement"/></param>                                                          
        /// <param name="speedRatio">speedRatio value</param>                                                                            
        /// <returns>current mediaElement</returns>                                                                                    
        public static TType SpeedRatio<TType>(this TType mediaElement, Double speedRatio) where TType : notnull, MediaElement
        {
            mediaElement.SpeedRatio = speedRatio;
            return mediaElement;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Menu"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MenuFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Menu.IsMainMenu"/> property of the current <see cref="Menu"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Menu</typeparam>                                                                       
        /// <param name=" menu">current <see cref="Menu"/></param>                                                          
        /// <param name="isMainMenu">isMainMenu value</param>                                                                            
        /// <returns>current menu</returns>                                                                                    
        public static TType IsMainMenu<TType>(this TType menu, Boolean isMainMenu) where TType : notnull, Menu
        {
            menu.IsMainMenu = isMainMenu;
            return menu;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="MenuItem"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MenuItemFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="MenuItem.Command"/> property of the current <see cref="MenuItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MenuItem</typeparam>                                                                       
        /// <param name=" menuItem">current <see cref="MenuItem"/></param>                                                          
        /// <param name="command">command value</param>                                                                            
        /// <returns>current menuItem</returns>                                                                                    
        public static TType Command<TType>(this TType menuItem, ICommand command) where TType : notnull, MenuItem
        {
            menuItem.Command = command;
            return menuItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MenuItem.CommandParameter"/> property of the current <see cref="MenuItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MenuItem</typeparam>                                                                       
        /// <param name=" menuItem">current <see cref="MenuItem"/></param>                                                          
        /// <param name="commandParameter">commandParameter value</param>                                                                            
        /// <returns>current menuItem</returns>                                                                                    
        public static TType CommandParameter<TType>(this TType menuItem, Object commandParameter) where TType : notnull, MenuItem
        {
            menuItem.CommandParameter = commandParameter;
            return menuItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MenuItem.CommandTarget"/> property of the current <see cref="MenuItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MenuItem</typeparam>                                                                       
        /// <param name=" menuItem">current <see cref="MenuItem"/></param>                                                          
        /// <param name="commandTarget">commandTarget value</param>                                                                            
        /// <returns>current menuItem</returns>                                                                                    
        public static TType CommandTarget<TType>(this TType menuItem, IInputElement commandTarget) where TType : notnull, MenuItem
        {
            menuItem.CommandTarget = commandTarget;
            return menuItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MenuItem.IsSubmenuOpen"/> property of the current <see cref="MenuItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MenuItem</typeparam>                                                                       
        /// <param name=" menuItem">current <see cref="MenuItem"/></param>                                                          
        /// <param name="isSubmenuOpen">isSubmenuOpen value</param>                                                                            
        /// <returns>current menuItem</returns>                                                                                    
        public static TType IsSubmenuOpen<TType>(this TType menuItem, Boolean isSubmenuOpen) where TType : notnull, MenuItem
        {
            menuItem.IsSubmenuOpen = isSubmenuOpen;
            return menuItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MenuItem.IsCheckable"/> property of the current <see cref="MenuItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MenuItem</typeparam>                                                                       
        /// <param name=" menuItem">current <see cref="MenuItem"/></param>                                                          
        /// <param name="isCheckable">isCheckable value</param>                                                                            
        /// <returns>current menuItem</returns>                                                                                    
        public static TType IsCheckable<TType>(this TType menuItem, Boolean isCheckable) where TType : notnull, MenuItem
        {
            menuItem.IsCheckable = isCheckable;
            return menuItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MenuItem.IsChecked"/> property of the current <see cref="MenuItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MenuItem</typeparam>                                                                       
        /// <param name=" menuItem">current <see cref="MenuItem"/></param>                                                          
        /// <param name="isChecked">isChecked value</param>                                                                            
        /// <returns>current menuItem</returns>                                                                                    
        public static TType IsChecked<TType>(this TType menuItem, Boolean isChecked) where TType : notnull, MenuItem
        {
            menuItem.IsChecked = isChecked;
            return menuItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MenuItem.StaysOpenOnClick"/> property of the current <see cref="MenuItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MenuItem</typeparam>                                                                       
        /// <param name=" menuItem">current <see cref="MenuItem"/></param>                                                          
        /// <param name="staysOpenOnClick">staysOpenOnClick value</param>                                                                            
        /// <returns>current menuItem</returns>                                                                                    
        public static TType StaysOpenOnClick<TType>(this TType menuItem, Boolean staysOpenOnClick) where TType : notnull, MenuItem
        {
            menuItem.StaysOpenOnClick = staysOpenOnClick;
            return menuItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MenuItem.InputGestureText"/> property of the current <see cref="MenuItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MenuItem</typeparam>                                                                       
        /// <param name=" menuItem">current <see cref="MenuItem"/></param>                                                          
        /// <param name="inputGestureText">inputGestureText value</param>                                                                            
        /// <returns>current menuItem</returns>                                                                                    
        public static TType InputGestureText<TType>(this TType menuItem, String inputGestureText) where TType : notnull, MenuItem
        {
            menuItem.InputGestureText = inputGestureText;
            return menuItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MenuItem.Icon"/> property of the current <see cref="MenuItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MenuItem</typeparam>                                                                       
        /// <param name=" menuItem">current <see cref="MenuItem"/></param>                                                          
        /// <param name="icon">icon value</param>                                                                            
        /// <returns>current menuItem</returns>                                                                                    
        public static TType Icon<TType>(this TType menuItem, Object icon) where TType : notnull, MenuItem
        {
            menuItem.Icon = icon;
            return menuItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MenuItem.ItemContainerTemplateSelector"/> property of the current <see cref="MenuItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MenuItem</typeparam>                                                                       
        /// <param name=" menuItem">current <see cref="MenuItem"/></param>                                                          
        /// <param name="itemContainerTemplateSelector">itemContainerTemplateSelector value</param>                                                                            
        /// <returns>current menuItem</returns>                                                                                    
        public static TType ItemContainerTemplateSelector<TType>(this TType menuItem, ItemContainerTemplateSelector itemContainerTemplateSelector) where TType : notnull, MenuItem
        {
            menuItem.ItemContainerTemplateSelector = itemContainerTemplateSelector;
            return menuItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MenuItem.UsesItemContainerTemplate"/> property of the current <see cref="MenuItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MenuItem</typeparam>                                                                       
        /// <param name=" menuItem">current <see cref="MenuItem"/></param>                                                          
        /// <param name="usesItemContainerTemplate">usesItemContainerTemplate value</param>                                                                            
        /// <returns>current menuItem</returns>                                                                                    
        public static TType UsesItemContainerTemplate<TType>(this TType menuItem, Boolean usesItemContainerTemplate) where TType : notnull, MenuItem
        {
            menuItem.UsesItemContainerTemplate = usesItemContainerTemplate;
            return menuItem;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Page"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PageFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Page.Content"/> property of the current <see cref="Page"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Page</typeparam>                                                                       
        /// <param name=" page">current <see cref="Page"/></param>                                                          
        /// <param name="content">content value</param>                                                                            
        /// <returns>current page</returns>                                                                                    
        public static TType Content<TType>(this TType page, Object content) where TType : notnull, Page
        {
            page.Content = content;
            return page;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Page.WindowTitle"/> property of the current <see cref="Page"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Page</typeparam>                                                                       
        /// <param name=" page">current <see cref="Page"/></param>                                                          
        /// <param name="windowTitle">windowTitle value</param>                                                                            
        /// <returns>current page</returns>                                                                                    
        public static TType WindowTitle<TType>(this TType page, String windowTitle) where TType : notnull, Page
        {
            page.WindowTitle = windowTitle;
            return page;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Page.WindowHeight"/> property of the current <see cref="Page"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Page</typeparam>                                                                       
        /// <param name=" page">current <see cref="Page"/></param>                                                          
        /// <param name="windowHeight">windowHeight value</param>                                                                            
        /// <returns>current page</returns>                                                                                    
        public static TType WindowHeight<TType>(this TType page, Double windowHeight) where TType : notnull, Page
        {
            page.WindowHeight = windowHeight;
            return page;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Page.WindowWidth"/> property of the current <see cref="Page"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Page</typeparam>                                                                       
        /// <param name=" page">current <see cref="Page"/></param>                                                          
        /// <param name="windowWidth">windowWidth value</param>                                                                            
        /// <returns>current page</returns>                                                                                    
        public static TType WindowWidth<TType>(this TType page, Double windowWidth) where TType : notnull, Page
        {
            page.WindowWidth = windowWidth;
            return page;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Page.Background"/> property of the current <see cref="Page"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Page</typeparam>                                                                       
        /// <param name=" page">current <see cref="Page"/></param>                                                          
        /// <param name="background">background value</param>                                                                            
        /// <returns>current page</returns>                                                                                    
        public static TType Background<TType>(this TType page, Brush background) where TType : notnull, Page
        {
            page.Background = background;
            return page;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Page.Title"/> property of the current <see cref="Page"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Page</typeparam>                                                                       
        /// <param name=" page">current <see cref="Page"/></param>                                                          
        /// <param name="title">title value</param>                                                                            
        /// <returns>current page</returns>                                                                                    
        public static TType Title<TType>(this TType page, String title) where TType : notnull, Page
        {
            page.Title = title;
            return page;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Page.ShowsNavigationUI"/> property of the current <see cref="Page"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Page</typeparam>                                                                       
        /// <param name=" page">current <see cref="Page"/></param>                                                          
        /// <param name="showsNavigationUI">showsNavigationUI value</param>                                                                            
        /// <returns>current page</returns>                                                                                    
        public static TType ShowsNavigationUI<TType>(this TType page, Boolean showsNavigationUI) where TType : notnull, Page
        {
            page.ShowsNavigationUI = showsNavigationUI;
            return page;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Page.KeepAlive"/> property of the current <see cref="Page"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Page</typeparam>                                                                       
        /// <param name=" page">current <see cref="Page"/></param>                                                          
        /// <param name="keepAlive">keepAlive value</param>                                                                            
        /// <returns>current page</returns>                                                                                    
        public static TType KeepAlive<TType>(this TType page, Boolean keepAlive) where TType : notnull, Page
        {
            page.KeepAlive = keepAlive;
            return page;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Page.Foreground"/> property of the current <see cref="Page"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Page</typeparam>                                                                       
        /// <param name=" page">current <see cref="Page"/></param>                                                          
        /// <param name="foreground">foreground value</param>                                                                            
        /// <returns>current page</returns>                                                                                    
        public static TType Foreground<TType>(this TType page, Brush foreground) where TType : notnull, Page
        {
            page.Foreground = foreground;
            return page;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Page.FontFamily"/> property of the current <see cref="Page"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Page</typeparam>                                                                       
        /// <param name=" page">current <see cref="Page"/></param>                                                          
        /// <param name="fontFamily">fontFamily value</param>                                                                            
        /// <returns>current page</returns>                                                                                    
        public static TType FontFamily<TType>(this TType page, FontFamily fontFamily) where TType : notnull, Page
        {
            page.FontFamily = fontFamily;
            return page;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Page.FontSize"/> property of the current <see cref="Page"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Page</typeparam>                                                                       
        /// <param name=" page">current <see cref="Page"/></param>                                                          
        /// <param name="fontSize">fontSize value</param>                                                                            
        /// <returns>current page</returns>                                                                                    
        public static TType FontSize<TType>(this TType page, Double fontSize) where TType : notnull, Page
        {
            page.FontSize = fontSize;
            return page;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Page.Template"/> property of the current <see cref="Page"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Page</typeparam>                                                                       
        /// <param name=" page">current <see cref="Page"/></param>                                                          
        /// <param name="template">template value</param>                                                                            
        /// <returns>current page</returns>                                                                                    
        public static TType Template<TType>(this TType page, ControlTemplate template) where TType : notnull, Page
        {
            page.Template = template;
            return page;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Panel"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PanelFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Panel.Background"/> property of the current <see cref="Panel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Panel</typeparam>                                                                       
        /// <param name=" panel">current <see cref="Panel"/></param>                                                          
        /// <param name="background">background value</param>                                                                            
        /// <returns>current panel</returns>                                                                                    
        public static TType Background<TType>(this TType panel, Brush background) where TType : notnull, Panel
        {
            panel.Background = background;
            return panel;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Panel.IsItemsHost"/> property of the current <see cref="Panel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Panel</typeparam>                                                                       
        /// <param name=" panel">current <see cref="Panel"/></param>                                                          
        /// <param name="isItemsHost">isItemsHost value</param>                                                                            
        /// <returns>current panel</returns>                                                                                    
        public static TType IsItemsHost<TType>(this TType panel, Boolean isItemsHost) where TType : notnull, Panel
        {
            panel.IsItemsHost = isItemsHost;
            return panel;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="PasswordBox"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PasswordBoxFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PasswordBox.Password"/> property of the current <see cref="PasswordBox"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" passwordBox">current <see cref="PasswordBox"/></param>                                                          
        /// <param name="password">password value</param>                                                                            
        /// <returns>current passwordBox</returns>                                                                                    
        public static PasswordBox Password(this PasswordBox passwordBox, String password)
        {
            passwordBox.Password = password;
            return passwordBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PasswordBox.PasswordChar"/> property of the current <see cref="PasswordBox"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" passwordBox">current <see cref="PasswordBox"/></param>                                                          
        /// <param name="passwordChar">passwordChar value</param>                                                                            
        /// <returns>current passwordBox</returns>                                                                                    
        public static PasswordBox PasswordChar(this PasswordBox passwordBox, Char passwordChar)
        {
            passwordBox.PasswordChar = passwordChar;
            return passwordBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PasswordBox.MaxLength"/> property of the current <see cref="PasswordBox"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" passwordBox">current <see cref="PasswordBox"/></param>                                                          
        /// <param name="maxLength">maxLength value</param>                                                                            
        /// <returns>current passwordBox</returns>                                                                                    
        public static PasswordBox MaxLength(this PasswordBox passwordBox, Int32 maxLength)
        {
            passwordBox.MaxLength = maxLength;
            return passwordBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PasswordBox.SelectionBrush"/> property of the current <see cref="PasswordBox"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" passwordBox">current <see cref="PasswordBox"/></param>                                                          
        /// <param name="selectionBrush">selectionBrush value</param>                                                                            
        /// <returns>current passwordBox</returns>                                                                                    
        public static PasswordBox SelectionBrush(this PasswordBox passwordBox, Brush selectionBrush)
        {
            passwordBox.SelectionBrush = selectionBrush;
            return passwordBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PasswordBox.SelectionOpacity"/> property of the current <see cref="PasswordBox"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" passwordBox">current <see cref="PasswordBox"/></param>                                                          
        /// <param name="selectionOpacity">selectionOpacity value</param>                                                                            
        /// <returns>current passwordBox</returns>                                                                                    
        public static PasswordBox SelectionOpacity(this PasswordBox passwordBox, Double selectionOpacity)
        {
            passwordBox.SelectionOpacity = selectionOpacity;
            return passwordBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PasswordBox.CaretBrush"/> property of the current <see cref="PasswordBox"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" passwordBox">current <see cref="PasswordBox"/></param>                                                          
        /// <param name="caretBrush">caretBrush value</param>                                                                            
        /// <returns>current passwordBox</returns>                                                                                    
        public static PasswordBox CaretBrush(this PasswordBox passwordBox, Brush caretBrush)
        {
            passwordBox.CaretBrush = caretBrush;
            return passwordBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PasswordBox.IsInactiveSelectionHighlightEnabled"/> property of the current <see cref="PasswordBox"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" passwordBox">current <see cref="PasswordBox"/></param>                                                          
        /// <param name="isInactiveSelectionHighlightEnabled">isInactiveSelectionHighlightEnabled value</param>                                                                            
        /// <returns>current passwordBox</returns>                                                                                    
        public static PasswordBox IsInactiveSelectionHighlightEnabled(this PasswordBox passwordBox, Boolean isInactiveSelectionHighlightEnabled)
        {
            passwordBox.IsInactiveSelectionHighlightEnabled = isInactiveSelectionHighlightEnabled;
            return passwordBox;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ScrollContentPresenter"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ScrollContentPresenterFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ScrollContentPresenter.CanContentScroll"/> property of the current <see cref="ScrollContentPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" scrollContentPresenter">current <see cref="ScrollContentPresenter"/></param>                                                          
        /// <param name="canContentScroll">canContentScroll value</param>                                                                            
        /// <returns>current scrollContentPresenter</returns>                                                                                    
        public static ScrollContentPresenter CanContentScroll(this ScrollContentPresenter scrollContentPresenter, Boolean canContentScroll)
        {
            scrollContentPresenter.CanContentScroll = canContentScroll;
            return scrollContentPresenter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScrollContentPresenter.CanHorizontallyScroll"/> property of the current <see cref="ScrollContentPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" scrollContentPresenter">current <see cref="ScrollContentPresenter"/></param>                                                          
        /// <param name="canHorizontallyScroll">canHorizontallyScroll value</param>                                                                            
        /// <returns>current scrollContentPresenter</returns>                                                                                    
        public static ScrollContentPresenter CanHorizontallyScroll(this ScrollContentPresenter scrollContentPresenter, Boolean canHorizontallyScroll)
        {
            scrollContentPresenter.CanHorizontallyScroll = canHorizontallyScroll;
            return scrollContentPresenter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScrollContentPresenter.CanVerticallyScroll"/> property of the current <see cref="ScrollContentPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" scrollContentPresenter">current <see cref="ScrollContentPresenter"/></param>                                                          
        /// <param name="canVerticallyScroll">canVerticallyScroll value</param>                                                                            
        /// <returns>current scrollContentPresenter</returns>                                                                                    
        public static ScrollContentPresenter CanVerticallyScroll(this ScrollContentPresenter scrollContentPresenter, Boolean canVerticallyScroll)
        {
            scrollContentPresenter.CanVerticallyScroll = canVerticallyScroll;
            return scrollContentPresenter;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScrollContentPresenter.ScrollOwner"/> property of the current <see cref="ScrollContentPresenter"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" scrollContentPresenter">current <see cref="ScrollContentPresenter"/></param>                                                          
        /// <param name="scrollOwner">scrollOwner value</param>                                                                            
        /// <returns>current scrollContentPresenter</returns>                                                                                    
        public static ScrollContentPresenter ScrollOwner(this ScrollContentPresenter scrollContentPresenter, ScrollViewer scrollOwner)
        {
            scrollContentPresenter.ScrollOwner = scrollOwner;
            return scrollContentPresenter;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ProgressBar"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ProgressBarFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ProgressBar.IsIndeterminate"/> property of the current <see cref="ProgressBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ProgressBar</typeparam>                                                                       
        /// <param name=" progressBar">current <see cref="ProgressBar"/></param>                                                          
        /// <param name="isIndeterminate">isIndeterminate value</param>                                                                            
        /// <returns>current progressBar</returns>                                                                                    
        public static TType IsIndeterminate<TType>(this TType progressBar, Boolean isIndeterminate) where TType : notnull, ProgressBar
        {
            progressBar.IsIndeterminate = isIndeterminate;
            return progressBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ProgressBar.Orientation"/> property of the current <see cref="ProgressBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ProgressBar</typeparam>                                                                       
        /// <param name=" progressBar">current <see cref="ProgressBar"/></param>                                                          
        /// <param name="orientation">orientation value</param>                                                                            
        /// <returns>current progressBar</returns>                                                                                    
        public static TType Orientation<TType>(this TType progressBar, Orientation orientation) where TType : notnull, ProgressBar
        {
            progressBar.Orientation = orientation;
            return progressBar;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="RadioButton"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class RadioButtonFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="RadioButton.GroupName"/> property of the current <see cref="RadioButton"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RadioButton</typeparam>                                                                       
        /// <param name=" radioButton">current <see cref="RadioButton"/></param>                                                          
        /// <param name="groupName">groupName value</param>                                                                            
        /// <returns>current radioButton</returns>                                                                                    
        public static TType GroupName<TType>(this TType radioButton, String groupName) where TType : notnull, RadioButton
        {
            radioButton.GroupName = groupName;
            return radioButton;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="RichTextBox"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class RichTextBoxFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="RichTextBox.Document"/> property of the current <see cref="RichTextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RichTextBox</typeparam>                                                                       
        /// <param name=" richTextBox">current <see cref="RichTextBox"/></param>                                                          
        /// <param name="document">document value</param>                                                                            
        /// <returns>current richTextBox</returns>                                                                                    
        public static TType Document<TType>(this TType richTextBox, FlowDocument document) where TType : notnull, RichTextBox
        {
            richTextBox.Document = document;
            return richTextBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RichTextBox.IsDocumentEnabled"/> property of the current <see cref="RichTextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RichTextBox</typeparam>                                                                       
        /// <param name=" richTextBox">current <see cref="RichTextBox"/></param>                                                          
        /// <param name="isDocumentEnabled">isDocumentEnabled value</param>                                                                            
        /// <returns>current richTextBox</returns>                                                                                    
        public static TType IsDocumentEnabled<TType>(this TType richTextBox, Boolean isDocumentEnabled) where TType : notnull, RichTextBox
        {
            richTextBox.IsDocumentEnabled = isDocumentEnabled;
            return richTextBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RichTextBox.CaretPosition"/> property of the current <see cref="RichTextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RichTextBox</typeparam>                                                                       
        /// <param name=" richTextBox">current <see cref="RichTextBox"/></param>                                                          
        /// <param name="caretPosition">caretPosition value</param>                                                                            
        /// <returns>current richTextBox</returns>                                                                                    
        public static TType CaretPosition<TType>(this TType richTextBox, TextPointer caretPosition) where TType : notnull, RichTextBox
        {
            richTextBox.CaretPosition = caretPosition;
            return richTextBox;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ScrollViewer"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ScrollViewerFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ScrollViewer.CanContentScroll"/> property of the current <see cref="ScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ScrollViewer</typeparam>                                                                       
        /// <param name=" scrollViewer">current <see cref="ScrollViewer"/></param>                                                          
        /// <param name="canContentScroll">canContentScroll value</param>                                                                            
        /// <returns>current scrollViewer</returns>                                                                                    
        public static TType CanContentScroll<TType>(this TType scrollViewer, Boolean canContentScroll) where TType : notnull, ScrollViewer
        {
            scrollViewer.CanContentScroll = canContentScroll;
            return scrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScrollViewer.HorizontalScrollBarVisibility"/> property of the current <see cref="ScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ScrollViewer</typeparam>                                                                       
        /// <param name=" scrollViewer">current <see cref="ScrollViewer"/></param>                                                          
        /// <param name="horizontalScrollBarVisibility">horizontalScrollBarVisibility value</param>                                                                            
        /// <returns>current scrollViewer</returns>                                                                                    
        public static TType HorizontalScrollBarVisibility<TType>(this TType scrollViewer, ScrollBarVisibility horizontalScrollBarVisibility) where TType : notnull, ScrollViewer
        {
            scrollViewer.HorizontalScrollBarVisibility = horizontalScrollBarVisibility;
            return scrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScrollViewer.VerticalScrollBarVisibility"/> property of the current <see cref="ScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ScrollViewer</typeparam>                                                                       
        /// <param name=" scrollViewer">current <see cref="ScrollViewer"/></param>                                                          
        /// <param name="verticalScrollBarVisibility">verticalScrollBarVisibility value</param>                                                                            
        /// <returns>current scrollViewer</returns>                                                                                    
        public static TType VerticalScrollBarVisibility<TType>(this TType scrollViewer, ScrollBarVisibility verticalScrollBarVisibility) where TType : notnull, ScrollViewer
        {
            scrollViewer.VerticalScrollBarVisibility = verticalScrollBarVisibility;
            return scrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScrollViewer.IsDeferredScrollingEnabled"/> property of the current <see cref="ScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ScrollViewer</typeparam>                                                                       
        /// <param name=" scrollViewer">current <see cref="ScrollViewer"/></param>                                                          
        /// <param name="isDeferredScrollingEnabled">isDeferredScrollingEnabled value</param>                                                                            
        /// <returns>current scrollViewer</returns>                                                                                    
        public static TType IsDeferredScrollingEnabled<TType>(this TType scrollViewer, Boolean isDeferredScrollingEnabled) where TType : notnull, ScrollViewer
        {
            scrollViewer.IsDeferredScrollingEnabled = isDeferredScrollingEnabled;
            return scrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScrollViewer.PanningMode"/> property of the current <see cref="ScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ScrollViewer</typeparam>                                                                       
        /// <param name=" scrollViewer">current <see cref="ScrollViewer"/></param>                                                          
        /// <param name="panningMode">panningMode value</param>                                                                            
        /// <returns>current scrollViewer</returns>                                                                                    
        public static TType PanningMode<TType>(this TType scrollViewer, PanningMode panningMode) where TType : notnull, ScrollViewer
        {
            scrollViewer.PanningMode = panningMode;
            return scrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScrollViewer.PanningDeceleration"/> property of the current <see cref="ScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ScrollViewer</typeparam>                                                                       
        /// <param name=" scrollViewer">current <see cref="ScrollViewer"/></param>                                                          
        /// <param name="panningDeceleration">panningDeceleration value</param>                                                                            
        /// <returns>current scrollViewer</returns>                                                                                    
        public static TType PanningDeceleration<TType>(this TType scrollViewer, Double panningDeceleration) where TType : notnull, ScrollViewer
        {
            scrollViewer.PanningDeceleration = panningDeceleration;
            return scrollViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScrollViewer.PanningRatio"/> property of the current <see cref="ScrollViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ScrollViewer</typeparam>                                                                       
        /// <param name=" scrollViewer">current <see cref="ScrollViewer"/></param>                                                          
        /// <param name="panningRatio">panningRatio value</param>                                                                            
        /// <returns>current scrollViewer</returns>                                                                                    
        public static TType PanningRatio<TType>(this TType scrollViewer, Double panningRatio) where TType : notnull, ScrollViewer
        {
            scrollViewer.PanningRatio = panningRatio;
            return scrollViewer;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="FlowDocumentPageViewer"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class FlowDocumentPageViewerFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentPageViewer.Zoom"/> property of the current <see cref="FlowDocumentPageViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentPageViewer</typeparam>                                                                       
        /// <param name=" flowDocumentPageViewer">current <see cref="FlowDocumentPageViewer"/></param>                                                          
        /// <param name="zoom">zoom value</param>                                                                            
        /// <returns>current flowDocumentPageViewer</returns>                                                                                    
        public static TType Zoom<TType>(this TType flowDocumentPageViewer, Double zoom) where TType : notnull, FlowDocumentPageViewer
        {
            flowDocumentPageViewer.Zoom = zoom;
            return flowDocumentPageViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentPageViewer.MaxZoom"/> property of the current <see cref="FlowDocumentPageViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentPageViewer</typeparam>                                                                       
        /// <param name=" flowDocumentPageViewer">current <see cref="FlowDocumentPageViewer"/></param>                                                          
        /// <param name="maxZoom">maxZoom value</param>                                                                            
        /// <returns>current flowDocumentPageViewer</returns>                                                                                    
        public static TType MaxZoom<TType>(this TType flowDocumentPageViewer, Double maxZoom) where TType : notnull, FlowDocumentPageViewer
        {
            flowDocumentPageViewer.MaxZoom = maxZoom;
            return flowDocumentPageViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentPageViewer.MinZoom"/> property of the current <see cref="FlowDocumentPageViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentPageViewer</typeparam>                                                                       
        /// <param name=" flowDocumentPageViewer">current <see cref="FlowDocumentPageViewer"/></param>                                                          
        /// <param name="minZoom">minZoom value</param>                                                                            
        /// <returns>current flowDocumentPageViewer</returns>                                                                                    
        public static TType MinZoom<TType>(this TType flowDocumentPageViewer, Double minZoom) where TType : notnull, FlowDocumentPageViewer
        {
            flowDocumentPageViewer.MinZoom = minZoom;
            return flowDocumentPageViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentPageViewer.ZoomIncrement"/> property of the current <see cref="FlowDocumentPageViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentPageViewer</typeparam>                                                                       
        /// <param name=" flowDocumentPageViewer">current <see cref="FlowDocumentPageViewer"/></param>                                                          
        /// <param name="zoomIncrement">zoomIncrement value</param>                                                                            
        /// <returns>current flowDocumentPageViewer</returns>                                                                                    
        public static TType ZoomIncrement<TType>(this TType flowDocumentPageViewer, Double zoomIncrement) where TType : notnull, FlowDocumentPageViewer
        {
            flowDocumentPageViewer.ZoomIncrement = zoomIncrement;
            return flowDocumentPageViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentPageViewer.SelectionBrush"/> property of the current <see cref="FlowDocumentPageViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentPageViewer</typeparam>                                                                       
        /// <param name=" flowDocumentPageViewer">current <see cref="FlowDocumentPageViewer"/></param>                                                          
        /// <param name="selectionBrush">selectionBrush value</param>                                                                            
        /// <returns>current flowDocumentPageViewer</returns>                                                                                    
        public static TType SelectionBrush<TType>(this TType flowDocumentPageViewer, Brush selectionBrush) where TType : notnull, FlowDocumentPageViewer
        {
            flowDocumentPageViewer.SelectionBrush = selectionBrush;
            return flowDocumentPageViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentPageViewer.SelectionOpacity"/> property of the current <see cref="FlowDocumentPageViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentPageViewer</typeparam>                                                                       
        /// <param name=" flowDocumentPageViewer">current <see cref="FlowDocumentPageViewer"/></param>                                                          
        /// <param name="selectionOpacity">selectionOpacity value</param>                                                                            
        /// <returns>current flowDocumentPageViewer</returns>                                                                                    
        public static TType SelectionOpacity<TType>(this TType flowDocumentPageViewer, Double selectionOpacity) where TType : notnull, FlowDocumentPageViewer
        {
            flowDocumentPageViewer.SelectionOpacity = selectionOpacity;
            return flowDocumentPageViewer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FlowDocumentPageViewer.IsInactiveSelectionHighlightEnabled"/> property of the current <see cref="FlowDocumentPageViewer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">FlowDocumentPageViewer</typeparam>                                                                       
        /// <param name=" flowDocumentPageViewer">current <see cref="FlowDocumentPageViewer"/></param>                                                          
        /// <param name="isInactiveSelectionHighlightEnabled">isInactiveSelectionHighlightEnabled value</param>                                                                            
        /// <returns>current flowDocumentPageViewer</returns>                                                                                    
        public static TType IsInactiveSelectionHighlightEnabled<TType>(this TType flowDocumentPageViewer, Boolean isInactiveSelectionHighlightEnabled) where TType : notnull, FlowDocumentPageViewer
        {
            flowDocumentPageViewer.IsInactiveSelectionHighlightEnabled = isInactiveSelectionHighlightEnabled;
            return flowDocumentPageViewer;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Slider"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SliderFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Slider.Orientation"/> property of the current <see cref="Slider"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Slider</typeparam>                                                                       
        /// <param name=" slider">current <see cref="Slider"/></param>                                                          
        /// <param name="orientation">orientation value</param>                                                                            
        /// <returns>current slider</returns>                                                                                    
        public static TType Orientation<TType>(this TType slider, Orientation orientation) where TType : notnull, Slider
        {
            slider.Orientation = orientation;
            return slider;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Slider.IsDirectionReversed"/> property of the current <see cref="Slider"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Slider</typeparam>                                                                       
        /// <param name=" slider">current <see cref="Slider"/></param>                                                          
        /// <param name="isDirectionReversed">isDirectionReversed value</param>                                                                            
        /// <returns>current slider</returns>                                                                                    
        public static TType IsDirectionReversed<TType>(this TType slider, Boolean isDirectionReversed) where TType : notnull, Slider
        {
            slider.IsDirectionReversed = isDirectionReversed;
            return slider;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Slider.Delay"/> property of the current <see cref="Slider"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Slider</typeparam>                                                                       
        /// <param name=" slider">current <see cref="Slider"/></param>                                                          
        /// <param name="delay">delay value</param>                                                                            
        /// <returns>current slider</returns>                                                                                    
        public static TType Delay<TType>(this TType slider, Int32 delay) where TType : notnull, Slider
        {
            slider.Delay = delay;
            return slider;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Slider.Interval"/> property of the current <see cref="Slider"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Slider</typeparam>                                                                       
        /// <param name=" slider">current <see cref="Slider"/></param>                                                          
        /// <param name="interval">interval value</param>                                                                            
        /// <returns>current slider</returns>                                                                                    
        public static TType Interval<TType>(this TType slider, Int32 interval) where TType : notnull, Slider
        {
            slider.Interval = interval;
            return slider;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Slider.AutoToolTipPlacement"/> property of the current <see cref="Slider"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Slider</typeparam>                                                                       
        /// <param name=" slider">current <see cref="Slider"/></param>                                                          
        /// <param name="autoToolTipPlacement">autoToolTipPlacement value</param>                                                                            
        /// <returns>current slider</returns>                                                                                    
        public static TType AutoToolTipPlacement<TType>(this TType slider, AutoToolTipPlacement autoToolTipPlacement) where TType : notnull, Slider
        {
            slider.AutoToolTipPlacement = autoToolTipPlacement;
            return slider;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Slider.AutoToolTipPrecision"/> property of the current <see cref="Slider"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Slider</typeparam>                                                                       
        /// <param name=" slider">current <see cref="Slider"/></param>                                                          
        /// <param name="autoToolTipPrecision">autoToolTipPrecision value</param>                                                                            
        /// <returns>current slider</returns>                                                                                    
        public static TType AutoToolTipPrecision<TType>(this TType slider, Int32 autoToolTipPrecision) where TType : notnull, Slider
        {
            slider.AutoToolTipPrecision = autoToolTipPrecision;
            return slider;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Slider.IsSnapToTickEnabled"/> property of the current <see cref="Slider"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Slider</typeparam>                                                                       
        /// <param name=" slider">current <see cref="Slider"/></param>                                                          
        /// <param name="isSnapToTickEnabled">isSnapToTickEnabled value</param>                                                                            
        /// <returns>current slider</returns>                                                                                    
        public static TType IsSnapToTickEnabled<TType>(this TType slider, Boolean isSnapToTickEnabled) where TType : notnull, Slider
        {
            slider.IsSnapToTickEnabled = isSnapToTickEnabled;
            return slider;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Slider.TickPlacement"/> property of the current <see cref="Slider"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Slider</typeparam>                                                                       
        /// <param name=" slider">current <see cref="Slider"/></param>                                                          
        /// <param name="tickPlacement">tickPlacement value</param>                                                                            
        /// <returns>current slider</returns>                                                                                    
        public static TType TickPlacement<TType>(this TType slider, TickPlacement tickPlacement) where TType : notnull, Slider
        {
            slider.TickPlacement = tickPlacement;
            return slider;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Slider.TickFrequency"/> property of the current <see cref="Slider"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Slider</typeparam>                                                                       
        /// <param name=" slider">current <see cref="Slider"/></param>                                                          
        /// <param name="tickFrequency">tickFrequency value</param>                                                                            
        /// <returns>current slider</returns>                                                                                    
        public static TType TickFrequency<TType>(this TType slider, Double tickFrequency) where TType : notnull, Slider
        {
            slider.TickFrequency = tickFrequency;
            return slider;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Slider.Ticks"/> property of the current <see cref="Slider"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Slider</typeparam>                                                                       
        /// <param name=" slider">current <see cref="Slider"/></param>                                                          
        /// <param name="ticks">ticks value</param>                                                                            
        /// <returns>current slider</returns>                                                                                    
        public static TType Ticks<TType>(this TType slider, DoubleCollection ticks) where TType : notnull, Slider
        {
            slider.Ticks = ticks;
            return slider;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Slider.IsSelectionRangeEnabled"/> property of the current <see cref="Slider"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Slider</typeparam>                                                                       
        /// <param name=" slider">current <see cref="Slider"/></param>                                                          
        /// <param name="isSelectionRangeEnabled">isSelectionRangeEnabled value</param>                                                                            
        /// <returns>current slider</returns>                                                                                    
        public static TType IsSelectionRangeEnabled<TType>(this TType slider, Boolean isSelectionRangeEnabled) where TType : notnull, Slider
        {
            slider.IsSelectionRangeEnabled = isSelectionRangeEnabled;
            return slider;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Slider.SelectionStart"/> property of the current <see cref="Slider"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Slider</typeparam>                                                                       
        /// <param name=" slider">current <see cref="Slider"/></param>                                                          
        /// <param name="selectionStart">selectionStart value</param>                                                                            
        /// <returns>current slider</returns>                                                                                    
        public static TType SelectionStart<TType>(this TType slider, Double selectionStart) where TType : notnull, Slider
        {
            slider.SelectionStart = selectionStart;
            return slider;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Slider.SelectionEnd"/> property of the current <see cref="Slider"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Slider</typeparam>                                                                       
        /// <param name=" slider">current <see cref="Slider"/></param>                                                          
        /// <param name="selectionEnd">selectionEnd value</param>                                                                            
        /// <returns>current slider</returns>                                                                                    
        public static TType SelectionEnd<TType>(this TType slider, Double selectionEnd) where TType : notnull, Slider
        {
            slider.SelectionEnd = selectionEnd;
            return slider;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Slider.IsMoveToPointEnabled"/> property of the current <see cref="Slider"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Slider</typeparam>                                                                       
        /// <param name=" slider">current <see cref="Slider"/></param>                                                          
        /// <param name="isMoveToPointEnabled">isMoveToPointEnabled value</param>                                                                            
        /// <returns>current slider</returns>                                                                                    
        public static TType IsMoveToPointEnabled<TType>(this TType slider, Boolean isMoveToPointEnabled) where TType : notnull, Slider
        {
            slider.IsMoveToPointEnabled = isMoveToPointEnabled;
            return slider;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SoundPlayerAction"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SoundPlayerActionFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SoundPlayerAction.Source"/> property of the current <see cref="SoundPlayerAction"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SoundPlayerAction</typeparam>                                                                       
        /// <param name=" soundPlayerAction">current <see cref="SoundPlayerAction"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current soundPlayerAction</returns>                                                                                    
        public static TType Source<TType>(this TType soundPlayerAction, Uri source) where TType : notnull, SoundPlayerAction
        {
            soundPlayerAction.Source = source;
            return soundPlayerAction;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="StackPanel"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class StackPanelFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="StackPanel.Orientation"/> property of the current <see cref="StackPanel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">StackPanel</typeparam>                                                                       
        /// <param name=" stackPanel">current <see cref="StackPanel"/></param>                                                          
        /// <param name="orientation">orientation value</param>                                                                            
        /// <returns>current stackPanel</returns>                                                                                    
        public static TType Orientation<TType>(this TType stackPanel, Orientation orientation) where TType : notnull, StackPanel
        {
            stackPanel.Orientation = orientation;
            return stackPanel;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="StackPanel.CanHorizontallyScroll"/> property of the current <see cref="StackPanel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">StackPanel</typeparam>                                                                       
        /// <param name=" stackPanel">current <see cref="StackPanel"/></param>                                                          
        /// <param name="canHorizontallyScroll">canHorizontallyScroll value</param>                                                                            
        /// <returns>current stackPanel</returns>                                                                                    
        public static TType CanHorizontallyScroll<TType>(this TType stackPanel, Boolean canHorizontallyScroll) where TType : notnull, StackPanel
        {
            stackPanel.CanHorizontallyScroll = canHorizontallyScroll;
            return stackPanel;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="StackPanel.CanVerticallyScroll"/> property of the current <see cref="StackPanel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">StackPanel</typeparam>                                                                       
        /// <param name=" stackPanel">current <see cref="StackPanel"/></param>                                                          
        /// <param name="canVerticallyScroll">canVerticallyScroll value</param>                                                                            
        /// <returns>current stackPanel</returns>                                                                                    
        public static TType CanVerticallyScroll<TType>(this TType stackPanel, Boolean canVerticallyScroll) where TType : notnull, StackPanel
        {
            stackPanel.CanVerticallyScroll = canVerticallyScroll;
            return stackPanel;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="StackPanel.ScrollOwner"/> property of the current <see cref="StackPanel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">StackPanel</typeparam>                                                                       
        /// <param name=" stackPanel">current <see cref="StackPanel"/></param>                                                          
        /// <param name="scrollOwner">scrollOwner value</param>                                                                            
        /// <returns>current stackPanel</returns>                                                                                    
        public static TType ScrollOwner<TType>(this TType stackPanel, ScrollViewer scrollOwner) where TType : notnull, StackPanel
        {
            stackPanel.ScrollOwner = scrollOwner;
            return stackPanel;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TabControl"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TabControlFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TabControl.TabStripPlacement"/> property of the current <see cref="TabControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TabControl</typeparam>                                                                       
        /// <param name=" tabControl">current <see cref="TabControl"/></param>                                                          
        /// <param name="tabStripPlacement">tabStripPlacement value</param>                                                                            
        /// <returns>current tabControl</returns>                                                                                    
        public static TType TabStripPlacement<TType>(this TType tabControl, Dock tabStripPlacement) where TType : notnull, TabControl
        {
            tabControl.TabStripPlacement = tabStripPlacement;
            return tabControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TabControl.ContentTemplate"/> property of the current <see cref="TabControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TabControl</typeparam>                                                                       
        /// <param name=" tabControl">current <see cref="TabControl"/></param>                                                          
        /// <param name="contentTemplate">contentTemplate value</param>                                                                            
        /// <returns>current tabControl</returns>                                                                                    
        public static TType ContentTemplate<TType>(this TType tabControl, DataTemplate contentTemplate) where TType : notnull, TabControl
        {
            tabControl.ContentTemplate = contentTemplate;
            return tabControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TabControl.ContentTemplateSelector"/> property of the current <see cref="TabControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TabControl</typeparam>                                                                       
        /// <param name=" tabControl">current <see cref="TabControl"/></param>                                                          
        /// <param name="contentTemplateSelector">contentTemplateSelector value</param>                                                                            
        /// <returns>current tabControl</returns>                                                                                    
        public static TType ContentTemplateSelector<TType>(this TType tabControl, DataTemplateSelector contentTemplateSelector) where TType : notnull, TabControl
        {
            tabControl.ContentTemplateSelector = contentTemplateSelector;
            return tabControl;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TabControl.ContentStringFormat"/> property of the current <see cref="TabControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TabControl</typeparam>                                                                       
        /// <param name=" tabControl">current <see cref="TabControl"/></param>                                                          
        /// <param name="contentStringFormat">contentStringFormat value</param>                                                                            
        /// <returns>current tabControl</returns>                                                                                    
        public static TType ContentStringFormat<TType>(this TType tabControl, String contentStringFormat) where TType : notnull, TabControl
        {
            tabControl.ContentStringFormat = contentStringFormat;
            return tabControl;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TabItem"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TabItemFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TabItem.IsSelected"/> property of the current <see cref="TabItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TabItem</typeparam>                                                                       
        /// <param name=" tabItem">current <see cref="TabItem"/></param>                                                          
        /// <param name="isSelected">isSelected value</param>                                                                            
        /// <returns>current tabItem</returns>                                                                                    
        public static TType IsSelected<TType>(this TType tabItem, Boolean isSelected) where TType : notnull, TabItem
        {
            tabItem.IsSelected = isSelected;
            return tabItem;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TextBlock"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TextBlockFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.BaselineOffset"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="baselineOffset">baselineOffset value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType BaselineOffset<TType>(this TType textBlock, Double baselineOffset) where TType : notnull, TextBlock
        {
            textBlock.BaselineOffset = baselineOffset;
            return textBlock;
        }

        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.Text"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="text">text value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType Text<TType>(this TType textBlock, String text) where TType : notnull, TextBlock
        {
            textBlock.Text = text;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.FontFamily"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="fontFamily">fontFamily value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType FontFamily<TType>(this TType textBlock, FontFamily fontFamily) where TType : notnull, TextBlock
        {
            textBlock.FontFamily = fontFamily;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.FontStyle"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="fontStyle">fontStyle value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType FontStyle<TType>(this TType textBlock, FontStyle fontStyle) where TType : notnull, TextBlock
        {
            textBlock.FontStyle = fontStyle;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.FontWeight"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="fontWeight">fontWeight value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType FontWeight<TType>(this TType textBlock, FontWeight fontWeight) where TType : notnull, TextBlock
        {
            textBlock.FontWeight = fontWeight;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.FontStretch"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="fontStretch">fontStretch value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType FontStretch<TType>(this TType textBlock, FontStretch fontStretch) where TType : notnull, TextBlock
        {
            textBlock.FontStretch = fontStretch;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.FontSize"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="fontSize">fontSize value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType FontSize<TType>(this TType textBlock, Double fontSize) where TType : notnull, TextBlock
        {
            textBlock.FontSize = fontSize;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.Foreground"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="foreground">foreground value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType Foreground<TType>(this TType textBlock, Brush foreground) where TType : notnull, TextBlock
        {
            textBlock.Foreground = foreground;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.Background"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="background">background value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType Background<TType>(this TType textBlock, Brush background) where TType : notnull, TextBlock
        {
            textBlock.Background = background;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.TextDecorations"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="textDecorations">textDecorations value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType TextDecorations<TType>(this TType textBlock, TextDecorationCollection textDecorations) where TType : notnull, TextBlock
        {
            textBlock.TextDecorations = textDecorations;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.TextEffects"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="textEffects">textEffects value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType TextEffects<TType>(this TType textBlock, TextEffectCollection textEffects) where TType : notnull, TextBlock
        {
            textBlock.TextEffects = textEffects;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.LineHeight"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="lineHeight">lineHeight value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType LineHeight<TType>(this TType textBlock, Double lineHeight) where TType : notnull, TextBlock
        {
            textBlock.LineHeight = lineHeight;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.LineStackingStrategy"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="lineStackingStrategy">lineStackingStrategy value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType LineStackingStrategy<TType>(this TType textBlock, LineStackingStrategy lineStackingStrategy) where TType : notnull, TextBlock
        {
            textBlock.LineStackingStrategy = lineStackingStrategy;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.Padding"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="padding">padding value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType Padding<TType>(this TType textBlock, Thickness padding) where TType : notnull, TextBlock
        {
            textBlock.Padding = padding;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.TextAlignment"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="textAlignment">textAlignment value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType TextAlignment<TType>(this TType textBlock, TextAlignment textAlignment) where TType : notnull, TextBlock
        {
            textBlock.TextAlignment = textAlignment;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.TextTrimming"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="textTrimming">textTrimming value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType TextTrimming<TType>(this TType textBlock, TextTrimming textTrimming) where TType : notnull, TextBlock
        {
            textBlock.TextTrimming = textTrimming;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.TextWrapping"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="textWrapping">textWrapping value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType TextWrapping<TType>(this TType textBlock, TextWrapping textWrapping) where TType : notnull, TextBlock
        {
            textBlock.TextWrapping = textWrapping;
            return textBlock;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBlock.IsHyphenationEnabled"/> property of the current <see cref="TextBlock"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBlock</typeparam>                                                                       
        /// <param name=" textBlock">current <see cref="TextBlock"/></param>                                                          
        /// <param name="isHyphenationEnabled">isHyphenationEnabled value</param>                                                                            
        /// <returns>current textBlock</returns>                                                                                    
        public static TType IsHyphenationEnabled<TType>(this TType textBlock, Boolean isHyphenationEnabled) where TType : notnull, TextBlock
        {
            textBlock.IsHyphenationEnabled = isHyphenationEnabled;
            return textBlock;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TextBox"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TextBoxFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBox.TextWrapping"/> property of the current <see cref="TextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBox</typeparam>                                                                       
        /// <param name=" textBox">current <see cref="TextBox"/></param>                                                          
        /// <param name="textWrapping">textWrapping value</param>                                                                            
        /// <returns>current textBox</returns>                                                                                    
        public static TType TextWrapping<TType>(this TType textBox, TextWrapping textWrapping) where TType : notnull, TextBox
        {
            textBox.TextWrapping = textWrapping;
            return textBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBox.MinLines"/> property of the current <see cref="TextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBox</typeparam>                                                                       
        /// <param name=" textBox">current <see cref="TextBox"/></param>                                                          
        /// <param name="minLines">minLines value</param>                                                                            
        /// <returns>current textBox</returns>                                                                                    
        public static TType MinLines<TType>(this TType textBox, Int32 minLines) where TType : notnull, TextBox
        {
            textBox.MinLines = minLines;
            return textBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBox.MaxLines"/> property of the current <see cref="TextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBox</typeparam>                                                                       
        /// <param name=" textBox">current <see cref="TextBox"/></param>                                                          
        /// <param name="maxLines">maxLines value</param>                                                                            
        /// <returns>current textBox</returns>                                                                                    
        public static TType MaxLines<TType>(this TType textBox, Int32 maxLines) where TType : notnull, TextBox
        {
            textBox.MaxLines = maxLines;
            return textBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBox.Text"/> property of the current <see cref="TextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBox</typeparam>                                                                       
        /// <param name=" textBox">current <see cref="TextBox"/></param>                                                          
        /// <param name="text">text value</param>                                                                            
        /// <returns>current textBox</returns>                                                                                    
        public static TType Text<TType>(this TType textBox, String text) where TType : notnull, TextBox
        {
            textBox.Text = text;
            return textBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBox.CharacterCasing"/> property of the current <see cref="TextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBox</typeparam>                                                                       
        /// <param name=" textBox">current <see cref="TextBox"/></param>                                                          
        /// <param name="characterCasing">characterCasing value</param>                                                                            
        /// <returns>current textBox</returns>                                                                                    
        public static TType CharacterCasing<TType>(this TType textBox, CharacterCasing characterCasing) where TType : notnull, TextBox
        {
            textBox.CharacterCasing = characterCasing;
            return textBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBox.MaxLength"/> property of the current <see cref="TextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBox</typeparam>                                                                       
        /// <param name=" textBox">current <see cref="TextBox"/></param>                                                          
        /// <param name="maxLength">maxLength value</param>                                                                            
        /// <returns>current textBox</returns>                                                                                    
        public static TType MaxLength<TType>(this TType textBox, Int32 maxLength) where TType : notnull, TextBox
        {
            textBox.MaxLength = maxLength;
            return textBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBox.TextAlignment"/> property of the current <see cref="TextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBox</typeparam>                                                                       
        /// <param name=" textBox">current <see cref="TextBox"/></param>                                                          
        /// <param name="textAlignment">textAlignment value</param>                                                                            
        /// <returns>current textBox</returns>                                                                                    
        public static TType TextAlignment<TType>(this TType textBox, TextAlignment textAlignment) where TType : notnull, TextBox
        {
            textBox.TextAlignment = textAlignment;
            return textBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBox.SelectedText"/> property of the current <see cref="TextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBox</typeparam>                                                                       
        /// <param name=" textBox">current <see cref="TextBox"/></param>                                                          
        /// <param name="selectedText">selectedText value</param>                                                                            
        /// <returns>current textBox</returns>                                                                                    
        public static TType SelectedText<TType>(this TType textBox, String selectedText) where TType : notnull, TextBox
        {
            textBox.SelectedText = selectedText;
            return textBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBox.SelectionLength"/> property of the current <see cref="TextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBox</typeparam>                                                                       
        /// <param name=" textBox">current <see cref="TextBox"/></param>                                                          
        /// <param name="selectionLength">selectionLength value</param>                                                                            
        /// <returns>current textBox</returns>                                                                                    
        public static TType SelectionLength<TType>(this TType textBox, Int32 selectionLength) where TType : notnull, TextBox
        {
            textBox.SelectionLength = selectionLength;
            return textBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBox.SelectionStart"/> property of the current <see cref="TextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBox</typeparam>                                                                       
        /// <param name=" textBox">current <see cref="TextBox"/></param>                                                          
        /// <param name="selectionStart">selectionStart value</param>                                                                            
        /// <returns>current textBox</returns>                                                                                    
        public static TType SelectionStart<TType>(this TType textBox, Int32 selectionStart) where TType : notnull, TextBox
        {
            textBox.SelectionStart = selectionStart;
            return textBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBox.CaretIndex"/> property of the current <see cref="TextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBox</typeparam>                                                                       
        /// <param name=" textBox">current <see cref="TextBox"/></param>                                                          
        /// <param name="caretIndex">caretIndex value</param>                                                                            
        /// <returns>current textBox</returns>                                                                                    
        public static TType CaretIndex<TType>(this TType textBox, Int32 caretIndex) where TType : notnull, TextBox
        {
            textBox.CaretIndex = caretIndex;
            return textBox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBox.TextDecorations"/> property of the current <see cref="TextBox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBox</typeparam>                                                                       
        /// <param name=" textBox">current <see cref="TextBox"/></param>                                                          
        /// <param name="textDecorations">textDecorations value</param>                                                                            
        /// <returns>current textBox</returns>                                                                                    
        public static TType TextDecorations<TType>(this TType textBox, TextDecorationCollection textDecorations) where TType : notnull, TextBox
        {
            textBox.TextDecorations = textDecorations;
            return textBox;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ToolBar"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ToolBarFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolBar.Band"/> property of the current <see cref="ToolBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolBar</typeparam>                                                                       
        /// <param name=" toolBar">current <see cref="ToolBar"/></param>                                                          
        /// <param name="band">band value</param>                                                                            
        /// <returns>current toolBar</returns>                                                                                    
        public static TType Band<TType>(this TType toolBar, Int32 band) where TType : notnull, ToolBar
        {
            toolBar.Band = band;
            return toolBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolBar.BandIndex"/> property of the current <see cref="ToolBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolBar</typeparam>                                                                       
        /// <param name=" toolBar">current <see cref="ToolBar"/></param>                                                          
        /// <param name="bandIndex">bandIndex value</param>                                                                            
        /// <returns>current toolBar</returns>                                                                                    
        public static TType BandIndex<TType>(this TType toolBar, Int32 bandIndex) where TType : notnull, ToolBar
        {
            toolBar.BandIndex = bandIndex;
            return toolBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolBar.IsOverflowOpen"/> property of the current <see cref="ToolBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolBar</typeparam>                                                                       
        /// <param name=" toolBar">current <see cref="ToolBar"/></param>                                                          
        /// <param name="isOverflowOpen">isOverflowOpen value</param>                                                                            
        /// <returns>current toolBar</returns>                                                                                    
        public static TType IsOverflowOpen<TType>(this TType toolBar, Boolean isOverflowOpen) where TType : notnull, ToolBar
        {
            toolBar.IsOverflowOpen = isOverflowOpen;
            return toolBar;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ToolBarTray"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ToolBarTrayFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolBarTray.Background"/> property of the current <see cref="ToolBarTray"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolBarTray</typeparam>                                                                       
        /// <param name=" toolBarTray">current <see cref="ToolBarTray"/></param>                                                          
        /// <param name="background">background value</param>                                                                            
        /// <returns>current toolBarTray</returns>                                                                                    
        public static TType Background<TType>(this TType toolBarTray, Brush background) where TType : notnull, ToolBarTray
        {
            toolBarTray.Background = background;
            return toolBarTray;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolBarTray.Orientation"/> property of the current <see cref="ToolBarTray"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolBarTray</typeparam>                                                                       
        /// <param name=" toolBarTray">current <see cref="ToolBarTray"/></param>                                                          
        /// <param name="orientation">orientation value</param>                                                                            
        /// <returns>current toolBarTray</returns>                                                                                    
        public static TType Orientation<TType>(this TType toolBarTray, Orientation orientation) where TType : notnull, ToolBarTray
        {
            toolBarTray.Orientation = orientation;
            return toolBarTray;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolBarTray.IsLocked"/> property of the current <see cref="ToolBarTray"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolBarTray</typeparam>                                                                       
        /// <param name=" toolBarTray">current <see cref="ToolBarTray"/></param>                                                          
        /// <param name="isLocked">isLocked value</param>                                                                            
        /// <returns>current toolBarTray</returns>                                                                                    
        public static TType IsLocked<TType>(this TType toolBarTray, Boolean isLocked) where TType : notnull, ToolBarTray
        {
            toolBarTray.IsLocked = isLocked;
            return toolBarTray;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ToolTip"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ToolTipFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolTip.HorizontalOffset"/> property of the current <see cref="ToolTip"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolTip</typeparam>                                                                       
        /// <param name=" toolTip">current <see cref="ToolTip"/></param>                                                          
        /// <param name="horizontalOffset">horizontalOffset value</param>                                                                            
        /// <returns>current toolTip</returns>                                                                                    
        public static TType HorizontalOffset<TType>(this TType toolTip, Double horizontalOffset) where TType : notnull, ToolTip
        {
            toolTip.HorizontalOffset = horizontalOffset;
            return toolTip;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolTip.VerticalOffset"/> property of the current <see cref="ToolTip"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolTip</typeparam>                                                                       
        /// <param name=" toolTip">current <see cref="ToolTip"/></param>                                                          
        /// <param name="verticalOffset">verticalOffset value</param>                                                                            
        /// <returns>current toolTip</returns>                                                                                    
        public static TType VerticalOffset<TType>(this TType toolTip, Double verticalOffset) where TType : notnull, ToolTip
        {
            toolTip.VerticalOffset = verticalOffset;
            return toolTip;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolTip.IsOpen"/> property of the current <see cref="ToolTip"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolTip</typeparam>                                                                       
        /// <param name=" toolTip">current <see cref="ToolTip"/></param>                                                          
        /// <param name="isOpen">isOpen value</param>                                                                            
        /// <returns>current toolTip</returns>                                                                                    
        public static TType IsOpen<TType>(this TType toolTip, Boolean isOpen) where TType : notnull, ToolTip
        {
            toolTip.IsOpen = isOpen;
            return toolTip;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolTip.HasDropShadow"/> property of the current <see cref="ToolTip"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolTip</typeparam>                                                                       
        /// <param name=" toolTip">current <see cref="ToolTip"/></param>                                                          
        /// <param name="hasDropShadow">hasDropShadow value</param>                                                                            
        /// <returns>current toolTip</returns>                                                                                    
        public static TType HasDropShadow<TType>(this TType toolTip, Boolean hasDropShadow) where TType : notnull, ToolTip
        {
            toolTip.HasDropShadow = hasDropShadow;
            return toolTip;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolTip.PlacementTarget"/> property of the current <see cref="ToolTip"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolTip</typeparam>                                                                       
        /// <param name=" toolTip">current <see cref="ToolTip"/></param>                                                          
        /// <param name="placementTarget">placementTarget value</param>                                                                            
        /// <returns>current toolTip</returns>                                                                                    
        public static TType PlacementTarget<TType>(this TType toolTip, UIElement placementTarget) where TType : notnull, ToolTip
        {
            toolTip.PlacementTarget = placementTarget;
            return toolTip;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolTip.PlacementRectangle"/> property of the current <see cref="ToolTip"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolTip</typeparam>                                                                       
        /// <param name=" toolTip">current <see cref="ToolTip"/></param>                                                          
        /// <param name="placementRectangle">placementRectangle value</param>                                                                            
        /// <returns>current toolTip</returns>                                                                                    
        public static TType PlacementRectangle<TType>(this TType toolTip, Rect placementRectangle) where TType : notnull, ToolTip
        {
            toolTip.PlacementRectangle = placementRectangle;
            return toolTip;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolTip.Placement"/> property of the current <see cref="ToolTip"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolTip</typeparam>                                                                       
        /// <param name=" toolTip">current <see cref="ToolTip"/></param>                                                          
        /// <param name="placement">placement value</param>                                                                            
        /// <returns>current toolTip</returns>                                                                                    
        public static TType Placement<TType>(this TType toolTip, PlacementMode placement) where TType : notnull, ToolTip
        {
            toolTip.Placement = placement;
            return toolTip;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolTip.CustomPopupPlacementCallback"/> property of the current <see cref="ToolTip"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolTip</typeparam>                                                                       
        /// <param name=" toolTip">current <see cref="ToolTip"/></param>                                                          
        /// <param name="customPopupPlacementCallback">customPopupPlacementCallback value</param>                                                                            
        /// <returns>current toolTip</returns>                                                                                    
        public static TType CustomPopupPlacementCallback<TType>(this TType toolTip, CustomPopupPlacementCallback customPopupPlacementCallback) where TType : notnull, ToolTip
        {
            toolTip.CustomPopupPlacementCallback = customPopupPlacementCallback;
            return toolTip;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolTip.StaysOpen"/> property of the current <see cref="ToolTip"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolTip</typeparam>                                                                       
        /// <param name=" toolTip">current <see cref="ToolTip"/></param>                                                          
        /// <param name="staysOpen">staysOpen value</param>                                                                            
        /// <returns>current toolTip</returns>                                                                                    
        public static TType StaysOpen<TType>(this TType toolTip, Boolean staysOpen) where TType : notnull, ToolTip
        {
            toolTip.StaysOpen = staysOpen;
            return toolTip;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TreeView"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TreeViewFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TreeView.SelectedValuePath"/> property of the current <see cref="TreeView"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TreeView</typeparam>                                                                       
        /// <param name=" treeView">current <see cref="TreeView"/></param>                                                          
        /// <param name="selectedValuePath">selectedValuePath value</param>                                                                            
        /// <returns>current treeView</returns>                                                                                    
        public static TType SelectedValuePath<TType>(this TType treeView, String selectedValuePath) where TType : notnull, TreeView
        {
            treeView.SelectedValuePath = selectedValuePath;
            return treeView;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TreeViewItem"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TreeViewItemFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TreeViewItem.IsExpanded"/> property of the current <see cref="TreeViewItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TreeViewItem</typeparam>                                                                       
        /// <param name=" treeViewItem">current <see cref="TreeViewItem"/></param>                                                          
        /// <param name="isExpanded">isExpanded value</param>                                                                            
        /// <returns>current treeViewItem</returns>                                                                                    
        public static TType IsExpanded<TType>(this TType treeViewItem, Boolean isExpanded) where TType : notnull, TreeViewItem
        {
            treeViewItem.IsExpanded = isExpanded;
            return treeViewItem;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TreeViewItem.IsSelected"/> property of the current <see cref="TreeViewItem"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TreeViewItem</typeparam>                                                                       
        /// <param name=" treeViewItem">current <see cref="TreeViewItem"/></param>                                                          
        /// <param name="isSelected">isSelected value</param>                                                                            
        /// <returns>current treeViewItem</returns>                                                                                    
        public static TType IsSelected<TType>(this TType treeViewItem, Boolean isSelected) where TType : notnull, TreeViewItem
        {
            treeViewItem.IsSelected = isSelected;
            return treeViewItem;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Viewbox"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ViewboxFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Viewbox.Child"/> property of the current <see cref="Viewbox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Viewbox</typeparam>                                                                       
        /// <param name=" viewbox">current <see cref="Viewbox"/></param>                                                          
        /// <param name="child">child value</param>                                                                            
        /// <returns>current viewbox</returns>                                                                                    
        public static TType Child<TType>(this TType viewbox, UIElement child) where TType : notnull, Viewbox
        {
            viewbox.Child = child;
            return viewbox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Viewbox.Stretch"/> property of the current <see cref="Viewbox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Viewbox</typeparam>                                                                       
        /// <param name=" viewbox">current <see cref="Viewbox"/></param>                                                          
        /// <param name="stretch">stretch value</param>                                                                            
        /// <returns>current viewbox</returns>                                                                                    
        public static TType Stretch<TType>(this TType viewbox, Stretch stretch) where TType : notnull, Viewbox
        {
            viewbox.Stretch = stretch;
            return viewbox;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Viewbox.StretchDirection"/> property of the current <see cref="Viewbox"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Viewbox</typeparam>                                                                       
        /// <param name=" viewbox">current <see cref="Viewbox"/></param>                                                          
        /// <param name="stretchDirection">stretchDirection value</param>                                                                            
        /// <returns>current viewbox</returns>                                                                                    
        public static TType StretchDirection<TType>(this TType viewbox, StretchDirection stretchDirection) where TType : notnull, Viewbox
        {
            viewbox.StretchDirection = stretchDirection;
            return viewbox;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Viewport3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Viewport3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Viewport3D.Camera"/> property of the current <see cref="Viewport3D"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Viewport3D</typeparam>                                                                       
        /// <param name=" viewport3D">current <see cref="Viewport3D"/></param>                                                          
        /// <param name="camera">camera value</param>                                                                            
        /// <returns>current viewport3D</returns>                                                                                    
        public static TType Camera<TType>(this TType viewport3D, Camera camera) where TType : notnull, Viewport3D
        {
            viewport3D.Camera = camera;
            return viewport3D;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="VirtualizingStackPanel"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class VirtualizingStackPanelFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="VirtualizingStackPanel.Orientation"/> property of the current <see cref="VirtualizingStackPanel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VirtualizingStackPanel</typeparam>                                                                       
        /// <param name=" virtualizingStackPanel">current <see cref="VirtualizingStackPanel"/></param>                                                          
        /// <param name="orientation">orientation value</param>                                                                            
        /// <returns>current virtualizingStackPanel</returns>                                                                                    
        public static TType Orientation<TType>(this TType virtualizingStackPanel, Orientation orientation) where TType : notnull, VirtualizingStackPanel
        {
            virtualizingStackPanel.Orientation = orientation;
            return virtualizingStackPanel;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VirtualizingStackPanel.CanHorizontallyScroll"/> property of the current <see cref="VirtualizingStackPanel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VirtualizingStackPanel</typeparam>                                                                       
        /// <param name=" virtualizingStackPanel">current <see cref="VirtualizingStackPanel"/></param>                                                          
        /// <param name="canHorizontallyScroll">canHorizontallyScroll value</param>                                                                            
        /// <returns>current virtualizingStackPanel</returns>                                                                                    
        public static TType CanHorizontallyScroll<TType>(this TType virtualizingStackPanel, Boolean canHorizontallyScroll) where TType : notnull, VirtualizingStackPanel
        {
            virtualizingStackPanel.CanHorizontallyScroll = canHorizontallyScroll;
            return virtualizingStackPanel;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VirtualizingStackPanel.CanVerticallyScroll"/> property of the current <see cref="VirtualizingStackPanel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VirtualizingStackPanel</typeparam>                                                                       
        /// <param name=" virtualizingStackPanel">current <see cref="VirtualizingStackPanel"/></param>                                                          
        /// <param name="canVerticallyScroll">canVerticallyScroll value</param>                                                                            
        /// <returns>current virtualizingStackPanel</returns>                                                                                    
        public static TType CanVerticallyScroll<TType>(this TType virtualizingStackPanel, Boolean canVerticallyScroll) where TType : notnull, VirtualizingStackPanel
        {
            virtualizingStackPanel.CanVerticallyScroll = canVerticallyScroll;
            return virtualizingStackPanel;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VirtualizingStackPanel.ScrollOwner"/> property of the current <see cref="VirtualizingStackPanel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VirtualizingStackPanel</typeparam>                                                                       
        /// <param name=" virtualizingStackPanel">current <see cref="VirtualizingStackPanel"/></param>                                                          
        /// <param name="scrollOwner">scrollOwner value</param>                                                                            
        /// <returns>current virtualizingStackPanel</returns>                                                                                    
        public static TType ScrollOwner<TType>(this TType virtualizingStackPanel, ScrollViewer scrollOwner) where TType : notnull, VirtualizingStackPanel
        {
            virtualizingStackPanel.ScrollOwner = scrollOwner;
            return virtualizingStackPanel;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="WebBrowser"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class WebBrowserFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="WebBrowser.Source"/> property of the current <see cref="WebBrowser"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" webBrowser">current <see cref="WebBrowser"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current webBrowser</returns>                                                                                    
        public static WebBrowser Source(this WebBrowser webBrowser, Uri source)
        {
            webBrowser.Source = source;
            return webBrowser;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="WebBrowser.ObjectForScripting"/> property of the current <see cref="WebBrowser"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" webBrowser">current <see cref="WebBrowser"/></param>                                                          
        /// <param name="objectForScripting">objectForScripting value</param>                                                                            
        /// <returns>current webBrowser</returns>                                                                                    
        public static WebBrowser ObjectForScripting(this WebBrowser webBrowser, Object objectForScripting)
        {
            webBrowser.ObjectForScripting = objectForScripting;
            return webBrowser;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="WrapPanel"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class WrapPanelFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="WrapPanel.ItemWidth"/> property of the current <see cref="WrapPanel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">WrapPanel</typeparam>                                                                       
        /// <param name=" wrapPanel">current <see cref="WrapPanel"/></param>                                                          
        /// <param name="itemWidth">itemWidth value</param>                                                                            
        /// <returns>current wrapPanel</returns>                                                                                    
        public static TType ItemWidth<TType>(this TType wrapPanel, Double itemWidth) where TType : notnull, WrapPanel
        {
            wrapPanel.ItemWidth = itemWidth;
            return wrapPanel;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="WrapPanel.ItemHeight"/> property of the current <see cref="WrapPanel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">WrapPanel</typeparam>                                                                       
        /// <param name=" wrapPanel">current <see cref="WrapPanel"/></param>                                                          
        /// <param name="itemHeight">itemHeight value</param>                                                                            
        /// <returns>current wrapPanel</returns>                                                                                    
        public static TType ItemHeight<TType>(this TType wrapPanel, Double itemHeight) where TType : notnull, WrapPanel
        {
            wrapPanel.ItemHeight = itemHeight;
            return wrapPanel;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="WrapPanel.Orientation"/> property of the current <see cref="WrapPanel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">WrapPanel</typeparam>                                                                       
        /// <param name=" wrapPanel">current <see cref="WrapPanel"/></param>                                                          
        /// <param name="orientation">orientation value</param>                                                                            
        /// <returns>current wrapPanel</returns>                                                                                    
        public static TType Orientation<TType>(this TType wrapPanel, Orientation orientation) where TType : notnull, WrapPanel
        {
            wrapPanel.Orientation = orientation;
            return wrapPanel;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ColumnDefinition"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ColumnDefinitionFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ColumnDefinition.Width"/> property of the current <see cref="ColumnDefinition"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ColumnDefinition</typeparam>                                                                       
        /// <param name=" columnDefinition">current <see cref="ColumnDefinition"/></param>                                                          
        /// <param name="width">width value</param>                                                                            
        /// <returns>current columnDefinition</returns>                                                                                    
        public static TType Width<TType>(this TType columnDefinition, GridLength width) where TType : notnull, ColumnDefinition
        {
            columnDefinition.Width = width;
            return columnDefinition;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ColumnDefinition.MinWidth"/> property of the current <see cref="ColumnDefinition"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ColumnDefinition</typeparam>                                                                       
        /// <param name=" columnDefinition">current <see cref="ColumnDefinition"/></param>                                                          
        /// <param name="minWidth">minWidth value</param>                                                                            
        /// <returns>current columnDefinition</returns>                                                                                    
        public static TType MinWidth<TType>(this TType columnDefinition, Double minWidth) where TType : notnull, ColumnDefinition
        {
            columnDefinition.MinWidth = minWidth;
            return columnDefinition;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ColumnDefinition.MaxWidth"/> property of the current <see cref="ColumnDefinition"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ColumnDefinition</typeparam>                                                                       
        /// <param name=" columnDefinition">current <see cref="ColumnDefinition"/></param>                                                          
        /// <param name="maxWidth">maxWidth value</param>                                                                            
        /// <returns>current columnDefinition</returns>                                                                                    
        public static TType MaxWidth<TType>(this TType columnDefinition, Double maxWidth) where TType : notnull, ColumnDefinition
        {
            columnDefinition.MaxWidth = maxWidth;
            return columnDefinition;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="RowDefinition"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class RowDefinitionFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="RowDefinition.Height"/> property of the current <see cref="RowDefinition"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RowDefinition</typeparam>                                                                       
        /// <param name=" rowDefinition">current <see cref="RowDefinition"/></param>                                                          
        /// <param name="height">height value</param>                                                                            
        /// <returns>current rowDefinition</returns>                                                                                    
        public static TType Height<TType>(this TType rowDefinition, GridLength height) where TType : notnull, RowDefinition
        {
            rowDefinition.Height = height;
            return rowDefinition;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RowDefinition.MinHeight"/> property of the current <see cref="RowDefinition"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RowDefinition</typeparam>                                                                       
        /// <param name=" rowDefinition">current <see cref="RowDefinition"/></param>                                                          
        /// <param name="minHeight">minHeight value</param>                                                                            
        /// <returns>current rowDefinition</returns>                                                                                    
        public static TType MinHeight<TType>(this TType rowDefinition, Double minHeight) where TType : notnull, RowDefinition
        {
            rowDefinition.MinHeight = minHeight;
            return rowDefinition;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RowDefinition.MaxHeight"/> property of the current <see cref="RowDefinition"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RowDefinition</typeparam>                                                                       
        /// <param name=" rowDefinition">current <see cref="RowDefinition"/></param>                                                          
        /// <param name="maxHeight">maxHeight value</param>                                                                            
        /// <returns>current rowDefinition</returns>                                                                                    
        public static TType MaxHeight<TType>(this TType rowDefinition, Double maxHeight) where TType : notnull, RowDefinition
        {
            rowDefinition.MaxHeight = maxHeight;
            return rowDefinition;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BulletDecorator"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BulletDecoratorFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BulletDecorator.Background"/> property of the current <see cref="BulletDecorator"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BulletDecorator</typeparam>                                                                       
        /// <param name=" bulletDecorator">current <see cref="BulletDecorator"/></param>                                                          
        /// <param name="background">background value</param>                                                                            
        /// <returns>current bulletDecorator</returns>                                                                                    
        public static TType Background<TType>(this TType bulletDecorator, Brush background) where TType : notnull, BulletDecorator
        {
            bulletDecorator.Background = background;
            return bulletDecorator;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BulletDecorator.Bullet"/> property of the current <see cref="BulletDecorator"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BulletDecorator</typeparam>                                                                       
        /// <param name=" bulletDecorator">current <see cref="BulletDecorator"/></param>                                                          
        /// <param name="bullet">bullet value</param>                                                                            
        /// <returns>current bulletDecorator</returns>                                                                                    
        public static TType Bullet<TType>(this TType bulletDecorator, UIElement bullet) where TType : notnull, BulletDecorator
        {
            bulletDecorator.Bullet = bullet;
            return bulletDecorator;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ButtonBase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ButtonBaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ButtonBase.Command"/> property of the current <see cref="ButtonBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ButtonBase</typeparam>                                                                       
        /// <param name=" buttonBase">current <see cref="ButtonBase"/></param>                                                          
        /// <param name="command">command value</param>                                                                            
        /// <returns>current buttonBase</returns>                                                                                    
        public static TType Command<TType>(this TType buttonBase, ICommand command) where TType : notnull, ButtonBase
        {
            buttonBase.Command = command;
            return buttonBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ButtonBase.CommandParameter"/> property of the current <see cref="ButtonBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ButtonBase</typeparam>                                                                       
        /// <param name=" buttonBase">current <see cref="ButtonBase"/></param>                                                          
        /// <param name="commandParameter">commandParameter value</param>                                                                            
        /// <returns>current buttonBase</returns>                                                                                    
        public static TType CommandParameter<TType>(this TType buttonBase, Object commandParameter) where TType : notnull, ButtonBase
        {
            buttonBase.CommandParameter = commandParameter;
            return buttonBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ButtonBase.CommandTarget"/> property of the current <see cref="ButtonBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ButtonBase</typeparam>                                                                       
        /// <param name=" buttonBase">current <see cref="ButtonBase"/></param>                                                          
        /// <param name="commandTarget">commandTarget value</param>                                                                            
        /// <returns>current buttonBase</returns>                                                                                    
        public static TType CommandTarget<TType>(this TType buttonBase, IInputElement commandTarget) where TType : notnull, ButtonBase
        {
            buttonBase.CommandTarget = commandTarget;
            return buttonBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ButtonBase.ClickMode"/> property of the current <see cref="ButtonBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ButtonBase</typeparam>                                                                       
        /// <param name=" buttonBase">current <see cref="ButtonBase"/></param>                                                          
        /// <param name="clickMode">clickMode value</param>                                                                            
        /// <returns>current buttonBase</returns>                                                                                    
        public static TType ClickMode<TType>(this TType buttonBase, ClickMode clickMode) where TType : notnull, ButtonBase
        {
            buttonBase.ClickMode = clickMode;
            return buttonBase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DataGridColumnHeader"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DataGridColumnHeaderFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumnHeader.SeparatorBrush"/> property of the current <see cref="DataGridColumnHeader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumnHeader</typeparam>                                                                       
        /// <param name=" dataGridColumnHeader">current <see cref="DataGridColumnHeader"/></param>                                                          
        /// <param name="separatorBrush">separatorBrush value</param>                                                                            
        /// <returns>current dataGridColumnHeader</returns>                                                                                    
        public static TType SeparatorBrush<TType>(this TType dataGridColumnHeader, Brush separatorBrush) where TType : notnull, DataGridColumnHeader
        {
            dataGridColumnHeader.SeparatorBrush = separatorBrush;
            return dataGridColumnHeader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridColumnHeader.SeparatorVisibility"/> property of the current <see cref="DataGridColumnHeader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridColumnHeader</typeparam>                                                                       
        /// <param name=" dataGridColumnHeader">current <see cref="DataGridColumnHeader"/></param>                                                          
        /// <param name="separatorVisibility">separatorVisibility value</param>                                                                            
        /// <returns>current dataGridColumnHeader</returns>                                                                                    
        public static TType SeparatorVisibility<TType>(this TType dataGridColumnHeader, Visibility separatorVisibility) where TType : notnull, DataGridColumnHeader
        {
            dataGridColumnHeader.SeparatorVisibility = separatorVisibility;
            return dataGridColumnHeader;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DataGridRowHeader"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DataGridRowHeaderFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridRowHeader.SeparatorBrush"/> property of the current <see cref="DataGridRowHeader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridRowHeader</typeparam>                                                                       
        /// <param name=" dataGridRowHeader">current <see cref="DataGridRowHeader"/></param>                                                          
        /// <param name="separatorBrush">separatorBrush value</param>                                                                            
        /// <returns>current dataGridRowHeader</returns>                                                                                    
        public static TType SeparatorBrush<TType>(this TType dataGridRowHeader, Brush separatorBrush) where TType : notnull, DataGridRowHeader
        {
            dataGridRowHeader.SeparatorBrush = separatorBrush;
            return dataGridRowHeader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DataGridRowHeader.SeparatorVisibility"/> property of the current <see cref="DataGridRowHeader"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DataGridRowHeader</typeparam>                                                                       
        /// <param name=" dataGridRowHeader">current <see cref="DataGridRowHeader"/></param>                                                          
        /// <param name="separatorVisibility">separatorVisibility value</param>                                                                            
        /// <returns>current dataGridRowHeader</returns>                                                                                    
        public static TType SeparatorVisibility<TType>(this TType dataGridRowHeader, Visibility separatorVisibility) where TType : notnull, DataGridRowHeader
        {
            dataGridRowHeader.SeparatorVisibility = separatorVisibility;
            return dataGridRowHeader;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DocumentPageView"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DocumentPageViewFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DocumentPageView.DocumentPaginator"/> property of the current <see cref="DocumentPageView"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DocumentPageView</typeparam>                                                                       
        /// <param name=" documentPageView">current <see cref="DocumentPageView"/></param>                                                          
        /// <param name="documentPaginator">documentPaginator value</param>                                                                            
        /// <returns>current documentPageView</returns>                                                                                    
        public static TType DocumentPaginator<TType>(this TType documentPageView, DocumentPaginator documentPaginator) where TType : notnull, DocumentPageView
        {
            documentPageView.DocumentPaginator = documentPaginator;
            return documentPageView;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DocumentPageView.PageNumber"/> property of the current <see cref="DocumentPageView"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DocumentPageView</typeparam>                                                                       
        /// <param name=" documentPageView">current <see cref="DocumentPageView"/></param>                                                          
        /// <param name="pageNumber">pageNumber value</param>                                                                            
        /// <returns>current documentPageView</returns>                                                                                    
        public static TType PageNumber<TType>(this TType documentPageView, Int32 pageNumber) where TType : notnull, DocumentPageView
        {
            documentPageView.PageNumber = pageNumber;
            return documentPageView;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DocumentPageView.Stretch"/> property of the current <see cref="DocumentPageView"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DocumentPageView</typeparam>                                                                       
        /// <param name=" documentPageView">current <see cref="DocumentPageView"/></param>                                                          
        /// <param name="stretch">stretch value</param>                                                                            
        /// <returns>current documentPageView</returns>                                                                                    
        public static TType Stretch<TType>(this TType documentPageView, Stretch stretch) where TType : notnull, DocumentPageView
        {
            documentPageView.Stretch = stretch;
            return documentPageView;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DocumentPageView.StretchDirection"/> property of the current <see cref="DocumentPageView"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DocumentPageView</typeparam>                                                                       
        /// <param name=" documentPageView">current <see cref="DocumentPageView"/></param>                                                          
        /// <param name="stretchDirection">stretchDirection value</param>                                                                            
        /// <returns>current documentPageView</returns>                                                                                    
        public static TType StretchDirection<TType>(this TType documentPageView, StretchDirection stretchDirection) where TType : notnull, DocumentPageView
        {
            documentPageView.StretchDirection = stretchDirection;
            return documentPageView;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DocumentViewerBase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DocumentViewerBaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DocumentViewerBase.Document"/> property of the current <see cref="DocumentViewerBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DocumentViewerBase</typeparam>                                                                       
        /// <param name=" documentViewerBase">current <see cref="DocumentViewerBase"/></param>                                                          
        /// <param name="document">document value</param>                                                                            
        /// <returns>current documentViewerBase</returns>                                                                                    
        public static TType Document<TType>(this TType documentViewerBase, IDocumentPaginatorSource document) where TType : notnull, DocumentViewerBase
        {
            documentViewerBase.Document = document;
            return documentViewerBase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="GridViewRowPresenterBase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GridViewRowPresenterBaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GridViewRowPresenterBase.Columns"/> property of the current <see cref="GridViewRowPresenterBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GridViewRowPresenterBase</typeparam>                                                                       
        /// <param name=" gridViewRowPresenterBase">current <see cref="GridViewRowPresenterBase"/></param>                                                          
        /// <param name="columns">columns value</param>                                                                            
        /// <returns>current gridViewRowPresenterBase</returns>                                                                                    
        public static TType Columns<TType>(this TType gridViewRowPresenterBase, GridViewColumnCollection columns) where TType : notnull, GridViewRowPresenterBase
        {
            gridViewRowPresenterBase.Columns = columns;
            return gridViewRowPresenterBase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="MenuBase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MenuBaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="MenuBase.ItemContainerTemplateSelector"/> property of the current <see cref="MenuBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MenuBase</typeparam>                                                                       
        /// <param name=" menuBase">current <see cref="MenuBase"/></param>                                                          
        /// <param name="itemContainerTemplateSelector">itemContainerTemplateSelector value</param>                                                                            
        /// <returns>current menuBase</returns>                                                                                    
        public static TType ItemContainerTemplateSelector<TType>(this TType menuBase, ItemContainerTemplateSelector itemContainerTemplateSelector) where TType : notnull, MenuBase
        {
            menuBase.ItemContainerTemplateSelector = itemContainerTemplateSelector;
            return menuBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MenuBase.UsesItemContainerTemplate"/> property of the current <see cref="MenuBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MenuBase</typeparam>                                                                       
        /// <param name=" menuBase">current <see cref="MenuBase"/></param>                                                          
        /// <param name="usesItemContainerTemplate">usesItemContainerTemplate value</param>                                                                            
        /// <returns>current menuBase</returns>                                                                                    
        public static TType UsesItemContainerTemplate<TType>(this TType menuBase, Boolean usesItemContainerTemplate) where TType : notnull, MenuBase
        {
            menuBase.UsesItemContainerTemplate = usesItemContainerTemplate;
            return menuBase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Popup"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PopupFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PopupControl.Child"/> property of the current <see cref="PopupControl"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Popup</typeparam>                                                                       
        /// <param name=" popup">current <see cref="Popup"/></param>                                                          
        /// <param name="child">child value</param>                                                                            
        /// <returns>current popup</returns>                                                                                    
        public static TType Child<TType>(this TType popup, UIElement child) where TType : notnull, PopupControl
        {
            popup.Child = child;
            return popup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PopupControl.IsOpen"/> property of the current <see cref="Popup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Popup</typeparam>                                                                       
        /// <param name=" popup">current <see cref="Popup"/></param>                                                          
        /// <param name="isOpen">isOpen value</param>                                                                            
        /// <returns>current popup</returns>                                                                                    
        public static TType IsOpen<TType>(this TType popup, Boolean isOpen) where TType : notnull, PopupControl
        {
            popup.IsOpen = isOpen;
            return popup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PopupControl.Placement"/> property of the current <see cref="Popup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Popup</typeparam>                                                                       
        /// <param name=" popup">current <see cref="Popup"/></param>                                                          
        /// <param name="placement">placement value</param>                                                                            
        /// <returns>current popup</returns>                                                                                    
        public static TType Placement<TType>(this TType popup, PlacementMode placement) where TType : notnull, PopupControl
        {
            popup.Placement = placement;
            return popup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PopupControl.CustomPopupPlacementCallback"/> property of the current <see cref="Popup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Popup</typeparam>                                                                       
        /// <param name=" popup">current <see cref="Popup"/></param>                                                          
        /// <param name="customPopupPlacementCallback">customPopupPlacementCallback value</param>                                                                            
        /// <returns>current popup</returns>                                                                                    
        public static TType CustomPopupPlacementCallback<TType>(this TType popup, CustomPopupPlacementCallback customPopupPlacementCallback) where TType : notnull, PopupControl
        {
            popup.CustomPopupPlacementCallback = customPopupPlacementCallback;
            return popup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PopupControl.StaysOpen"/> property of the current <see cref="Popup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Popup</typeparam>                                                                       
        /// <param name=" popup">current <see cref="Popup"/></param>                                                          
        /// <param name="staysOpen">staysOpen value</param>                                                                            
        /// <returns>current popup</returns>                                                                                    
        public static TType StaysOpen<TType>(this TType popup, Boolean staysOpen) where TType : notnull, PopupControl
        {
            popup.StaysOpen = staysOpen;
            return popup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PopupControl.HorizontalOffset"/> property of the current <see cref="Popup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Popup</typeparam>                                                                       
        /// <param name=" popup">current <see cref="Popup"/></param>                                                          
        /// <param name="horizontalOffset">horizontalOffset value</param>                                                                            
        /// <returns>current popup</returns>                                                                                    
        public static TType HorizontalOffset<TType>(this TType popup, Double horizontalOffset) where TType : notnull, PopupControl
        {
            popup.HorizontalOffset = horizontalOffset;
            return popup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PopupControl.VerticalOffset"/> property of the current <see cref="Popup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Popup</typeparam>                                                                       
        /// <param name=" popup">current <see cref="Popup"/></param>                                                          
        /// <param name="verticalOffset">verticalOffset value</param>                                                                            
        /// <returns>current popup</returns>                                                                                    
        public static TType VerticalOffset<TType>(this TType popup, Double verticalOffset) where TType : notnull, PopupControl
        {
            popup.VerticalOffset = verticalOffset;
            return popup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PopupControl.PlacementTarget"/> property of the current <see cref="Popup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Popup</typeparam>                                                                       
        /// <param name=" popup">current <see cref="Popup"/></param>                                                          
        /// <param name="placementTarget">placementTarget value</param>                                                                            
        /// <returns>current popup</returns>                                                                                    
        public static TType PlacementTarget<TType>(this TType popup, UIElement placementTarget) where TType : notnull, PopupControl
        {
            popup.PlacementTarget = placementTarget;
            return popup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PopupControl.PlacementRectangle"/> property of the current <see cref="Popup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Popup</typeparam>                                                                       
        /// <param name=" popup">current <see cref="Popup"/></param>                                                          
        /// <param name="placementRectangle">placementRectangle value</param>                                                                            
        /// <returns>current popup</returns>                                                                                    
        public static TType PlacementRectangle<TType>(this TType popup, Rect placementRectangle) where TType : notnull, PopupControl
        {
            popup.PlacementRectangle = placementRectangle;
            return popup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PopupControl.PopupAnimation"/> property of the current <see cref="Popup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Popup</typeparam>                                                                       
        /// <param name=" popup">current <see cref="Popup"/></param>                                                          
        /// <param name="popupAnimation">popupAnimation value</param>                                                                            
        /// <returns>current popup</returns>                                                                                    
        public static TType PopupAnimation<TType>(this TType popup, PopupAnimation popupAnimation) where TType : notnull, PopupControl
        {
            popup.PopupAnimation = popupAnimation;
            return popup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PopupControl.AllowsTransparency"/> property of the current <see cref="Popup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Popup</typeparam>                                                                       
        /// <param name=" popup">current <see cref="Popup"/></param>                                                          
        /// <param name="allowsTransparency">allowsTransparency value</param>                                                                            
        /// <returns>current popup</returns>                                                                                    
        public static TType AllowsTransparency<TType>(this TType popup, Boolean allowsTransparency) where TType : notnull, PopupControl
        {
            popup.AllowsTransparency = allowsTransparency;
            return popup;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="RangeBase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class RangeBaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="RangeBase.Minimum"/> property of the current <see cref="RangeBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RangeBase</typeparam>                                                                       
        /// <param name=" rangeBase">current <see cref="RangeBase"/></param>                                                          
        /// <param name="minimum">minimum value</param>                                                                            
        /// <returns>current rangeBase</returns>                                                                                    
        public static TType Minimum<TType>(this TType rangeBase, Double minimum) where TType : notnull, RangeBase
        {
            rangeBase.Minimum = minimum;
            return rangeBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RangeBase.Maximum"/> property of the current <see cref="RangeBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RangeBase</typeparam>                                                                       
        /// <param name=" rangeBase">current <see cref="RangeBase"/></param>                                                          
        /// <param name="maximum">maximum value</param>                                                                            
        /// <returns>current rangeBase</returns>                                                                                    
        public static TType Maximum<TType>(this TType rangeBase, Double maximum) where TType : notnull, RangeBase
        {
            rangeBase.Maximum = maximum;
            return rangeBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RangeBase.Value"/> property of the current <see cref="RangeBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RangeBase</typeparam>                                                                       
        /// <param name=" rangeBase">current <see cref="RangeBase"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current rangeBase</returns>                                                                                    
        public static TType Value<TType>(this TType rangeBase, Double value) where TType : notnull, RangeBase
        {
            rangeBase.Value = value;
            return rangeBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RangeBase.LargeChange"/> property of the current <see cref="RangeBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RangeBase</typeparam>                                                                       
        /// <param name=" rangeBase">current <see cref="RangeBase"/></param>                                                          
        /// <param name="largeChange">largeChange value</param>                                                                            
        /// <returns>current rangeBase</returns>                                                                                    
        public static TType LargeChange<TType>(this TType rangeBase, Double largeChange) where TType : notnull, RangeBase
        {
            rangeBase.LargeChange = largeChange;
            return rangeBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RangeBase.SmallChange"/> property of the current <see cref="RangeBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RangeBase</typeparam>                                                                       
        /// <param name=" rangeBase">current <see cref="RangeBase"/></param>                                                          
        /// <param name="smallChange">smallChange value</param>                                                                            
        /// <returns>current rangeBase</returns>                                                                                    
        public static TType SmallChange<TType>(this TType rangeBase, Double smallChange) where TType : notnull, RangeBase
        {
            rangeBase.SmallChange = smallChange;
            return rangeBase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="RepeatButton"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class RepeatButtonFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="RepeatButton.Delay"/> property of the current <see cref="RepeatButton"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RepeatButton</typeparam>                                                                       
        /// <param name=" repeatButton">current <see cref="RepeatButton"/></param>                                                          
        /// <param name="delay">delay value</param>                                                                            
        /// <returns>current repeatButton</returns>                                                                                    
        public static TType Delay<TType>(this TType repeatButton, Int32 delay) where TType : notnull, RepeatButton
        {
            repeatButton.Delay = delay;
            return repeatButton;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RepeatButton.Interval"/> property of the current <see cref="RepeatButton"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RepeatButton</typeparam>                                                                       
        /// <param name=" repeatButton">current <see cref="RepeatButton"/></param>                                                          
        /// <param name="interval">interval value</param>                                                                            
        /// <returns>current repeatButton</returns>                                                                                    
        public static TType Interval<TType>(this TType repeatButton, Int32 interval) where TType : notnull, RepeatButton
        {
            repeatButton.Interval = interval;
            return repeatButton;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ScrollBar"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ScrollBarFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ScrollBar.Orientation"/> property of the current <see cref="ScrollBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ScrollBar</typeparam>                                                                       
        /// <param name=" scrollBar">current <see cref="ScrollBar"/></param>                                                          
        /// <param name="orientation">orientation value</param>                                                                            
        /// <returns>current scrollBar</returns>                                                                                    
        public static TType Orientation<TType>(this TType scrollBar, Orientation orientation) where TType : notnull, ScrollBar
        {
            scrollBar.Orientation = orientation;
            return scrollBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScrollBar.ViewportSize"/> property of the current <see cref="ScrollBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ScrollBar</typeparam>                                                                       
        /// <param name=" scrollBar">current <see cref="ScrollBar"/></param>                                                          
        /// <param name="viewportSize">viewportSize value</param>                                                                            
        /// <returns>current scrollBar</returns>                                                                                    
        public static TType ViewportSize<TType>(this TType scrollBar, Double viewportSize) where TType : notnull, ScrollBar
        {
            scrollBar.ViewportSize = viewportSize;
            return scrollBar;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Selector"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SelectorFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Selector.IsSynchronizedWithCurrentItem"/> property of the current <see cref="Selector"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Selector</typeparam>                                                                       
        /// <param name=" selector">current <see cref="Selector"/></param>                                                          
        /// <param name="isSynchronizedWithCurrentItem">isSynchronizedWithCurrentItem value</param>                                                                            
        /// <returns>current selector</returns>                                                                                    
        public static TType IsSynchronizedWithCurrentItem<TType>(this TType selector, Nullable<Boolean> isSynchronizedWithCurrentItem) where TType : notnull, Selector
        {
            selector.IsSynchronizedWithCurrentItem = isSynchronizedWithCurrentItem;
            return selector;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Selector.SelectedIndex"/> property of the current <see cref="Selector"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Selector</typeparam>                                                                       
        /// <param name=" selector">current <see cref="Selector"/></param>                                                          
        /// <param name="selectedIndex">selectedIndex value</param>                                                                            
        /// <returns>current selector</returns>                                                                                    
        public static TType SelectedIndex<TType>(this TType selector, Int32 selectedIndex) where TType : notnull, Selector
        {
            selector.SelectedIndex = selectedIndex;
            return selector;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Selector.SelectedItem"/> property of the current <see cref="Selector"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Selector</typeparam>                                                                       
        /// <param name=" selector">current <see cref="Selector"/></param>                                                          
        /// <param name="selectedItem">selectedItem value</param>                                                                            
        /// <returns>current selector</returns>                                                                                    
        public static TType SelectedItem<TType>(this TType selector, Object selectedItem) where TType : notnull, Selector
        {
            selector.SelectedItem = selectedItem;
            return selector;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Selector.SelectedValue"/> property of the current <see cref="Selector"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Selector</typeparam>                                                                       
        /// <param name=" selector">current <see cref="Selector"/></param>                                                          
        /// <param name="selectedValue">selectedValue value</param>                                                                            
        /// <returns>current selector</returns>                                                                                    
        public static TType SelectedValue<TType>(this TType selector, Object selectedValue) where TType : notnull, Selector
        {
            selector.SelectedValue = selectedValue;
            return selector;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Selector.SelectedValuePath"/> property of the current <see cref="Selector"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Selector</typeparam>                                                                       
        /// <param name=" selector">current <see cref="Selector"/></param>                                                          
        /// <param name="selectedValuePath">selectedValuePath value</param>                                                                            
        /// <returns>current selector</returns>                                                                                    
        public static TType SelectedValuePath<TType>(this TType selector, String selectedValuePath) where TType : notnull, Selector
        {
            selector.SelectedValuePath = selectedValuePath;
            return selector;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="StatusBar"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class StatusBarFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="StatusBar.ItemContainerTemplateSelector"/> property of the current <see cref="StatusBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">StatusBar</typeparam>                                                                       
        /// <param name=" statusBar">current <see cref="StatusBar"/></param>                                                          
        /// <param name="itemContainerTemplateSelector">itemContainerTemplateSelector value</param>                                                                            
        /// <returns>current statusBar</returns>                                                                                    
        public static TType ItemContainerTemplateSelector<TType>(this TType statusBar, ItemContainerTemplateSelector itemContainerTemplateSelector) where TType : notnull, StatusBar
        {
            statusBar.ItemContainerTemplateSelector = itemContainerTemplateSelector;
            return statusBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="StatusBar.UsesItemContainerTemplate"/> property of the current <see cref="StatusBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">StatusBar</typeparam>                                                                       
        /// <param name=" statusBar">current <see cref="StatusBar"/></param>                                                          
        /// <param name="usesItemContainerTemplate">usesItemContainerTemplate value</param>                                                                            
        /// <returns>current statusBar</returns>                                                                                    
        public static TType UsesItemContainerTemplate<TType>(this TType statusBar, Boolean usesItemContainerTemplate) where TType : notnull, StatusBar
        {
            statusBar.UsesItemContainerTemplate = usesItemContainerTemplate;
            return statusBar;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TextBoxBase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TextBoxBaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBoxBase.IsReadOnly"/> property of the current <see cref="TextBoxBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBoxBase</typeparam>                                                                       
        /// <param name=" textBoxBase">current <see cref="TextBoxBase"/></param>                                                          
        /// <param name="isReadOnly">isReadOnly value</param>                                                                            
        /// <returns>current textBoxBase</returns>                                                                                    
        public static TType IsReadOnly<TType>(this TType textBoxBase, Boolean isReadOnly) where TType : notnull, TextBoxBase
        {
            textBoxBase.IsReadOnly = isReadOnly;
            return textBoxBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBoxBase.IsReadOnlyCaretVisible"/> property of the current <see cref="TextBoxBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBoxBase</typeparam>                                                                       
        /// <param name=" textBoxBase">current <see cref="TextBoxBase"/></param>                                                          
        /// <param name="isReadOnlyCaretVisible">isReadOnlyCaretVisible value</param>                                                                            
        /// <returns>current textBoxBase</returns>                                                                                    
        public static TType IsReadOnlyCaretVisible<TType>(this TType textBoxBase, Boolean isReadOnlyCaretVisible) where TType : notnull, TextBoxBase
        {
            textBoxBase.IsReadOnlyCaretVisible = isReadOnlyCaretVisible;
            return textBoxBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBoxBase.AcceptsReturn"/> property of the current <see cref="TextBoxBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBoxBase</typeparam>                                                                       
        /// <param name=" textBoxBase">current <see cref="TextBoxBase"/></param>                                                          
        /// <param name="acceptsReturn">acceptsReturn value</param>                                                                            
        /// <returns>current textBoxBase</returns>                                                                                    
        public static TType AcceptsReturn<TType>(this TType textBoxBase, Boolean acceptsReturn) where TType : notnull, TextBoxBase
        {
            textBoxBase.AcceptsReturn = acceptsReturn;
            return textBoxBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBoxBase.AcceptsTab"/> property of the current <see cref="TextBoxBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBoxBase</typeparam>                                                                       
        /// <param name=" textBoxBase">current <see cref="TextBoxBase"/></param>                                                          
        /// <param name="acceptsTab">acceptsTab value</param>                                                                            
        /// <returns>current textBoxBase</returns>                                                                                    
        public static TType AcceptsTab<TType>(this TType textBoxBase, Boolean acceptsTab) where TType : notnull, TextBoxBase
        {
            textBoxBase.AcceptsTab = acceptsTab;
            return textBoxBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBoxBase.HorizontalScrollBarVisibility"/> property of the current <see cref="TextBoxBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBoxBase</typeparam>                                                                       
        /// <param name=" textBoxBase">current <see cref="TextBoxBase"/></param>                                                          
        /// <param name="horizontalScrollBarVisibility">horizontalScrollBarVisibility value</param>                                                                            
        /// <returns>current textBoxBase</returns>                                                                                    
        public static TType HorizontalScrollBarVisibility<TType>(this TType textBoxBase, ScrollBarVisibility horizontalScrollBarVisibility) where TType : notnull, TextBoxBase
        {
            textBoxBase.HorizontalScrollBarVisibility = horizontalScrollBarVisibility;
            return textBoxBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBoxBase.VerticalScrollBarVisibility"/> property of the current <see cref="TextBoxBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBoxBase</typeparam>                                                                       
        /// <param name=" textBoxBase">current <see cref="TextBoxBase"/></param>                                                          
        /// <param name="verticalScrollBarVisibility">verticalScrollBarVisibility value</param>                                                                            
        /// <returns>current textBoxBase</returns>                                                                                    
        public static TType VerticalScrollBarVisibility<TType>(this TType textBoxBase, ScrollBarVisibility verticalScrollBarVisibility) where TType : notnull, TextBoxBase
        {
            textBoxBase.VerticalScrollBarVisibility = verticalScrollBarVisibility;
            return textBoxBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBoxBase.IsUndoEnabled"/> property of the current <see cref="TextBoxBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBoxBase</typeparam>                                                                       
        /// <param name=" textBoxBase">current <see cref="TextBoxBase"/></param>                                                          
        /// <param name="isUndoEnabled">isUndoEnabled value</param>                                                                            
        /// <returns>current textBoxBase</returns>                                                                                    
        public static TType IsUndoEnabled<TType>(this TType textBoxBase, Boolean isUndoEnabled) where TType : notnull, TextBoxBase
        {
            textBoxBase.IsUndoEnabled = isUndoEnabled;
            return textBoxBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBoxBase.UndoLimit"/> property of the current <see cref="TextBoxBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBoxBase</typeparam>                                                                       
        /// <param name=" textBoxBase">current <see cref="TextBoxBase"/></param>                                                          
        /// <param name="undoLimit">undoLimit value</param>                                                                            
        /// <returns>current textBoxBase</returns>                                                                                    
        public static TType UndoLimit<TType>(this TType textBoxBase, Int32 undoLimit) where TType : notnull, TextBoxBase
        {
            textBoxBase.UndoLimit = undoLimit;
            return textBoxBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBoxBase.AutoWordSelection"/> property of the current <see cref="TextBoxBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBoxBase</typeparam>                                                                       
        /// <param name=" textBoxBase">current <see cref="TextBoxBase"/></param>                                                          
        /// <param name="autoWordSelection">autoWordSelection value</param>                                                                            
        /// <returns>current textBoxBase</returns>                                                                                    
        public static TType AutoWordSelection<TType>(this TType textBoxBase, Boolean autoWordSelection) where TType : notnull, TextBoxBase
        {
            textBoxBase.AutoWordSelection = autoWordSelection;
            return textBoxBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBoxBase.SelectionBrush"/> property of the current <see cref="TextBoxBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBoxBase</typeparam>                                                                       
        /// <param name=" textBoxBase">current <see cref="TextBoxBase"/></param>                                                          
        /// <param name="selectionBrush">selectionBrush value</param>                                                                            
        /// <returns>current textBoxBase</returns>                                                                                    
        public static TType SelectionBrush<TType>(this TType textBoxBase, Brush selectionBrush) where TType : notnull, TextBoxBase
        {
            textBoxBase.SelectionBrush = selectionBrush;
            return textBoxBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBoxBase.SelectionOpacity"/> property of the current <see cref="TextBoxBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBoxBase</typeparam>                                                                       
        /// <param name=" textBoxBase">current <see cref="TextBoxBase"/></param>                                                          
        /// <param name="selectionOpacity">selectionOpacity value</param>                                                                            
        /// <returns>current textBoxBase</returns>                                                                                    
        public static TType SelectionOpacity<TType>(this TType textBoxBase, Double selectionOpacity) where TType : notnull, TextBoxBase
        {
            textBoxBase.SelectionOpacity = selectionOpacity;
            return textBoxBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBoxBase.CaretBrush"/> property of the current <see cref="TextBoxBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBoxBase</typeparam>                                                                       
        /// <param name=" textBoxBase">current <see cref="TextBoxBase"/></param>                                                          
        /// <param name="caretBrush">caretBrush value</param>                                                                            
        /// <returns>current textBoxBase</returns>                                                                                    
        public static TType CaretBrush<TType>(this TType textBoxBase, Brush caretBrush) where TType : notnull, TextBoxBase
        {
            textBoxBase.CaretBrush = caretBrush;
            return textBoxBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextBoxBase.IsInactiveSelectionHighlightEnabled"/> property of the current <see cref="TextBoxBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TextBoxBase</typeparam>                                                                       
        /// <param name=" textBoxBase">current <see cref="TextBoxBase"/></param>                                                          
        /// <param name="isInactiveSelectionHighlightEnabled">isInactiveSelectionHighlightEnabled value</param>                                                                            
        /// <returns>current textBoxBase</returns>                                                                                    
        public static TType IsInactiveSelectionHighlightEnabled<TType>(this TType textBoxBase, Boolean isInactiveSelectionHighlightEnabled) where TType : notnull, TextBoxBase
        {
            textBoxBase.IsInactiveSelectionHighlightEnabled = isInactiveSelectionHighlightEnabled;
            return textBoxBase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TickBar"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TickBarFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TickBar.Fill"/> property of the current <see cref="TickBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TickBar</typeparam>                                                                       
        /// <param name=" tickBar">current <see cref="TickBar"/></param>                                                          
        /// <param name="fill">fill value</param>                                                                            
        /// <returns>current tickBar</returns>                                                                                    
        public static TType Fill<TType>(this TType tickBar, Brush fill) where TType : notnull, TickBar
        {
            tickBar.Fill = fill;
            return tickBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TickBar.Minimum"/> property of the current <see cref="TickBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TickBar</typeparam>                                                                       
        /// <param name=" tickBar">current <see cref="TickBar"/></param>                                                          
        /// <param name="minimum">minimum value</param>                                                                            
        /// <returns>current tickBar</returns>                                                                                    
        public static TType Minimum<TType>(this TType tickBar, Double minimum) where TType : notnull, TickBar
        {
            tickBar.Minimum = minimum;
            return tickBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TickBar.Maximum"/> property of the current <see cref="TickBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TickBar</typeparam>                                                                       
        /// <param name=" tickBar">current <see cref="TickBar"/></param>                                                          
        /// <param name="maximum">maximum value</param>                                                                            
        /// <returns>current tickBar</returns>                                                                                    
        public static TType Maximum<TType>(this TType tickBar, Double maximum) where TType : notnull, TickBar
        {
            tickBar.Maximum = maximum;
            return tickBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TickBar.SelectionStart"/> property of the current <see cref="TickBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TickBar</typeparam>                                                                       
        /// <param name=" tickBar">current <see cref="TickBar"/></param>                                                          
        /// <param name="selectionStart">selectionStart value</param>                                                                            
        /// <returns>current tickBar</returns>                                                                                    
        public static TType SelectionStart<TType>(this TType tickBar, Double selectionStart) where TType : notnull, TickBar
        {
            tickBar.SelectionStart = selectionStart;
            return tickBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TickBar.SelectionEnd"/> property of the current <see cref="TickBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TickBar</typeparam>                                                                       
        /// <param name=" tickBar">current <see cref="TickBar"/></param>                                                          
        /// <param name="selectionEnd">selectionEnd value</param>                                                                            
        /// <returns>current tickBar</returns>                                                                                    
        public static TType SelectionEnd<TType>(this TType tickBar, Double selectionEnd) where TType : notnull, TickBar
        {
            tickBar.SelectionEnd = selectionEnd;
            return tickBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TickBar.IsSelectionRangeEnabled"/> property of the current <see cref="TickBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TickBar</typeparam>                                                                       
        /// <param name=" tickBar">current <see cref="TickBar"/></param>                                                          
        /// <param name="isSelectionRangeEnabled">isSelectionRangeEnabled value</param>                                                                            
        /// <returns>current tickBar</returns>                                                                                    
        public static TType IsSelectionRangeEnabled<TType>(this TType tickBar, Boolean isSelectionRangeEnabled) where TType : notnull, TickBar
        {
            tickBar.IsSelectionRangeEnabled = isSelectionRangeEnabled;
            return tickBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TickBar.TickFrequency"/> property of the current <see cref="TickBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TickBar</typeparam>                                                                       
        /// <param name=" tickBar">current <see cref="TickBar"/></param>                                                          
        /// <param name="tickFrequency">tickFrequency value</param>                                                                            
        /// <returns>current tickBar</returns>                                                                                    
        public static TType TickFrequency<TType>(this TType tickBar, Double tickFrequency) where TType : notnull, TickBar
        {
            tickBar.TickFrequency = tickFrequency;
            return tickBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TickBar.Ticks"/> property of the current <see cref="TickBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TickBar</typeparam>                                                                       
        /// <param name=" tickBar">current <see cref="TickBar"/></param>                                                          
        /// <param name="ticks">ticks value</param>                                                                            
        /// <returns>current tickBar</returns>                                                                                    
        public static TType Ticks<TType>(this TType tickBar, DoubleCollection ticks) where TType : notnull, TickBar
        {
            tickBar.Ticks = ticks;
            return tickBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TickBar.IsDirectionReversed"/> property of the current <see cref="TickBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TickBar</typeparam>                                                                       
        /// <param name=" tickBar">current <see cref="TickBar"/></param>                                                          
        /// <param name="isDirectionReversed">isDirectionReversed value</param>                                                                            
        /// <returns>current tickBar</returns>                                                                                    
        public static TType IsDirectionReversed<TType>(this TType tickBar, Boolean isDirectionReversed) where TType : notnull, TickBar
        {
            tickBar.IsDirectionReversed = isDirectionReversed;
            return tickBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TickBar.Placement"/> property of the current <see cref="TickBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TickBar</typeparam>                                                                       
        /// <param name=" tickBar">current <see cref="TickBar"/></param>                                                          
        /// <param name="placement">placement value</param>                                                                            
        /// <returns>current tickBar</returns>                                                                                    
        public static TType Placement<TType>(this TType tickBar, TickBarPlacement placement) where TType : notnull, TickBar
        {
            tickBar.Placement = placement;
            return tickBar;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TickBar.ReservedSpace"/> property of the current <see cref="TickBar"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TickBar</typeparam>                                                                       
        /// <param name=" tickBar">current <see cref="TickBar"/></param>                                                          
        /// <param name="reservedSpace">reservedSpace value</param>                                                                            
        /// <returns>current tickBar</returns>                                                                                    
        public static TType ReservedSpace<TType>(this TType tickBar, Double reservedSpace) where TType : notnull, TickBar
        {
            tickBar.ReservedSpace = reservedSpace;
            return tickBar;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ToggleButton"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ToggleButtonFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ToggleButton.IsChecked"/> property of the current <see cref="ToggleButton"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToggleButton</typeparam>                                                                       
        /// <param name=" toggleButton">current <see cref="ToggleButton"/></param>                                                          
        /// <param name="isChecked">isChecked value</param>                                                                            
        /// <returns>current toggleButton</returns>                                                                                    
        public static TType IsChecked<TType>(this TType toggleButton, Nullable<Boolean> isChecked) where TType : notnull, ToggleButton
        {
            toggleButton.IsChecked = isChecked;
            return toggleButton;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ToggleButton.IsThreeState"/> property of the current <see cref="ToggleButton"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToggleButton</typeparam>                                                                       
        /// <param name=" toggleButton">current <see cref="ToggleButton"/></param>                                                          
        /// <param name="isThreeState">isThreeState value</param>                                                                            
        /// <returns>current toggleButton</returns>                                                                                    
        public static TType IsThreeState<TType>(this TType toggleButton, Boolean isThreeState) where TType : notnull, ToggleButton
        {
            toggleButton.IsThreeState = isThreeState;
            return toggleButton;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ToolBarOverflowPanel"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ToolBarOverflowPanelFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ToolBarOverflowPanel.WrapWidth"/> property of the current <see cref="ToolBarOverflowPanel"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ToolBarOverflowPanel</typeparam>                                                                       
        /// <param name=" toolBarOverflowPanel">current <see cref="ToolBarOverflowPanel"/></param>                                                          
        /// <param name="wrapWidth">wrapWidth value</param>                                                                            
        /// <returns>current toolBarOverflowPanel</returns>                                                                                    
        public static TType WrapWidth<TType>(this TType toolBarOverflowPanel, Double wrapWidth) where TType : notnull, ToolBarOverflowPanel
        {
            toolBarOverflowPanel.WrapWidth = wrapWidth;
            return toolBarOverflowPanel;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Track"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TrackFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Track.DecreaseRepeatButton"/> property of the current <see cref="Track"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Track</typeparam>                                                                       
        /// <param name=" track">current <see cref="Track"/></param>                                                          
        /// <param name="decreaseRepeatButton">decreaseRepeatButton value</param>                                                                            
        /// <returns>current track</returns>                                                                                    
        public static TType DecreaseRepeatButton<TType>(this TType track, RepeatButton decreaseRepeatButton) where TType : notnull, Track
        {
            track.DecreaseRepeatButton = decreaseRepeatButton;
            return track;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Track.Thumb"/> property of the current <see cref="Track"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Track</typeparam>                                                                       
        /// <param name=" track">current <see cref="Track"/></param>                                                          
        /// <param name="thumb">thumb value</param>                                                                            
        /// <returns>current track</returns>                                                                                    
        public static TType Thumb<TType>(this TType track, Thumb thumb) where TType : notnull, Track
        {
            track.Thumb = thumb;
            return track;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Track.IncreaseRepeatButton"/> property of the current <see cref="Track"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Track</typeparam>                                                                       
        /// <param name=" track">current <see cref="Track"/></param>                                                          
        /// <param name="increaseRepeatButton">increaseRepeatButton value</param>                                                                            
        /// <returns>current track</returns>                                                                                    
        public static TType IncreaseRepeatButton<TType>(this TType track, RepeatButton increaseRepeatButton) where TType : notnull, Track
        {
            track.IncreaseRepeatButton = increaseRepeatButton;
            return track;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Track.Orientation"/> property of the current <see cref="Track"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Track</typeparam>                                                                       
        /// <param name=" track">current <see cref="Track"/></param>                                                          
        /// <param name="orientation">orientation value</param>                                                                            
        /// <returns>current track</returns>                                                                                    
        public static TType Orientation<TType>(this TType track, Orientation orientation) where TType : notnull, Track
        {
            track.Orientation = orientation;
            return track;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Track.Minimum"/> property of the current <see cref="Track"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Track</typeparam>                                                                       
        /// <param name=" track">current <see cref="Track"/></param>                                                          
        /// <param name="minimum">minimum value</param>                                                                            
        /// <returns>current track</returns>                                                                                    
        public static TType Minimum<TType>(this TType track, Double minimum) where TType : notnull, Track
        {
            track.Minimum = minimum;
            return track;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Track.Maximum"/> property of the current <see cref="Track"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Track</typeparam>                                                                       
        /// <param name=" track">current <see cref="Track"/></param>                                                          
        /// <param name="maximum">maximum value</param>                                                                            
        /// <returns>current track</returns>                                                                                    
        public static TType Maximum<TType>(this TType track, Double maximum) where TType : notnull, Track
        {
            track.Maximum = maximum;
            return track;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Track.Value"/> property of the current <see cref="Track"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Track</typeparam>                                                                       
        /// <param name=" track">current <see cref="Track"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current track</returns>                                                                                    
        public static TType Value<TType>(this TType track, Double value) where TType : notnull, Track
        {
            track.Value = value;
            return track;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Track.ViewportSize"/> property of the current <see cref="Track"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Track</typeparam>                                                                       
        /// <param name=" track">current <see cref="Track"/></param>                                                          
        /// <param name="viewportSize">viewportSize value</param>                                                                            
        /// <returns>current track</returns>                                                                                    
        public static TType ViewportSize<TType>(this TType track, Double viewportSize) where TType : notnull, Track
        {
            track.ViewportSize = viewportSize;
            return track;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Track.IsDirectionReversed"/> property of the current <see cref="Track"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Track</typeparam>                                                                       
        /// <param name=" track">current <see cref="Track"/></param>                                                          
        /// <param name="isDirectionReversed">isDirectionReversed value</param>                                                                            
        /// <returns>current track</returns>                                                                                    
        public static TType IsDirectionReversed<TType>(this TType track, Boolean isDirectionReversed) where TType : notnull, Track
        {
            track.IsDirectionReversed = isDirectionReversed;
            return track;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="UniformGrid"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class UniformGridFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="UniformGrid.FirstColumn"/> property of the current <see cref="UniformGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UniformGrid</typeparam>                                                                       
        /// <param name=" uniformGrid">current <see cref="UniformGrid"/></param>                                                          
        /// <param name="firstColumn">firstColumn value</param>                                                                            
        /// <returns>current uniformGrid</returns>                                                                                    
        public static TType FirstColumn<TType>(this TType uniformGrid, Int32 firstColumn) where TType : notnull, UniformGrid
        {
            uniformGrid.FirstColumn = firstColumn;
            return uniformGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UniformGrid.Columns"/> property of the current <see cref="UniformGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UniformGrid</typeparam>                                                                       
        /// <param name=" uniformGrid">current <see cref="UniformGrid"/></param>                                                          
        /// <param name="columns">columns value</param>                                                                            
        /// <returns>current uniformGrid</returns>                                                                                    
        public static TType Columns<TType>(this TType uniformGrid, Int32 columns) where TType : notnull, UniformGrid
        {
            uniformGrid.Columns = columns;
            return uniformGrid;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UniformGrid.Rows"/> property of the current <see cref="UniformGrid"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UniformGrid</typeparam>                                                                       
        /// <param name=" uniformGrid">current <see cref="UniformGrid"/></param>                                                          
        /// <param name="rows">rows value</param>                                                                            
        /// <returns>current uniformGrid</returns>                                                                                    
        public static TType Rows<TType>(this TType uniformGrid, Int32 rows) where TType : notnull, UniformGrid
        {
            uniformGrid.Rows = rows;
            return uniformGrid;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ContentElement"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ContentElementFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ContentElement.IsEnabled"/> property of the current <see cref="ContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContentElement</typeparam>                                                                       
        /// <param name=" contentElement">current <see cref="ContentElement"/></param>                                                          
        /// <param name="isEnabled">isEnabled value</param>                                                                            
        /// <returns>current contentElement</returns>                                                                                    
        public static TType IsEnabled<TType>(this TType contentElement, Boolean isEnabled) where TType : notnull, ContentElement
        {
            contentElement.IsEnabled = isEnabled;
            return contentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContentElement.Focusable"/> property of the current <see cref="ContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContentElement</typeparam>                                                                       
        /// <param name=" contentElement">current <see cref="ContentElement"/></param>                                                          
        /// <param name="focusable">focusable value</param>                                                                            
        /// <returns>current contentElement</returns>                                                                                    
        public static TType Focusable<TType>(this TType contentElement, Boolean focusable) where TType : notnull, ContentElement
        {
            contentElement.Focusable = focusable;
            return contentElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContentElement.AllowDrop"/> property of the current <see cref="ContentElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContentElement</typeparam>                                                                       
        /// <param name=" contentElement">current <see cref="ContentElement"/></param>                                                          
        /// <param name="allowDrop">allowDrop value</param>                                                                            
        /// <returns>current contentElement</returns>                                                                                    
        public static TType AllowDrop<TType>(this TType contentElement, Boolean allowDrop) where TType : notnull, ContentElement
        {
            contentElement.AllowDrop = allowDrop;
            return contentElement;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TextDecoration"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TextDecorationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TextDecoration.Pen"/> property of the current <see cref="TextDecoration"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" textDecoration">current <see cref="TextDecoration"/></param>                                                          
        /// <param name="pen">pen value</param>                                                                            
        /// <returns>current textDecoration</returns>                                                                                    
        public static TextDecoration Pen(this TextDecoration textDecoration, Pen pen)
        {
            textDecoration.Pen = pen;
            return textDecoration;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextDecoration.PenOffset"/> property of the current <see cref="TextDecoration"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" textDecoration">current <see cref="TextDecoration"/></param>                                                          
        /// <param name="penOffset">penOffset value</param>                                                                            
        /// <returns>current textDecoration</returns>                                                                                    
        public static TextDecoration PenOffset(this TextDecoration textDecoration, Double penOffset)
        {
            textDecoration.PenOffset = penOffset;
            return textDecoration;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextDecoration.PenOffsetUnit"/> property of the current <see cref="TextDecoration"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" textDecoration">current <see cref="TextDecoration"/></param>                                                          
        /// <param name="penOffsetUnit">penOffsetUnit value</param>                                                                            
        /// <returns>current textDecoration</returns>                                                                                    
        public static TextDecoration PenOffsetUnit(this TextDecoration textDecoration, TextDecorationUnit penOffsetUnit)
        {
            textDecoration.PenOffsetUnit = penOffsetUnit;
            return textDecoration;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextDecoration.PenThicknessUnit"/> property of the current <see cref="TextDecoration"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" textDecoration">current <see cref="TextDecoration"/></param>                                                          
        /// <param name="penThicknessUnit">penThicknessUnit value</param>                                                                            
        /// <returns>current textDecoration</returns>                                                                                    
        public static TextDecoration PenThicknessUnit(this TextDecoration textDecoration, TextDecorationUnit penThicknessUnit)
        {
            textDecoration.PenThicknessUnit = penThicknessUnit;
            return textDecoration;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextDecoration.Location"/> property of the current <see cref="TextDecoration"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" textDecoration">current <see cref="TextDecoration"/></param>                                                          
        /// <param name="location">location value</param>                                                                            
        /// <returns>current textDecoration</returns>                                                                                    
        public static TextDecoration Location(this TextDecoration textDecoration, TextDecorationLocation location)
        {
            textDecoration.Location = location;
            return textDecoration;
        }
    }
  
    /// <summary>                                                                                                                    
    /// <see cref="UIElement"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class UIElementFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.AllowDrop"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="allowDrop">allowDrop value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType AllowDrop<TType>(this TType uIElement, Boolean allowDrop) where TType : notnull, UIElement
        {
            uIElement.AllowDrop = allowDrop;
            return uIElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.RenderSize"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="renderSize">renderSize value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType RenderSize<TType>(this TType uIElement, Size renderSize) where TType : notnull, UIElement
        {
            uIElement.RenderSize = renderSize;
            return uIElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.RenderTransform"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="renderTransform">renderTransform value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType RenderTransform<TType>(this TType uIElement, Transform renderTransform) where TType : notnull, UIElement
        {
            uIElement.RenderTransform = renderTransform;
            return uIElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.RenderTransformOrigin"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="renderTransformOrigin">renderTransformOrigin value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType RenderTransformOrigin<TType>(this TType uIElement, Point renderTransformOrigin) where TType : notnull, UIElement
        {
            uIElement.RenderTransformOrigin = renderTransformOrigin;
            return uIElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.Opacity"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="opacity">opacity value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType Opacity<TType>(this TType uIElement, Double opacity) where TType : notnull, UIElement
        {
            uIElement.Opacity = opacity;
            return uIElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.OpacityMask"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="opacityMask">opacityMask value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType OpacityMask<TType>(this TType uIElement, Brush opacityMask) where TType : notnull, UIElement
        {
            uIElement.OpacityMask = opacityMask;
            return uIElement;
        }

        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.Effect"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="effect">effect value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType Effect<TType>(this TType uIElement, Effect effect) where TType : notnull, UIElement
        {
            uIElement.Effect = effect;
            return uIElement;
        }

        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.CacheMode"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="cacheMode">cacheMode value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType CacheMode<TType>(this TType uIElement, CacheMode cacheMode) where TType : notnull, UIElement
        {
            uIElement.CacheMode = cacheMode;
            return uIElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.Uid"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="uid">uid value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType Uid<TType>(this TType uIElement, String uid) where TType : notnull, UIElement
        {
            uIElement.Uid = uid;
            return uIElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.Visibility"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="visibility">visibility value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType Visibility<TType>(this TType uIElement, Visibility visibility) where TType : notnull, UIElement
        {
            uIElement.Visibility = visibility;
            return uIElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.ClipToBounds"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="clipToBounds">clipToBounds value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType ClipToBounds<TType>(this TType uIElement, Boolean clipToBounds) where TType : notnull, UIElement
        {
            uIElement.ClipToBounds = clipToBounds;
            return uIElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.Clip"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="clip">clip value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType Clip<TType>(this TType uIElement, Geometry clip) where TType : notnull, UIElement
        {
            uIElement.Clip = clip;
            return uIElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.SnapsToDevicePixels"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="snapsToDevicePixels">snapsToDevicePixels value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType SnapsToDevicePixels<TType>(this TType uIElement, Boolean snapsToDevicePixels) where TType : notnull, UIElement
        {
            uIElement.SnapsToDevicePixels = snapsToDevicePixels;
            return uIElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.IsEnabled"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="isEnabled">isEnabled value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType IsEnabled<TType>(this TType uIElement, Boolean isEnabled) where TType : notnull, UIElement
        {
            uIElement.IsEnabled = isEnabled;
            return uIElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.IsHitTestVisible"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="isHitTestVisible">isHitTestVisible value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType IsHitTestVisible<TType>(this TType uIElement, Boolean isHitTestVisible) where TType : notnull, UIElement
        {
            uIElement.IsHitTestVisible = isHitTestVisible;
            return uIElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.Focusable"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="focusable">focusable value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType Focusable<TType>(this TType uIElement, Boolean focusable) where TType : notnull, UIElement
        {
            uIElement.Focusable = focusable;
            return uIElement;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement.IsManipulationEnabled"/> property of the current <see cref="UIElement"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement</typeparam>                                                                       
        /// <param name=" uIElement">current <see cref="UIElement"/></param>                                                          
        /// <param name="isManipulationEnabled">isManipulationEnabled value</param>                                                                            
        /// <returns>current uIElement</returns>                                                                                    
        public static TType IsManipulationEnabled<TType>(this TType uIElement, Boolean isManipulationEnabled) where TType : notnull, UIElement
        {
            uIElement.IsManipulationEnabled = isManipulationEnabled;
            return uIElement;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="UIElement3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class UIElement3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement3D.AllowDrop"/> property of the current <see cref="UIElement3D"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement3D</typeparam>                                                                       
        /// <param name=" uIElement3D">current <see cref="UIElement3D"/></param>                                                          
        /// <param name="allowDrop">allowDrop value</param>                                                                            
        /// <returns>current uIElement3D</returns>                                                                                    
        public static TType AllowDrop<TType>(this TType uIElement3D, Boolean allowDrop) where TType : notnull, UIElement3D
        {
            uIElement3D.AllowDrop = allowDrop;
            return uIElement3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement3D.Visibility"/> property of the current <see cref="UIElement3D"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement3D</typeparam>                                                                       
        /// <param name=" uIElement3D">current <see cref="UIElement3D"/></param>                                                          
        /// <param name="visibility">visibility value</param>                                                                            
        /// <returns>current uIElement3D</returns>                                                                                    
        public static TType Visibility<TType>(this TType uIElement3D, Visibility visibility) where TType : notnull, UIElement3D
        {
            uIElement3D.Visibility = visibility;
            return uIElement3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement3D.IsEnabled"/> property of the current <see cref="UIElement3D"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement3D</typeparam>                                                                       
        /// <param name=" uIElement3D">current <see cref="UIElement3D"/></param>                                                          
        /// <param name="isEnabled">isEnabled value</param>                                                                            
        /// <returns>current uIElement3D</returns>                                                                                    
        public static TType IsEnabled<TType>(this TType uIElement3D, Boolean isEnabled) where TType : notnull, UIElement3D
        {
            uIElement3D.IsEnabled = isEnabled;
            return uIElement3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement3D.IsHitTestVisible"/> property of the current <see cref="UIElement3D"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement3D</typeparam>                                                                       
        /// <param name=" uIElement3D">current <see cref="UIElement3D"/></param>                                                          
        /// <param name="isHitTestVisible">isHitTestVisible value</param>                                                                            
        /// <returns>current uIElement3D</returns>                                                                                    
        public static TType IsHitTestVisible<TType>(this TType uIElement3D, Boolean isHitTestVisible) where TType : notnull, UIElement3D
        {
            uIElement3D.IsHitTestVisible = isHitTestVisible;
            return uIElement3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="UIElement3D.Focusable"/> property of the current <see cref="UIElement3D"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">UIElement3D</typeparam>                                                                       
        /// <param name=" uIElement3D">current <see cref="UIElement3D"/></param>                                                          
        /// <param name="focusable">focusable value</param>                                                                            
        /// <returns>current uIElement3D</returns>                                                                                    
        public static TType Focusable<TType>(this TType uIElement3D, Boolean focusable) where TType : notnull, UIElement3D
        {
            uIElement3D.Focusable = focusable;
            return uIElement3D;
        }
    }

    /// <summary>                                                                                                                    
    /// <see cref="InputBinding"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class InputBindingFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="InputBinding.Command"/> property of the current <see cref="InputBinding"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InputBinding</typeparam>                                                                       
        /// <param name=" inputBinding">current <see cref="InputBinding"/></param>                                                          
        /// <param name="command">command value</param>                                                                            
        /// <returns>current inputBinding</returns>                                                                                    
        public static TType Command<TType>(this TType inputBinding, ICommand command) where TType : notnull, InputBinding
        {
            inputBinding.Command = command;
            return inputBinding;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="InputBinding.CommandParameter"/> property of the current <see cref="InputBinding"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InputBinding</typeparam>                                                                       
        /// <param name=" inputBinding">current <see cref="InputBinding"/></param>                                                          
        /// <param name="commandParameter">commandParameter value</param>                                                                            
        /// <returns>current inputBinding</returns>                                                                                    
        public static TType CommandParameter<TType>(this TType inputBinding, Object commandParameter) where TType : notnull, InputBinding
        {
            inputBinding.CommandParameter = commandParameter;
            return inputBinding;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="InputBinding.CommandTarget"/> property of the current <see cref="InputBinding"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InputBinding</typeparam>                                                                       
        /// <param name=" inputBinding">current <see cref="InputBinding"/></param>                                                          
        /// <param name="commandTarget">commandTarget value</param>                                                                            
        /// <returns>current inputBinding</returns>                                                                                    
        public static TType CommandTarget<TType>(this TType inputBinding, IInputElement commandTarget) where TType : notnull, InputBinding
        {
            inputBinding.CommandTarget = commandTarget;
            return inputBinding;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="InputBinding.Gesture"/> property of the current <see cref="InputBinding"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">InputBinding</typeparam>                                                                       
        /// <param name=" inputBinding">current <see cref="InputBinding"/></param>                                                          
        /// <param name="gesture">gesture value</param>                                                                            
        /// <returns>current inputBinding</returns>                                                                                    
        public static TType Gesture<TType>(this TType inputBinding, InputGesture gesture) where TType : notnull, InputBinding
        {
            inputBinding.Gesture = gesture;
            return inputBinding;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="KeyBinding"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class KeyBindingFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="KeyBinding.Gesture"/> property of the current <see cref="KeyBinding"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">KeyBinding</typeparam>                                                                       
        /// <param name=" keyBinding">current <see cref="KeyBinding"/></param>                                                          
        /// <param name="gesture">gesture value</param>                                                                            
        /// <returns>current keyBinding</returns>                                                                                    
        public static TType Gesture<TType>(this TType keyBinding, InputGesture gesture) where TType : notnull, KeyBinding
        {
            keyBinding.Gesture = gesture;
            return keyBinding;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="KeyBinding.Modifiers"/> property of the current <see cref="KeyBinding"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">KeyBinding</typeparam>                                                                       
        /// <param name=" keyBinding">current <see cref="KeyBinding"/></param>                                                          
        /// <param name="modifiers">modifiers value</param>                                                                            
        /// <returns>current keyBinding</returns>                                                                                    
        public static TType Modifiers<TType>(this TType keyBinding, ModifierKeys modifiers) where TType : notnull, KeyBinding
        {
            keyBinding.Modifiers = modifiers;
            return keyBinding;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="KeyBinding.Key"/> property of the current <see cref="KeyBinding"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">KeyBinding</typeparam>                                                                       
        /// <param name=" keyBinding">current <see cref="KeyBinding"/></param>                                                          
        /// <param name="key">key value</param>                                                                            
        /// <returns>current keyBinding</returns>                                                                                    
        public static TType Key<TType>(this TType keyBinding, Key key) where TType : notnull, KeyBinding
        {
            keyBinding.Key = key;
            return keyBinding;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="MouseBinding"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MouseBindingFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="MouseBinding.Gesture"/> property of the current <see cref="MouseBinding"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MouseBinding</typeparam>                                                                       
        /// <param name=" mouseBinding">current <see cref="MouseBinding"/></param>                                                          
        /// <param name="gesture">gesture value</param>                                                                            
        /// <returns>current mouseBinding</returns>                                                                                    
        public static TType Gesture<TType>(this TType mouseBinding, InputGesture gesture) where TType : notnull, MouseBinding
        {
            mouseBinding.Gesture = gesture;
            return mouseBinding;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MouseBinding.MouseAction"/> property of the current <see cref="MouseBinding"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MouseBinding</typeparam>                                                                       
        /// <param name=" mouseBinding">current <see cref="MouseBinding"/></param>                                                          
        /// <param name="mouseAction">mouseAction value</param>                                                                            
        /// <returns>current mouseBinding</returns>                                                                                    
        public static TType MouseAction<TType>(this TType mouseBinding, MouseAction mouseAction) where TType : notnull, MouseBinding
        {
            mouseBinding.MouseAction = mouseAction;
            return mouseBinding;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ArcSegment"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ArcSegmentFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ArcSegment.Point"/> property of the current <see cref="ArcSegment"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" arcSegment">current <see cref="ArcSegment"/></param>                                                          
        /// <param name="point">point value</param>                                                                            
        /// <returns>current arcSegment</returns>                                                                                    
        public static ArcSegment Point(this ArcSegment arcSegment, Point point)
        {
            arcSegment.Point = point;
            return arcSegment;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ArcSegment.Size"/> property of the current <see cref="ArcSegment"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" arcSegment">current <see cref="ArcSegment"/></param>                                                          
        /// <param name="size">size value</param>                                                                            
        /// <returns>current arcSegment</returns>                                                                                    
        public static ArcSegment Size(this ArcSegment arcSegment, Size size)
        {
            arcSegment.Size = size;
            return arcSegment;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ArcSegment.RotationAngle"/> property of the current <see cref="ArcSegment"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" arcSegment">current <see cref="ArcSegment"/></param>                                                          
        /// <param name="rotationAngle">rotationAngle value</param>                                                                            
        /// <returns>current arcSegment</returns>                                                                                    
        public static ArcSegment RotationAngle(this ArcSegment arcSegment, Double rotationAngle)
        {
            arcSegment.RotationAngle = rotationAngle;
            return arcSegment;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ArcSegment.IsLargeArc"/> property of the current <see cref="ArcSegment"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" arcSegment">current <see cref="ArcSegment"/></param>                                                          
        /// <param name="isLargeArc">isLargeArc value</param>                                                                            
        /// <returns>current arcSegment</returns>                                                                                    
        public static ArcSegment IsLargeArc(this ArcSegment arcSegment, Boolean isLargeArc)
        {
            arcSegment.IsLargeArc = isLargeArc;
            return arcSegment;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ArcSegment.SweepDirection"/> property of the current <see cref="ArcSegment"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" arcSegment">current <see cref="ArcSegment"/></param>                                                          
        /// <param name="sweepDirection">sweepDirection value</param>                                                                            
        /// <returns>current arcSegment</returns>                                                                                    
        public static ArcSegment SweepDirection(this ArcSegment arcSegment, SweepDirection sweepDirection)
        {
            arcSegment.SweepDirection = sweepDirection;
            return arcSegment;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BezierSegment"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BezierSegmentFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BezierSegment.Point1"/> property of the current <see cref="BezierSegment"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bezierSegment">current <see cref="BezierSegment"/></param>                                                          
        /// <param name="point1">point1 value</param>                                                                            
        /// <returns>current bezierSegment</returns>                                                                                    
        public static BezierSegment Point1(this BezierSegment bezierSegment, Point point1)
        {
            bezierSegment.Point1 = point1;
            return bezierSegment;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BezierSegment.Point2"/> property of the current <see cref="BezierSegment"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bezierSegment">current <see cref="BezierSegment"/></param>                                                          
        /// <param name="point2">point2 value</param>                                                                            
        /// <returns>current bezierSegment</returns>                                                                                    
        public static BezierSegment Point2(this BezierSegment bezierSegment, Point point2)
        {
            bezierSegment.Point2 = point2;
            return bezierSegment;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BezierSegment.Point3"/> property of the current <see cref="BezierSegment"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bezierSegment">current <see cref="BezierSegment"/></param>                                                          
        /// <param name="point3">point3 value</param>                                                                            
        /// <returns>current bezierSegment</returns>                                                                                    
        public static BezierSegment Point3(this BezierSegment bezierSegment, Point point3)
        {
            bezierSegment.Point3 = point3;
            return bezierSegment;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BitmapCache"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BitmapCacheFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapCache.RenderAtScale"/> property of the current <see cref="BitmapCache"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapCache">current <see cref="BitmapCache"/></param>                                                          
        /// <param name="renderAtScale">renderAtScale value</param>                                                                            
        /// <returns>current bitmapCache</returns>                                                                                    
        public static BitmapCache RenderAtScale(this BitmapCache bitmapCache, Double renderAtScale)
        {
            bitmapCache.RenderAtScale = renderAtScale;
            return bitmapCache;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapCache.SnapsToDevicePixels"/> property of the current <see cref="BitmapCache"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapCache">current <see cref="BitmapCache"/></param>                                                          
        /// <param name="snapsToDevicePixels">snapsToDevicePixels value</param>                                                                            
        /// <returns>current bitmapCache</returns>                                                                                    
        public static BitmapCache SnapsToDevicePixels(this BitmapCache bitmapCache, Boolean snapsToDevicePixels)
        {
            bitmapCache.SnapsToDevicePixels = snapsToDevicePixels;
            return bitmapCache;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapCache.EnableClearType"/> property of the current <see cref="BitmapCache"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapCache">current <see cref="BitmapCache"/></param>                                                          
        /// <param name="enableClearType">enableClearType value</param>                                                                            
        /// <returns>current bitmapCache</returns>                                                                                    
        public static BitmapCache EnableClearType(this BitmapCache bitmapCache, Boolean enableClearType)
        {
            bitmapCache.EnableClearType = enableClearType;
            return bitmapCache;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BitmapCacheBrush"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BitmapCacheBrushFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapCacheBrush.Target"/> property of the current <see cref="BitmapCacheBrush"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapCacheBrush">current <see cref="BitmapCacheBrush"/></param>                                                          
        /// <param name="target">target value</param>                                                                            
        /// <returns>current bitmapCacheBrush</returns>                                                                                    
        public static BitmapCacheBrush Target(this BitmapCacheBrush bitmapCacheBrush, Visual target)
        {
            bitmapCacheBrush.Target = target;
            return bitmapCacheBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapCacheBrush.BitmapCache"/> property of the current <see cref="BitmapCacheBrush"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapCacheBrush">current <see cref="BitmapCacheBrush"/></param>                                                          
        /// <param name="bitmapCache">bitmapCache value</param>                                                                            
        /// <returns>current bitmapCacheBrush</returns>                                                                                    
        public static BitmapCacheBrush BitmapCache(this BitmapCacheBrush bitmapCacheBrush, BitmapCache bitmapCache)
        {
            bitmapCacheBrush.BitmapCache = bitmapCache;
            return bitmapCacheBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapCacheBrush.AutoLayoutContent"/> property of the current <see cref="BitmapCacheBrush"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapCacheBrush">current <see cref="BitmapCacheBrush"/></param>                                                          
        /// <param name="autoLayoutContent">autoLayoutContent value</param>                                                                            
        /// <returns>current bitmapCacheBrush</returns>                                                                                    
        public static BitmapCacheBrush AutoLayoutContent(this BitmapCacheBrush bitmapCacheBrush, Boolean autoLayoutContent)
        {
            bitmapCacheBrush.AutoLayoutContent = autoLayoutContent;
            return bitmapCacheBrush;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Brush"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BrushFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Brush.Opacity"/> property of the current <see cref="Brush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Brush</typeparam>                                                                       
        /// <param name=" brush">current <see cref="Brush"/></param>                                                          
        /// <param name="opacity">opacity value</param>                                                                            
        /// <returns>current brush</returns>                                                                                    
        public static TType Opacity<TType>(this TType brush, Double opacity) where TType : notnull, Brush
        {
            brush.Opacity = opacity;
            return brush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Brush.Transform"/> property of the current <see cref="Brush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Brush</typeparam>                                                                       
        /// <param name=" brush">current <see cref="Brush"/></param>                                                          
        /// <param name="transform">transform value</param>                                                                            
        /// <returns>current brush</returns>                                                                                    
        public static TType Transform<TType>(this TType brush, Transform transform) where TType : notnull, Brush
        {
            brush.Transform = transform;
            return brush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Brush.RelativeTransform"/> property of the current <see cref="Brush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Brush</typeparam>                                                                       
        /// <param name=" brush">current <see cref="Brush"/></param>                                                          
        /// <param name="relativeTransform">relativeTransform value</param>                                                                            
        /// <returns>current brush</returns>                                                                                    
        public static TType RelativeTransform<TType>(this TType brush, Transform relativeTransform) where TType : notnull, Brush
        {
            brush.RelativeTransform = relativeTransform;
            return brush;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="CombinedGeometry"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class CombinedGeometryFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="CombinedGeometry.GeometryCombineMode"/> property of the current <see cref="CombinedGeometry"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" combinedGeometry">current <see cref="CombinedGeometry"/></param>                                                          
        /// <param name="geometryCombineMode">geometryCombineMode value</param>                                                                            
        /// <returns>current combinedGeometry</returns>                                                                                    
        public static CombinedGeometry GeometryCombineMode(this CombinedGeometry combinedGeometry, GeometryCombineMode geometryCombineMode)
        {
            combinedGeometry.GeometryCombineMode = geometryCombineMode;
            return combinedGeometry;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="CombinedGeometry.Geometry1"/> property of the current <see cref="CombinedGeometry"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" combinedGeometry">current <see cref="CombinedGeometry"/></param>                                                          
        /// <param name="geometry1">geometry1 value</param>                                                                            
        /// <returns>current combinedGeometry</returns>                                                                                    
        public static CombinedGeometry Geometry1(this CombinedGeometry combinedGeometry, Geometry geometry1)
        {
            combinedGeometry.Geometry1 = geometry1;
            return combinedGeometry;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="CombinedGeometry.Geometry2"/> property of the current <see cref="CombinedGeometry"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" combinedGeometry">current <see cref="CombinedGeometry"/></param>                                                          
        /// <param name="geometry2">geometry2 value</param>                                                                            
        /// <returns>current combinedGeometry</returns>                                                                                    
        public static CombinedGeometry Geometry2(this CombinedGeometry combinedGeometry, Geometry geometry2)
        {
            combinedGeometry.Geometry2 = geometry2;
            return combinedGeometry;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ContainerVisual"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ContainerVisualFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ContainerVisual.Clip"/> property of the current <see cref="ContainerVisual"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContainerVisual</typeparam>                                                                       
        /// <param name=" containerVisual">current <see cref="ContainerVisual"/></param>                                                          
        /// <param name="clip">clip value</param>                                                                            
        /// <returns>current containerVisual</returns>                                                                                    
        public static TType Clip<TType>(this TType containerVisual, Geometry clip) where TType : notnull, ContainerVisual
        {
            containerVisual.Clip = clip;
            return containerVisual;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContainerVisual.Opacity"/> property of the current <see cref="ContainerVisual"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContainerVisual</typeparam>                                                                       
        /// <param name=" containerVisual">current <see cref="ContainerVisual"/></param>                                                          
        /// <param name="opacity">opacity value</param>                                                                            
        /// <returns>current containerVisual</returns>                                                                                    
        public static TType Opacity<TType>(this TType containerVisual, Double opacity) where TType : notnull, ContainerVisual
        {
            containerVisual.Opacity = opacity;
            return containerVisual;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContainerVisual.OpacityMask"/> property of the current <see cref="ContainerVisual"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContainerVisual</typeparam>                                                                       
        /// <param name=" containerVisual">current <see cref="ContainerVisual"/></param>                                                          
        /// <param name="opacityMask">opacityMask value</param>                                                                            
        /// <returns>current containerVisual</returns>                                                                                    
        public static TType OpacityMask<TType>(this TType containerVisual, Brush opacityMask) where TType : notnull, ContainerVisual
        {
            containerVisual.OpacityMask = opacityMask;
            return containerVisual;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContainerVisual.CacheMode"/> property of the current <see cref="ContainerVisual"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContainerVisual</typeparam>                                                                       
        /// <param name=" containerVisual">current <see cref="ContainerVisual"/></param>                                                          
        /// <param name="cacheMode">cacheMode value</param>                                                                            
        /// <returns>current containerVisual</returns>                                                                                    
        public static TType CacheMode<TType>(this TType containerVisual, CacheMode cacheMode) where TType : notnull, ContainerVisual
        {
            containerVisual.CacheMode = cacheMode;
            return containerVisual;
        }


        /// <summary>                                                                                                                
        /// Set the <see cref="ContainerVisual.Effect"/> property of the current <see cref="ContainerVisual"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContainerVisual</typeparam>                                                                       
        /// <param name=" containerVisual">current <see cref="ContainerVisual"/></param>                                                          
        /// <param name="effect">effect value</param>                                                                            
        /// <returns>current containerVisual</returns>                                                                                    
        public static TType Effect<TType>(this TType containerVisual, Effect effect) where TType : notnull, ContainerVisual
        {
            containerVisual.Effect = effect;
            return containerVisual;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContainerVisual.XSnappingGuidelines"/> property of the current <see cref="ContainerVisual"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContainerVisual</typeparam>                                                                       
        /// <param name=" containerVisual">current <see cref="ContainerVisual"/></param>                                                          
        /// <param name="xSnappingGuidelines">xSnappingGuidelines value</param>                                                                            
        /// <returns>current containerVisual</returns>                                                                                    
        public static TType XSnappingGuidelines<TType>(this TType containerVisual, DoubleCollection xSnappingGuidelines) where TType : notnull, ContainerVisual
        {
            containerVisual.XSnappingGuidelines = xSnappingGuidelines;
            return containerVisual;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContainerVisual.YSnappingGuidelines"/> property of the current <see cref="ContainerVisual"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContainerVisual</typeparam>                                                                       
        /// <param name=" containerVisual">current <see cref="ContainerVisual"/></param>                                                          
        /// <param name="ySnappingGuidelines">ySnappingGuidelines value</param>                                                                            
        /// <returns>current containerVisual</returns>                                                                                    
        public static TType YSnappingGuidelines<TType>(this TType containerVisual, DoubleCollection ySnappingGuidelines) where TType : notnull, ContainerVisual
        {
            containerVisual.YSnappingGuidelines = ySnappingGuidelines;
            return containerVisual;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContainerVisual.Transform"/> property of the current <see cref="ContainerVisual"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContainerVisual</typeparam>                                                                       
        /// <param name=" containerVisual">current <see cref="ContainerVisual"/></param>                                                          
        /// <param name="transform">transform value</param>                                                                            
        /// <returns>current containerVisual</returns>                                                                                    
        public static TType Transform<TType>(this TType containerVisual, Transform transform) where TType : notnull, ContainerVisual
        {
            containerVisual.Transform = transform;
            return containerVisual;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ContainerVisual.Offset"/> property of the current <see cref="ContainerVisual"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ContainerVisual</typeparam>                                                                       
        /// <param name=" containerVisual">current <see cref="ContainerVisual"/></param>                                                          
        /// <param name="offset">offset value</param>                                                                            
        /// <returns>current containerVisual</returns>                                                                                    
        public static TType Offset<TType>(this TType containerVisual, Vector offset) where TType : notnull, ContainerVisual
        {
            containerVisual.Offset = offset;
            return containerVisual;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DashStyle"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DashStyleFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DashStyle.Offset"/> property of the current <see cref="DashStyle"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" dashStyle">current <see cref="DashStyle"/></param>                                                          
        /// <param name="offset">offset value</param>                                                                            
        /// <returns>current dashStyle</returns>                                                                                    
        public static DashStyle Offset(this DashStyle dashStyle, Double offset)
        {
            dashStyle.Offset = offset;
            return dashStyle;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DashStyle.Dashes"/> property of the current <see cref="DashStyle"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" dashStyle">current <see cref="DashStyle"/></param>                                                          
        /// <param name="dashes">dashes value</param>                                                                            
        /// <returns>current dashStyle</returns>                                                                                    
        public static DashStyle Dashes(this DashStyle dashStyle, DoubleCollection dashes)
        {
            dashStyle.Dashes = dashes;
            return dashStyle;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DrawingBrush"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DrawingBrushFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DrawingBrush.Drawing"/> property of the current <see cref="DrawingBrush"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" drawingBrush">current <see cref="DrawingBrush"/></param>                                                          
        /// <param name="drawing">drawing value</param>                                                                            
        /// <returns>current drawingBrush</returns>                                                                                    
        public static DrawingBrush Drawing(this DrawingBrush drawingBrush, Drawing drawing)
        {
            drawingBrush.Drawing = drawing;
            return drawingBrush;
        }
    }
  
    /// <summary>                                                                                                                    
    /// <see cref="DrawingGroup"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DrawingGroupFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DrawingGroup.Children"/> property of the current <see cref="DrawingGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" drawingGroup">current <see cref="DrawingGroup"/></param>                                                          
        /// <param name="children">children value</param>                                                                            
        /// <returns>current drawingGroup</returns>                                                                                    
        public static DrawingGroup Children(this DrawingGroup drawingGroup, DrawingCollection children)
        {
            drawingGroup.Children = children;
            return drawingGroup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DrawingGroup.ClipGeometry"/> property of the current <see cref="DrawingGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" drawingGroup">current <see cref="DrawingGroup"/></param>                                                          
        /// <param name="clipGeometry">clipGeometry value</param>                                                                            
        /// <returns>current drawingGroup</returns>                                                                                    
        public static DrawingGroup ClipGeometry(this DrawingGroup drawingGroup, Geometry clipGeometry)
        {
            drawingGroup.ClipGeometry = clipGeometry;
            return drawingGroup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DrawingGroup.Opacity"/> property of the current <see cref="DrawingGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" drawingGroup">current <see cref="DrawingGroup"/></param>                                                          
        /// <param name="opacity">opacity value</param>                                                                            
        /// <returns>current drawingGroup</returns>                                                                                    
        public static DrawingGroup Opacity(this DrawingGroup drawingGroup, Double opacity)
        {
            drawingGroup.Opacity = opacity;
            return drawingGroup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DrawingGroup.OpacityMask"/> property of the current <see cref="DrawingGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" drawingGroup">current <see cref="DrawingGroup"/></param>                                                          
        /// <param name="opacityMask">opacityMask value</param>                                                                            
        /// <returns>current drawingGroup</returns>                                                                                    
        public static DrawingGroup OpacityMask(this DrawingGroup drawingGroup, Brush opacityMask)
        {
            drawingGroup.OpacityMask = opacityMask;
            return drawingGroup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DrawingGroup.Transform"/> property of the current <see cref="DrawingGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" drawingGroup">current <see cref="DrawingGroup"/></param>                                                          
        /// <param name="transform">transform value</param>                                                                            
        /// <returns>current drawingGroup</returns>                                                                                    
        public static DrawingGroup Transform(this DrawingGroup drawingGroup, Transform transform)
        {
            drawingGroup.Transform = transform;
            return drawingGroup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DrawingGroup.GuidelineSet"/> property of the current <see cref="DrawingGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" drawingGroup">current <see cref="DrawingGroup"/></param>                                                          
        /// <param name="guidelineSet">guidelineSet value</param>                                                                            
        /// <returns>current drawingGroup</returns>                                                                                    
        public static DrawingGroup GuidelineSet(this DrawingGroup drawingGroup, GuidelineSet guidelineSet)
        {
            drawingGroup.GuidelineSet = guidelineSet;
            return drawingGroup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DrawingGroup.BitmapEffect"/> property of the current <see cref="DrawingGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" drawingGroup">current <see cref="DrawingGroup"/></param>                                                          
        /// <param name="bitmapEffect">bitmapEffect value</param>                                                                            
        /// <returns>current drawingGroup</returns>                                                                                    
        public static DrawingGroup BitmapEffect(this DrawingGroup drawingGroup, BitmapEffect bitmapEffect)
        {
            drawingGroup.BitmapEffect = bitmapEffect;
            return drawingGroup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DrawingGroup.BitmapEffectInput"/> property of the current <see cref="DrawingGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" drawingGroup">current <see cref="DrawingGroup"/></param>                                                          
        /// <param name="bitmapEffectInput">bitmapEffectInput value</param>                                                                            
        /// <returns>current drawingGroup</returns>                                                                                    
        public static DrawingGroup BitmapEffectInput(this DrawingGroup drawingGroup, BitmapEffectInput bitmapEffectInput)
        {
            drawingGroup.BitmapEffectInput = bitmapEffectInput;
            return drawingGroup;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DrawingImage"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DrawingImageFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DrawingImage.Drawing"/> property of the current <see cref="DrawingImage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" drawingImage">current <see cref="DrawingImage"/></param>                                                          
        /// <param name="drawing">drawing value</param>                                                                            
        /// <returns>current drawingImage</returns>                                                                                    
        public static DrawingImage Drawing(this DrawingImage drawingImage, Drawing drawing)
        {
            drawingImage.Drawing = drawing;
            return drawingImage;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EllipseGeometry"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EllipseGeometryFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EllipseGeometry.RadiusX"/> property of the current <see cref="EllipseGeometry"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" ellipseGeometry">current <see cref="EllipseGeometry"/></param>                                                          
        /// <param name="radiusX">radiusX value</param>                                                                            
        /// <returns>current ellipseGeometry</returns>                                                                                    
        public static EllipseGeometry RadiusX(this EllipseGeometry ellipseGeometry, Double radiusX)
        {
            ellipseGeometry.RadiusX = radiusX;
            return ellipseGeometry;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="EllipseGeometry.RadiusY"/> property of the current <see cref="EllipseGeometry"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" ellipseGeometry">current <see cref="EllipseGeometry"/></param>                                                          
        /// <param name="radiusY">radiusY value</param>                                                                            
        /// <returns>current ellipseGeometry</returns>                                                                                    
        public static EllipseGeometry RadiusY(this EllipseGeometry ellipseGeometry, Double radiusY)
        {
            ellipseGeometry.RadiusY = radiusY;
            return ellipseGeometry;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="EllipseGeometry.Center"/> property of the current <see cref="EllipseGeometry"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" ellipseGeometry">current <see cref="EllipseGeometry"/></param>                                                          
        /// <param name="center">center value</param>                                                                            
        /// <returns>current ellipseGeometry</returns>                                                                                    
        public static EllipseGeometry Center(this EllipseGeometry ellipseGeometry, Point center)
        {
            ellipseGeometry.Center = center;
            return ellipseGeometry;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="GeneralTransformGroup"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GeneralTransformGroupFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GeneralTransformGroup.Children"/> property of the current <see cref="GeneralTransformGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" generalTransformGroup">current <see cref="GeneralTransformGroup"/></param>                                                          
        /// <param name="children">children value</param>                                                                            
        /// <returns>current generalTransformGroup</returns>                                                                                    
        public static GeneralTransformGroup Children(this GeneralTransformGroup generalTransformGroup, GeneralTransformCollection children)
        {
            generalTransformGroup.Children = children;
            return generalTransformGroup;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Geometry"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GeometryFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Geometry.Transform"/> property of the current <see cref="Geometry"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Geometry</typeparam>                                                                       
        /// <param name=" geometry">current <see cref="Geometry"/></param>                                                          
        /// <param name="transform">transform value</param>                                                                            
        /// <returns>current geometry</returns>                                                                                    
        public static TType Transform<TType>(this TType geometry, Transform transform) where TType : notnull, Geometry
        {
            geometry.Transform = transform;
            return geometry;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="GeometryDrawing"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GeometryDrawingFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GeometryDrawing.Brush"/> property of the current <see cref="GeometryDrawing"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" geometryDrawing">current <see cref="GeometryDrawing"/></param>                                                          
        /// <param name="brush">brush value</param>                                                                            
        /// <returns>current geometryDrawing</returns>                                                                                    
        public static GeometryDrawing Brush(this GeometryDrawing geometryDrawing, Brush brush)
        {
            geometryDrawing.Brush = brush;
            return geometryDrawing;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GeometryDrawing.Pen"/> property of the current <see cref="GeometryDrawing"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" geometryDrawing">current <see cref="GeometryDrawing"/></param>                                                          
        /// <param name="pen">pen value</param>                                                                            
        /// <returns>current geometryDrawing</returns>                                                                                    
        public static GeometryDrawing Pen(this GeometryDrawing geometryDrawing, Pen pen)
        {
            geometryDrawing.Pen = pen;
            return geometryDrawing;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GeometryDrawing.Geometry"/> property of the current <see cref="GeometryDrawing"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" geometryDrawing">current <see cref="GeometryDrawing"/></param>                                                          
        /// <param name="geometry">geometry value</param>                                                                            
        /// <returns>current geometryDrawing</returns>                                                                                    
        public static GeometryDrawing Geometry(this GeometryDrawing geometryDrawing, Geometry geometry)
        {
            geometryDrawing.Geometry = geometry;
            return geometryDrawing;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="GeometryGroup"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GeometryGroupFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GeometryGroup.FillRule"/> property of the current <see cref="GeometryGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" geometryGroup">current <see cref="GeometryGroup"/></param>                                                          
        /// <param name="fillRule">fillRule value</param>                                                                            
        /// <returns>current geometryGroup</returns>                                                                                    
        public static GeometryGroup FillRule(this GeometryGroup geometryGroup, FillRule fillRule)
        {
            geometryGroup.FillRule = fillRule;
            return geometryGroup;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GeometryGroup.Children"/> property of the current <see cref="GeometryGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" geometryGroup">current <see cref="GeometryGroup"/></param>                                                          
        /// <param name="children">children value</param>                                                                            
        /// <returns>current geometryGroup</returns>                                                                                    
        public static GeometryGroup Children(this GeometryGroup geometryGroup, GeometryCollection children)
        {
            geometryGroup.Children = children;
            return geometryGroup;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="GlyphRunDrawing"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GlyphRunDrawingFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GlyphRunDrawing.GlyphRun"/> property of the current <see cref="GlyphRunDrawing"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" glyphRunDrawing">current <see cref="GlyphRunDrawing"/></param>                                                          
        /// <param name="glyphRun">glyphRun value</param>                                                                            
        /// <returns>current glyphRunDrawing</returns>                                                                                    
        public static GlyphRunDrawing GlyphRun(this GlyphRunDrawing glyphRunDrawing, GlyphRun glyphRun)
        {
            glyphRunDrawing.GlyphRun = glyphRun;
            return glyphRunDrawing;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GlyphRunDrawing.ForegroundBrush"/> property of the current <see cref="GlyphRunDrawing"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" glyphRunDrawing">current <see cref="GlyphRunDrawing"/></param>                                                          
        /// <param name="foregroundBrush">foregroundBrush value</param>                                                                            
        /// <returns>current glyphRunDrawing</returns>                                                                                    
        public static GlyphRunDrawing ForegroundBrush(this GlyphRunDrawing glyphRunDrawing, Brush foregroundBrush)
        {
            glyphRunDrawing.ForegroundBrush = foregroundBrush;
            return glyphRunDrawing;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="GradientBrush"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GradientBrushFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GradientBrush.ColorInterpolationMode"/> property of the current <see cref="GradientBrush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GradientBrush</typeparam>                                                                       
        /// <param name=" gradientBrush">current <see cref="GradientBrush"/></param>                                                          
        /// <param name="colorInterpolationMode">colorInterpolationMode value</param>                                                                            
        /// <returns>current gradientBrush</returns>                                                                                    
        public static TType ColorInterpolationMode<TType>(this TType gradientBrush, ColorInterpolationMode colorInterpolationMode) where TType : notnull, GradientBrush
        {
            gradientBrush.ColorInterpolationMode = colorInterpolationMode;
            return gradientBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GradientBrush.MappingMode"/> property of the current <see cref="GradientBrush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GradientBrush</typeparam>                                                                       
        /// <param name=" gradientBrush">current <see cref="GradientBrush"/></param>                                                          
        /// <param name="mappingMode">mappingMode value</param>                                                                            
        /// <returns>current gradientBrush</returns>                                                                                    
        public static TType MappingMode<TType>(this TType gradientBrush, BrushMappingMode mappingMode) where TType : notnull, GradientBrush
        {
            gradientBrush.MappingMode = mappingMode;
            return gradientBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GradientBrush.SpreadMethod"/> property of the current <see cref="GradientBrush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GradientBrush</typeparam>                                                                       
        /// <param name=" gradientBrush">current <see cref="GradientBrush"/></param>                                                          
        /// <param name="spreadMethod">spreadMethod value</param>                                                                            
        /// <returns>current gradientBrush</returns>                                                                                    
        public static TType SpreadMethod<TType>(this TType gradientBrush, GradientSpreadMethod spreadMethod) where TType : notnull, GradientBrush
        {
            gradientBrush.SpreadMethod = spreadMethod;
            return gradientBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GradientBrush.GradientStops"/> property of the current <see cref="GradientBrush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">GradientBrush</typeparam>                                                                       
        /// <param name=" gradientBrush">current <see cref="GradientBrush"/></param>                                                          
        /// <param name="gradientStops">gradientStops value</param>                                                                            
        /// <returns>current gradientBrush</returns>                                                                                    
        public static TType GradientStops<TType>(this TType gradientBrush, GradientStopCollection gradientStops) where TType : notnull, GradientBrush
        {
            gradientBrush.GradientStops = gradientStops;
            return gradientBrush;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="GradientStop"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GradientStopFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GradientStop.Color"/> property of the current <see cref="GradientStop"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" gradientStop">current <see cref="GradientStop"/></param>                                                          
        /// <param name="color">color value</param>                                                                            
        /// <returns>current gradientStop</returns>                                                                                    
        public static GradientStop Color(this GradientStop gradientStop, Color color)
        {
            gradientStop.Color = color;
            return gradientStop;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GradientStop.Offset"/> property of the current <see cref="GradientStop"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" gradientStop">current <see cref="GradientStop"/></param>                                                          
        /// <param name="offset">offset value</param>                                                                            
        /// <returns>current gradientStop</returns>                                                                                    
        public static GradientStop Offset(this GradientStop gradientStop, Double offset)
        {
            gradientStop.Offset = offset;
            return gradientStop;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="GuidelineSet"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GuidelineSetFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GuidelineSet.GuidelinesX"/> property of the current <see cref="GuidelineSet"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" guidelineSet">current <see cref="GuidelineSet"/></param>                                                          
        /// <param name="guidelinesX">guidelinesX value</param>                                                                            
        /// <returns>current guidelineSet</returns>                                                                                    
        public static GuidelineSet GuidelinesX(this GuidelineSet guidelineSet, DoubleCollection guidelinesX)
        {
            guidelineSet.GuidelinesX = guidelinesX;
            return guidelineSet;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GuidelineSet.GuidelinesY"/> property of the current <see cref="GuidelineSet"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" guidelineSet">current <see cref="GuidelineSet"/></param>                                                          
        /// <param name="guidelinesY">guidelinesY value</param>                                                                            
        /// <returns>current guidelineSet</returns>                                                                                    
        public static GuidelineSet GuidelinesY(this GuidelineSet guidelineSet, DoubleCollection guidelinesY)
        {
            guidelineSet.GuidelinesY = guidelinesY;
            return guidelineSet;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ImageBrush"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ImageBrushFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ImageBrush.ImageSource"/> property of the current <see cref="ImageBrush"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" imageBrush">current <see cref="ImageBrush"/></param>                                                          
        /// <param name="imageSource">imageSource value</param>                                                                            
        /// <returns>current imageBrush</returns>                                                                                    
        public static ImageBrush ImageSource(this ImageBrush imageBrush, ImageSource imageSource)
        {
            imageBrush.ImageSource = imageSource;
            return imageBrush;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ImageDrawing"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ImageDrawingFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ImageDrawing.ImageSource"/> property of the current <see cref="ImageDrawing"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" imageDrawing">current <see cref="ImageDrawing"/></param>                                                          
        /// <param name="imageSource">imageSource value</param>                                                                            
        /// <returns>current imageDrawing</returns>                                                                                    
        public static ImageDrawing ImageSource(this ImageDrawing imageDrawing, ImageSource imageSource)
        {
            imageDrawing.ImageSource = imageSource;
            return imageDrawing;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ImageDrawing.Rect"/> property of the current <see cref="ImageDrawing"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" imageDrawing">current <see cref="ImageDrawing"/></param>                                                          
        /// <param name="rect">rect value</param>                                                                            
        /// <returns>current imageDrawing</returns>                                                                                    
        public static ImageDrawing Rect(this ImageDrawing imageDrawing, Rect rect)
        {
            imageDrawing.Rect = rect;
            return imageDrawing;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="LinearGradientBrush"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class LinearGradientBrushFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="LinearGradientBrush.StartPoint"/> property of the current <see cref="LinearGradientBrush"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" linearGradientBrush">current <see cref="LinearGradientBrush"/></param>                                                          
        /// <param name="startPoint">startPoint value</param>                                                                            
        /// <returns>current linearGradientBrush</returns>                                                                                    
        public static LinearGradientBrush StartPoint(this LinearGradientBrush linearGradientBrush, Point startPoint)
        {
            linearGradientBrush.StartPoint = startPoint;
            return linearGradientBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="LinearGradientBrush.EndPoint"/> property of the current <see cref="LinearGradientBrush"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" linearGradientBrush">current <see cref="LinearGradientBrush"/></param>                                                          
        /// <param name="endPoint">endPoint value</param>                                                                            
        /// <returns>current linearGradientBrush</returns>                                                                                    
        public static LinearGradientBrush EndPoint(this LinearGradientBrush linearGradientBrush, Point endPoint)
        {
            linearGradientBrush.EndPoint = endPoint;
            return linearGradientBrush;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="LineGeometry"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class LineGeometryFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="LineGeometry.StartPoint"/> property of the current <see cref="LineGeometry"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" lineGeometry">current <see cref="LineGeometry"/></param>                                                          
        /// <param name="startPoint">startPoint value</param>                                                                            
        /// <returns>current lineGeometry</returns>                                                                                    
        public static LineGeometry StartPoint(this LineGeometry lineGeometry, Point startPoint)
        {
            lineGeometry.StartPoint = startPoint;
            return lineGeometry;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="LineGeometry.EndPoint"/> property of the current <see cref="LineGeometry"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" lineGeometry">current <see cref="LineGeometry"/></param>                                                          
        /// <param name="endPoint">endPoint value</param>                                                                            
        /// <returns>current lineGeometry</returns>                                                                                    
        public static LineGeometry EndPoint(this LineGeometry lineGeometry, Point endPoint)
        {
            lineGeometry.EndPoint = endPoint;
            return lineGeometry;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="LineSegment"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class LineSegmentFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="LineSegment.Point"/> property of the current <see cref="LineSegment"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" lineSegment">current <see cref="LineSegment"/></param>                                                          
        /// <param name="point">point value</param>                                                                            
        /// <returns>current lineSegment</returns>                                                                                    
        public static LineSegment Point(this LineSegment lineSegment, Point point)
        {
            lineSegment.Point = point;
            return lineSegment;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="MatrixTransform"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MatrixTransformFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="MatrixTransform.Matrix"/> property of the current <see cref="MatrixTransform"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" matrixTransform">current <see cref="MatrixTransform"/></param>                                                          
        /// <param name="matrix">matrix value</param>                                                                            
        /// <returns>current matrixTransform</returns>                                                                                    
        public static MatrixTransform Matrix(this MatrixTransform matrixTransform, Matrix matrix)
        {
            matrixTransform.Matrix = matrix;
            return matrixTransform;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="MediaPlayer"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MediaPlayerFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaPlayer.Volume"/> property of the current <see cref="MediaPlayer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaPlayer</typeparam>                                                                       
        /// <param name=" mediaPlayer">current <see cref="MediaPlayer"/></param>                                                          
        /// <param name="volume">volume value</param>                                                                            
        /// <returns>current mediaPlayer</returns>                                                                                    
        public static TType Volume<TType>(this TType mediaPlayer, Double volume) where TType : notnull, MediaPlayer
        {
            mediaPlayer.Volume = volume;
            return mediaPlayer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaPlayer.Balance"/> property of the current <see cref="MediaPlayer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaPlayer</typeparam>                                                                       
        /// <param name=" mediaPlayer">current <see cref="MediaPlayer"/></param>                                                          
        /// <param name="balance">balance value</param>                                                                            
        /// <returns>current mediaPlayer</returns>                                                                                    
        public static TType Balance<TType>(this TType mediaPlayer, Double balance) where TType : notnull, MediaPlayer
        {
            mediaPlayer.Balance = balance;
            return mediaPlayer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaPlayer.ScrubbingEnabled"/> property of the current <see cref="MediaPlayer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaPlayer</typeparam>                                                                       
        /// <param name=" mediaPlayer">current <see cref="MediaPlayer"/></param>                                                          
        /// <param name="scrubbingEnabled">scrubbingEnabled value</param>                                                                            
        /// <returns>current mediaPlayer</returns>                                                                                    
        public static TType ScrubbingEnabled<TType>(this TType mediaPlayer, Boolean scrubbingEnabled) where TType : notnull, MediaPlayer
        {
            mediaPlayer.ScrubbingEnabled = scrubbingEnabled;
            return mediaPlayer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaPlayer.IsMuted"/> property of the current <see cref="MediaPlayer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaPlayer</typeparam>                                                                       
        /// <param name=" mediaPlayer">current <see cref="MediaPlayer"/></param>                                                          
        /// <param name="isMuted">isMuted value</param>                                                                            
        /// <returns>current mediaPlayer</returns>                                                                                    
        public static TType IsMuted<TType>(this TType mediaPlayer, Boolean isMuted) where TType : notnull, MediaPlayer
        {
            mediaPlayer.IsMuted = isMuted;
            return mediaPlayer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaPlayer.Position"/> property of the current <see cref="MediaPlayer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaPlayer</typeparam>                                                                       
        /// <param name=" mediaPlayer">current <see cref="MediaPlayer"/></param>                                                          
        /// <param name="position">position value</param>                                                                            
        /// <returns>current mediaPlayer</returns>                                                                                    
        public static TType Position<TType>(this TType mediaPlayer, TimeSpan position) where TType : notnull, MediaPlayer
        {
            mediaPlayer.Position = position;
            return mediaPlayer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaPlayer.SpeedRatio"/> property of the current <see cref="MediaPlayer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaPlayer</typeparam>                                                                       
        /// <param name=" mediaPlayer">current <see cref="MediaPlayer"/></param>                                                          
        /// <param name="speedRatio">speedRatio value</param>                                                                            
        /// <returns>current mediaPlayer</returns>                                                                                    
        public static TType SpeedRatio<TType>(this TType mediaPlayer, Double speedRatio) where TType : notnull, MediaPlayer
        {
            mediaPlayer.SpeedRatio = speedRatio;
            return mediaPlayer;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaPlayer.Clock"/> property of the current <see cref="MediaPlayer"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaPlayer</typeparam>                                                                       
        /// <param name=" mediaPlayer">current <see cref="MediaPlayer"/></param>                                                          
        /// <param name="clock">clock value</param>                                                                            
        /// <returns>current mediaPlayer</returns>                                                                                    
        public static TType Clock<TType>(this TType mediaPlayer, MediaClock clock) where TType : notnull, MediaPlayer
        {
            mediaPlayer.Clock = clock;
            return mediaPlayer;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="MediaTimeline"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MediaTimelineFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="MediaTimeline.Source"/> property of the current <see cref="MediaTimeline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MediaTimeline</typeparam>                                                                       
        /// <param name=" mediaTimeline">current <see cref="MediaTimeline"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current mediaTimeline</returns>                                                                                    
        public static TType Source<TType>(this TType mediaTimeline, Uri source) where TType : notnull, MediaTimeline
        {
            mediaTimeline.Source = source;
            return mediaTimeline;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="PathFigure"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PathFigureFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PathFigure.StartPoint"/> property of the current <see cref="PathFigure"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pathFigure">current <see cref="PathFigure"/></param>                                                          
        /// <param name="startPoint">startPoint value</param>                                                                            
        /// <returns>current pathFigure</returns>                                                                                    
        public static PathFigure StartPoint(this PathFigure pathFigure, Point startPoint)
        {
            pathFigure.StartPoint = startPoint;
            return pathFigure;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PathFigure.IsFilled"/> property of the current <see cref="PathFigure"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pathFigure">current <see cref="PathFigure"/></param>                                                          
        /// <param name="isFilled">isFilled value</param>                                                                            
        /// <returns>current pathFigure</returns>                                                                                    
        public static PathFigure IsFilled(this PathFigure pathFigure, Boolean isFilled)
        {
            pathFigure.IsFilled = isFilled;
            return pathFigure;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PathFigure.Segments"/> property of the current <see cref="PathFigure"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pathFigure">current <see cref="PathFigure"/></param>                                                          
        /// <param name="segments">segments value</param>                                                                            
        /// <returns>current pathFigure</returns>                                                                                    
        public static PathFigure Segments(this PathFigure pathFigure, PathSegmentCollection segments)
        {
            pathFigure.Segments = segments;
            return pathFigure;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PathFigure.IsClosed"/> property of the current <see cref="PathFigure"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pathFigure">current <see cref="PathFigure"/></param>                                                          
        /// <param name="isClosed">isClosed value</param>                                                                            
        /// <returns>current pathFigure</returns>                                                                                    
        public static PathFigure IsClosed(this PathFigure pathFigure, Boolean isClosed)
        {
            pathFigure.IsClosed = isClosed;
            return pathFigure;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="PathGeometry"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PathGeometryFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PathGeometry.FillRule"/> property of the current <see cref="PathGeometry"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pathGeometry">current <see cref="PathGeometry"/></param>                                                          
        /// <param name="fillRule">fillRule value</param>                                                                            
        /// <returns>current pathGeometry</returns>                                                                                    
        public static PathGeometry FillRule(this PathGeometry pathGeometry, FillRule fillRule)
        {
            pathGeometry.FillRule = fillRule;
            return pathGeometry;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PathGeometry.Figures"/> property of the current <see cref="PathGeometry"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pathGeometry">current <see cref="PathGeometry"/></param>                                                          
        /// <param name="figures">figures value</param>                                                                            
        /// <returns>current pathGeometry</returns>                                                                                    
        public static PathGeometry Figures(this PathGeometry pathGeometry, PathFigureCollection figures)
        {
            pathGeometry.Figures = figures;
            return pathGeometry;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="PathSegment"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PathSegmentFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PathSegment.IsStroked"/> property of the current <see cref="PathSegment"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PathSegment</typeparam>                                                                       
        /// <param name=" pathSegment">current <see cref="PathSegment"/></param>                                                          
        /// <param name="isStroked">isStroked value</param>                                                                            
        /// <returns>current pathSegment</returns>                                                                                    
        public static TType IsStroked<TType>(this TType pathSegment, Boolean isStroked) where TType : notnull, PathSegment
        {
            pathSegment.IsStroked = isStroked;
            return pathSegment;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PathSegment.IsSmoothJoin"/> property of the current <see cref="PathSegment"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PathSegment</typeparam>                                                                       
        /// <param name=" pathSegment">current <see cref="PathSegment"/></param>                                                          
        /// <param name="isSmoothJoin">isSmoothJoin value</param>                                                                            
        /// <returns>current pathSegment</returns>                                                                                    
        public static TType IsSmoothJoin<TType>(this TType pathSegment, Boolean isSmoothJoin) where TType : notnull, PathSegment
        {
            pathSegment.IsSmoothJoin = isSmoothJoin;
            return pathSegment;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="Pen"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PenFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Pen.Brush"/> property of the current <see cref="Pen"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pen">current <see cref="Pen"/></param>                                                          
        /// <param name="brush">brush value</param>                                                                            
        /// <returns>current pen</returns>                                                                                    
        public static Pen Brush(this Pen pen, Brush brush)
        {
            pen.Brush = brush;
            return pen;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Pen.Thickness"/> property of the current <see cref="Pen"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pen">current <see cref="Pen"/></param>                                                          
        /// <param name="thickness">thickness value</param>                                                                            
        /// <returns>current pen</returns>                                                                                    
        public static Pen Thickness(this Pen pen, Double thickness)
        {
            pen.Thickness = thickness;
            return pen;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Pen.StartLineCap"/> property of the current <see cref="Pen"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pen">current <see cref="Pen"/></param>                                                          
        /// <param name="startLineCap">startLineCap value</param>                                                                            
        /// <returns>current pen</returns>                                                                                    
        public static Pen StartLineCap(this Pen pen, PenLineCap startLineCap)
        {
            pen.StartLineCap = startLineCap;
            return pen;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Pen.EndLineCap"/> property of the current <see cref="Pen"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pen">current <see cref="Pen"/></param>                                                          
        /// <param name="endLineCap">endLineCap value</param>                                                                            
        /// <returns>current pen</returns>                                                                                    
        public static Pen EndLineCap(this Pen pen, PenLineCap endLineCap)
        {
            pen.EndLineCap = endLineCap;
            return pen;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Pen.DashCap"/> property of the current <see cref="Pen"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pen">current <see cref="Pen"/></param>                                                          
        /// <param name="dashCap">dashCap value</param>                                                                            
        /// <returns>current pen</returns>                                                                                    
        public static Pen DashCap(this Pen pen, PenLineCap dashCap)
        {
            pen.DashCap = dashCap;
            return pen;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Pen.LineJoin"/> property of the current <see cref="Pen"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pen">current <see cref="Pen"/></param>                                                          
        /// <param name="lineJoin">lineJoin value</param>                                                                            
        /// <returns>current pen</returns>                                                                                    
        public static Pen LineJoin(this Pen pen, PenLineJoin lineJoin)
        {
            pen.LineJoin = lineJoin;
            return pen;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Pen.MiterLimit"/> property of the current <see cref="Pen"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pen">current <see cref="Pen"/></param>                                                          
        /// <param name="miterLimit">miterLimit value</param>                                                                            
        /// <returns>current pen</returns>                                                                                    
        public static Pen MiterLimit(this Pen pen, Double miterLimit)
        {
            pen.MiterLimit = miterLimit;
            return pen;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Pen.DashStyle"/> property of the current <see cref="Pen"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pen">current <see cref="Pen"/></param>                                                          
        /// <param name="dashStyle">dashStyle value</param>                                                                            
        /// <returns>current pen</returns>                                                                                    
        public static Pen DashStyle(this Pen pen, DashStyle dashStyle)
        {
            pen.DashStyle = dashStyle;
            return pen;
        }
    }
    
    /// <summary>                                                                                                                    
    /// <see cref="PolyBezierSegment"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PolyBezierSegmentFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PolyBezierSegment.Points"/> property of the current <see cref="PolyBezierSegment"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" polyBezierSegment">current <see cref="PolyBezierSegment"/></param>                                                          
        /// <param name="points">points value</param>                                                                            
        /// <returns>current polyBezierSegment</returns>                                                                                    
        public static PolyBezierSegment Points(this PolyBezierSegment polyBezierSegment, PointCollection points)
        {
            polyBezierSegment.Points = points;
            return polyBezierSegment;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="PolyLineSegment"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PolyLineSegmentFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PolyLineSegment.Points"/> property of the current <see cref="PolyLineSegment"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" polyLineSegment">current <see cref="PolyLineSegment"/></param>                                                          
        /// <param name="points">points value</param>                                                                            
        /// <returns>current polyLineSegment</returns>                                                                                    
        public static PolyLineSegment Points(this PolyLineSegment polyLineSegment, PointCollection points)
        {
            polyLineSegment.Points = points;
            return polyLineSegment;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="PolyQuadraticBezierSegment"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PolyQuadraticBezierSegmentFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PolyQuadraticBezierSegment.Points"/> property of the current <see cref="PolyQuadraticBezierSegment"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" polyQuadraticBezierSegment">current <see cref="PolyQuadraticBezierSegment"/></param>                                                          
        /// <param name="points">points value</param>                                                                            
        /// <returns>current polyQuadraticBezierSegment</returns>                                                                                    
        public static PolyQuadraticBezierSegment Points(this PolyQuadraticBezierSegment polyQuadraticBezierSegment, PointCollection points)
        {
            polyQuadraticBezierSegment.Points = points;
            return polyQuadraticBezierSegment;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="QuadraticBezierSegment"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class QuadraticBezierSegmentFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="QuadraticBezierSegment.Point1"/> property of the current <see cref="QuadraticBezierSegment"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" quadraticBezierSegment">current <see cref="QuadraticBezierSegment"/></param>                                                          
        /// <param name="point1">point1 value</param>                                                                            
        /// <returns>current quadraticBezierSegment</returns>                                                                                    
        public static QuadraticBezierSegment Point1(this QuadraticBezierSegment quadraticBezierSegment, Point point1)
        {
            quadraticBezierSegment.Point1 = point1;
            return quadraticBezierSegment;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="QuadraticBezierSegment.Point2"/> property of the current <see cref="QuadraticBezierSegment"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" quadraticBezierSegment">current <see cref="QuadraticBezierSegment"/></param>                                                          
        /// <param name="point2">point2 value</param>                                                                            
        /// <returns>current quadraticBezierSegment</returns>                                                                                    
        public static QuadraticBezierSegment Point2(this QuadraticBezierSegment quadraticBezierSegment, Point point2)
        {
            quadraticBezierSegment.Point2 = point2;
            return quadraticBezierSegment;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="RadialGradientBrush"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class RadialGradientBrushFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="RadialGradientBrush.Center"/> property of the current <see cref="RadialGradientBrush"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" radialGradientBrush">current <see cref="RadialGradientBrush"/></param>                                                          
        /// <param name="center">center value</param>                                                                            
        /// <returns>current radialGradientBrush</returns>                                                                                    
        public static RadialGradientBrush Center(this RadialGradientBrush radialGradientBrush, Point center)
        {
            radialGradientBrush.Center = center;
            return radialGradientBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RadialGradientBrush.RadiusX"/> property of the current <see cref="RadialGradientBrush"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" radialGradientBrush">current <see cref="RadialGradientBrush"/></param>                                                          
        /// <param name="radiusX">radiusX value</param>                                                                            
        /// <returns>current radialGradientBrush</returns>                                                                                    
        public static RadialGradientBrush RadiusX(this RadialGradientBrush radialGradientBrush, Double radiusX)
        {
            radialGradientBrush.RadiusX = radiusX;
            return radialGradientBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RadialGradientBrush.RadiusY"/> property of the current <see cref="RadialGradientBrush"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" radialGradientBrush">current <see cref="RadialGradientBrush"/></param>                                                          
        /// <param name="radiusY">radiusY value</param>                                                                            
        /// <returns>current radialGradientBrush</returns>                                                                                    
        public static RadialGradientBrush RadiusY(this RadialGradientBrush radialGradientBrush, Double radiusY)
        {
            radialGradientBrush.RadiusY = radiusY;
            return radialGradientBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RadialGradientBrush.GradientOrigin"/> property of the current <see cref="RadialGradientBrush"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" radialGradientBrush">current <see cref="RadialGradientBrush"/></param>                                                          
        /// <param name="gradientOrigin">gradientOrigin value</param>                                                                            
        /// <returns>current radialGradientBrush</returns>                                                                                    
        public static RadialGradientBrush GradientOrigin(this RadialGradientBrush radialGradientBrush, Point gradientOrigin)
        {
            radialGradientBrush.GradientOrigin = gradientOrigin;
            return radialGradientBrush;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="RectangleGeometry"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class RectangleGeometryFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="RectangleGeometry.RadiusX"/> property of the current <see cref="RectangleGeometry"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" rectangleGeometry">current <see cref="RectangleGeometry"/></param>                                                          
        /// <param name="radiusX">radiusX value</param>                                                                            
        /// <returns>current rectangleGeometry</returns>                                                                                    
        public static RectangleGeometry RadiusX(this RectangleGeometry rectangleGeometry, Double radiusX)
        {
            rectangleGeometry.RadiusX = radiusX;
            return rectangleGeometry;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RectangleGeometry.RadiusY"/> property of the current <see cref="RectangleGeometry"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" rectangleGeometry">current <see cref="RectangleGeometry"/></param>                                                          
        /// <param name="radiusY">radiusY value</param>                                                                            
        /// <returns>current rectangleGeometry</returns>                                                                                    
        public static RectangleGeometry RadiusY(this RectangleGeometry rectangleGeometry, Double radiusY)
        {
            rectangleGeometry.RadiusY = radiusY;
            return rectangleGeometry;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RectangleGeometry.Rect"/> property of the current <see cref="RectangleGeometry"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" rectangleGeometry">current <see cref="RectangleGeometry"/></param>                                                          
        /// <param name="rect">rect value</param>                                                                            
        /// <returns>current rectangleGeometry</returns>                                                                                    
        public static RectangleGeometry Rect(this RectangleGeometry rectangleGeometry, Rect rect)
        {
            rectangleGeometry.Rect = rect;
            return rectangleGeometry;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="RotateTransform"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class RotateTransformFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="RotateTransform.Angle"/> property of the current <see cref="RotateTransform"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" rotateTransform">current <see cref="RotateTransform"/></param>                                                          
        /// <param name="angle">angle value</param>                                                                            
        /// <returns>current rotateTransform</returns>                                                                                    
        public static RotateTransform Angle(this RotateTransform rotateTransform, Double angle)
        {
            rotateTransform.Angle = angle;
            return rotateTransform;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RotateTransform.CenterX"/> property of the current <see cref="RotateTransform"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" rotateTransform">current <see cref="RotateTransform"/></param>                                                          
        /// <param name="centerX">centerX value</param>                                                                            
        /// <returns>current rotateTransform</returns>                                                                                    
        public static RotateTransform CenterX(this RotateTransform rotateTransform, Double centerX)
        {
            rotateTransform.CenterX = centerX;
            return rotateTransform;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RotateTransform.CenterY"/> property of the current <see cref="RotateTransform"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" rotateTransform">current <see cref="RotateTransform"/></param>                                                          
        /// <param name="centerY">centerY value</param>                                                                            
        /// <returns>current rotateTransform</returns>                                                                                    
        public static RotateTransform CenterY(this RotateTransform rotateTransform, Double centerY)
        {
            rotateTransform.CenterY = centerY;
            return rotateTransform;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ScaleTransform"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ScaleTransformFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ScaleTransform.ScaleX"/> property of the current <see cref="ScaleTransform"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" scaleTransform">current <see cref="ScaleTransform"/></param>                                                          
        /// <param name="scaleX">scaleX value</param>                                                                            
        /// <returns>current scaleTransform</returns>                                                                                    
        public static ScaleTransform ScaleX(this ScaleTransform scaleTransform, Double scaleX)
        {
            scaleTransform.ScaleX = scaleX;
            return scaleTransform;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScaleTransform.ScaleY"/> property of the current <see cref="ScaleTransform"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" scaleTransform">current <see cref="ScaleTransform"/></param>                                                          
        /// <param name="scaleY">scaleY value</param>                                                                            
        /// <returns>current scaleTransform</returns>                                                                                    
        public static ScaleTransform ScaleY(this ScaleTransform scaleTransform, Double scaleY)
        {
            scaleTransform.ScaleY = scaleY;
            return scaleTransform;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScaleTransform.CenterX"/> property of the current <see cref="ScaleTransform"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" scaleTransform">current <see cref="ScaleTransform"/></param>                                                          
        /// <param name="centerX">centerX value</param>                                                                            
        /// <returns>current scaleTransform</returns>                                                                                    
        public static ScaleTransform CenterX(this ScaleTransform scaleTransform, Double centerX)
        {
            scaleTransform.CenterX = centerX;
            return scaleTransform;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScaleTransform.CenterY"/> property of the current <see cref="ScaleTransform"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" scaleTransform">current <see cref="ScaleTransform"/></param>                                                          
        /// <param name="centerY">centerY value</param>                                                                            
        /// <returns>current scaleTransform</returns>                                                                                    
        public static ScaleTransform CenterY(this ScaleTransform scaleTransform, Double centerY)
        {
            scaleTransform.CenterY = centerY;
            return scaleTransform;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SkewTransform"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SkewTransformFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SkewTransform.AngleX"/> property of the current <see cref="SkewTransform"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" skewTransform">current <see cref="SkewTransform"/></param>                                                          
        /// <param name="angleX">angleX value</param>                                                                            
        /// <returns>current skewTransform</returns>                                                                                    
        public static SkewTransform AngleX(this SkewTransform skewTransform, Double angleX)
        {
            skewTransform.AngleX = angleX;
            return skewTransform;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SkewTransform.AngleY"/> property of the current <see cref="SkewTransform"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" skewTransform">current <see cref="SkewTransform"/></param>                                                          
        /// <param name="angleY">angleY value</param>                                                                            
        /// <returns>current skewTransform</returns>                                                                                    
        public static SkewTransform AngleY(this SkewTransform skewTransform, Double angleY)
        {
            skewTransform.AngleY = angleY;
            return skewTransform;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SkewTransform.CenterX"/> property of the current <see cref="SkewTransform"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" skewTransform">current <see cref="SkewTransform"/></param>                                                          
        /// <param name="centerX">centerX value</param>                                                                            
        /// <returns>current skewTransform</returns>                                                                                    
        public static SkewTransform CenterX(this SkewTransform skewTransform, Double centerX)
        {
            skewTransform.CenterX = centerX;
            return skewTransform;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SkewTransform.CenterY"/> property of the current <see cref="SkewTransform"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" skewTransform">current <see cref="SkewTransform"/></param>                                                          
        /// <param name="centerY">centerY value</param>                                                                            
        /// <returns>current skewTransform</returns>                                                                                    
        public static SkewTransform CenterY(this SkewTransform skewTransform, Double centerY)
        {
            skewTransform.CenterY = centerY;
            return skewTransform;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SolidColorBrush"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SolidColorBrushFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SolidColorBrush.Color"/> property of the current <see cref="SolidColorBrush"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" solidColorBrush">current <see cref="SolidColorBrush"/></param>                                                          
        /// <param name="color">color value</param>                                                                            
        /// <returns>current solidColorBrush</returns>                                                                                    
        public static SolidColorBrush Color(this SolidColorBrush solidColorBrush, Color color)
        {
            solidColorBrush.Color = color;
            return solidColorBrush;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="StreamGeometry"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class StreamGeometryFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="StreamGeometry.FillRule"/> property of the current <see cref="StreamGeometry"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" streamGeometry">current <see cref="StreamGeometry"/></param>                                                          
        /// <param name="fillRule">fillRule value</param>                                                                            
        /// <returns>current streamGeometry</returns>                                                                                    
        public static StreamGeometry FillRule(this StreamGeometry streamGeometry, FillRule fillRule)
        {
            streamGeometry.FillRule = fillRule;
            return streamGeometry;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TextEffect"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TextEffectFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TextEffect.Transform"/> property of the current <see cref="TextEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" textEffect">current <see cref="TextEffect"/></param>                                                          
        /// <param name="transform">transform value</param>                                                                            
        /// <returns>current textEffect</returns>                                                                                    
        public static TextEffect Transform(this TextEffect textEffect, Transform transform)
        {
            textEffect.Transform = transform;
            return textEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextEffect.Clip"/> property of the current <see cref="TextEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" textEffect">current <see cref="TextEffect"/></param>                                                          
        /// <param name="clip">clip value</param>                                                                            
        /// <returns>current textEffect</returns>                                                                                    
        public static TextEffect Clip(this TextEffect textEffect, Geometry clip)
        {
            textEffect.Clip = clip;
            return textEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextEffect.Foreground"/> property of the current <see cref="TextEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" textEffect">current <see cref="TextEffect"/></param>                                                          
        /// <param name="foreground">foreground value</param>                                                                            
        /// <returns>current textEffect</returns>                                                                                    
        public static TextEffect Foreground(this TextEffect textEffect, Brush foreground)
        {
            textEffect.Foreground = foreground;
            return textEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextEffect.PositionStart"/> property of the current <see cref="TextEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" textEffect">current <see cref="TextEffect"/></param>                                                          
        /// <param name="positionStart">positionStart value</param>                                                                            
        /// <returns>current textEffect</returns>                                                                                    
        public static TextEffect PositionStart(this TextEffect textEffect, Int32 positionStart)
        {
            textEffect.PositionStart = positionStart;
            return textEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TextEffect.PositionCount"/> property of the current <see cref="TextEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" textEffect">current <see cref="TextEffect"/></param>                                                          
        /// <param name="positionCount">positionCount value</param>                                                                            
        /// <returns>current textEffect</returns>                                                                                    
        public static TextEffect PositionCount(this TextEffect textEffect, Int32 positionCount)
        {
            textEffect.PositionCount = positionCount;
            return textEffect;
        }
    }
    
    /// <summary>                                                                                                                    
    /// <see cref="TileBrush"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TileBrushFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TileBrush.ViewportUnits"/> property of the current <see cref="TileBrush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TileBrush</typeparam>                                                                       
        /// <param name=" tileBrush">current <see cref="TileBrush"/></param>                                                          
        /// <param name="viewportUnits">viewportUnits value</param>                                                                            
        /// <returns>current tileBrush</returns>                                                                                    
        public static TType ViewportUnits<TType>(this TType tileBrush, BrushMappingMode viewportUnits) where TType : notnull, TileBrush
        {
            tileBrush.ViewportUnits = viewportUnits;
            return tileBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TileBrush.ViewboxUnits"/> property of the current <see cref="TileBrush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TileBrush</typeparam>                                                                       
        /// <param name=" tileBrush">current <see cref="TileBrush"/></param>                                                          
        /// <param name="viewboxUnits">viewboxUnits value</param>                                                                            
        /// <returns>current tileBrush</returns>                                                                                    
        public static TType ViewboxUnits<TType>(this TType tileBrush, BrushMappingMode viewboxUnits) where TType : notnull, TileBrush
        {
            tileBrush.ViewboxUnits = viewboxUnits;
            return tileBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TileBrush.Viewport"/> property of the current <see cref="TileBrush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TileBrush</typeparam>                                                                       
        /// <param name=" tileBrush">current <see cref="TileBrush"/></param>                                                          
        /// <param name="viewport">viewport value</param>                                                                            
        /// <returns>current tileBrush</returns>                                                                                    
        public static TType Viewport<TType>(this TType tileBrush, Rect viewport) where TType : notnull, TileBrush
        {
            tileBrush.Viewport = viewport;
            return tileBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TileBrush.Viewbox"/> property of the current <see cref="TileBrush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TileBrush</typeparam>                                                                       
        /// <param name=" tileBrush">current <see cref="TileBrush"/></param>                                                          
        /// <param name="viewbox">viewbox value</param>                                                                            
        /// <returns>current tileBrush</returns>                                                                                    
        public static TType Viewbox<TType>(this TType tileBrush, Rect viewbox) where TType : notnull, TileBrush
        {
            tileBrush.Viewbox = viewbox;
            return tileBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TileBrush.Stretch"/> property of the current <see cref="TileBrush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TileBrush</typeparam>                                                                       
        /// <param name=" tileBrush">current <see cref="TileBrush"/></param>                                                          
        /// <param name="stretch">stretch value</param>                                                                            
        /// <returns>current tileBrush</returns>                                                                                    
        public static TType Stretch<TType>(this TType tileBrush, Stretch stretch) where TType : notnull, TileBrush
        {
            tileBrush.Stretch = stretch;
            return tileBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TileBrush.TileMode"/> property of the current <see cref="TileBrush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TileBrush</typeparam>                                                                       
        /// <param name=" tileBrush">current <see cref="TileBrush"/></param>                                                          
        /// <param name="tileMode">tileMode value</param>                                                                            
        /// <returns>current tileBrush</returns>                                                                                    
        public static TType TileMode<TType>(this TType tileBrush, TileMode tileMode) where TType : notnull, TileBrush
        {
            tileBrush.TileMode = tileMode;
            return tileBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TileBrush.AlignmentX"/> property of the current <see cref="TileBrush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TileBrush</typeparam>                                                                       
        /// <param name=" tileBrush">current <see cref="TileBrush"/></param>                                                          
        /// <param name="alignmentX">alignmentX value</param>                                                                            
        /// <returns>current tileBrush</returns>                                                                                    
        public static TType AlignmentX<TType>(this TType tileBrush, AlignmentX alignmentX) where TType : notnull, TileBrush
        {
            tileBrush.AlignmentX = alignmentX;
            return tileBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TileBrush.AlignmentY"/> property of the current <see cref="TileBrush"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TileBrush</typeparam>                                                                       
        /// <param name=" tileBrush">current <see cref="TileBrush"/></param>                                                          
        /// <param name="alignmentY">alignmentY value</param>                                                                            
        /// <returns>current tileBrush</returns>                                                                                    
        public static TType AlignmentY<TType>(this TType tileBrush, AlignmentY alignmentY) where TType : notnull, TileBrush
        {
            tileBrush.AlignmentY = alignmentY;
            return tileBrush;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TransformGroup"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TransformGroupFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TransformGroup.Children"/> property of the current <see cref="TransformGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" transformGroup">current <see cref="TransformGroup"/></param>                                                          
        /// <param name="children">children value</param>                                                                            
        /// <returns>current transformGroup</returns>                                                                                    
        public static TransformGroup Children(this TransformGroup transformGroup, TransformCollection children)
        {
            transformGroup.Children = children;
            return transformGroup;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TranslateTransform"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TranslateTransformFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TranslateTransform.X"/> property of the current <see cref="TranslateTransform"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" translateTransform">current <see cref="TranslateTransform"/></param>                                                          
        /// <param name="x">x value</param>                                                                            
        /// <returns>current translateTransform</returns>                                                                                    
        public static TranslateTransform X(this TranslateTransform translateTransform, Double x)
        {
            translateTransform.X = x;
            return translateTransform;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TranslateTransform.Y"/> property of the current <see cref="TranslateTransform"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" translateTransform">current <see cref="TranslateTransform"/></param>                                                          
        /// <param name="y">y value</param>                                                                            
        /// <returns>current translateTransform</returns>                                                                                    
        public static TranslateTransform Y(this TranslateTransform translateTransform, Double y)
        {
            translateTransform.Y = y;
            return translateTransform;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="VideoDrawing"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class VideoDrawingFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="VideoDrawing.Player"/> property of the current <see cref="VideoDrawing"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" videoDrawing">current <see cref="VideoDrawing"/></param>                                                          
        /// <param name="player">player value</param>                                                                            
        /// <returns>current videoDrawing</returns>                                                                                    
        public static VideoDrawing Player(this VideoDrawing videoDrawing, MediaPlayer player)
        {
            videoDrawing.Player = player;
            return videoDrawing;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VideoDrawing.Rect"/> property of the current <see cref="VideoDrawing"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" videoDrawing">current <see cref="VideoDrawing"/></param>                                                          
        /// <param name="rect">rect value</param>                                                                            
        /// <returns>current videoDrawing</returns>                                                                                    
        public static VideoDrawing Rect(this VideoDrawing videoDrawing, Rect rect)
        {
            videoDrawing.Rect = rect;
            return videoDrawing;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="VisualBrush"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class VisualBrushFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="VisualBrush.Visual"/> property of the current <see cref="VisualBrush"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" visualBrush">current <see cref="VisualBrush"/></param>                                                          
        /// <param name="visual">visual value</param>                                                                            
        /// <returns>current visualBrush</returns>                                                                                    
        public static VisualBrush Visual(this VisualBrush visualBrush, Visual visual)
        {
            visualBrush.Visual = visual;
            return visualBrush;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VisualBrush.AutoLayoutContent"/> property of the current <see cref="VisualBrush"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" visualBrush">current <see cref="VisualBrush"/></param>                                                          
        /// <param name="autoLayoutContent">autoLayoutContent value</param>                                                                            
        /// <returns>current visualBrush</returns>                                                                                    
        public static VisualBrush AutoLayoutContent(this VisualBrush visualBrush, Boolean autoLayoutContent)
        {
            visualBrush.AutoLayoutContent = autoLayoutContent;
            return visualBrush;
        }
    }
    
    /// <summary>                                                                                                                    
    /// <see cref="AxisAngleRotation3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class AxisAngleRotation3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="AxisAngleRotation3D.Axis"/> property of the current <see cref="AxisAngleRotation3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" axisAngleRotation3D">current <see cref="AxisAngleRotation3D"/></param>                                                          
        /// <param name="axis">axis value</param>                                                                            
        /// <returns>current axisAngleRotation3D</returns>                                                                                    
        public static AxisAngleRotation3D Axis(this AxisAngleRotation3D axisAngleRotation3D, Vector3D axis)
        {
            axisAngleRotation3D.Axis = axis;
            return axisAngleRotation3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="AxisAngleRotation3D.Angle"/> property of the current <see cref="AxisAngleRotation3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" axisAngleRotation3D">current <see cref="AxisAngleRotation3D"/></param>                                                          
        /// <param name="angle">angle value</param>                                                                            
        /// <returns>current axisAngleRotation3D</returns>                                                                                    
        public static AxisAngleRotation3D Angle(this AxisAngleRotation3D axisAngleRotation3D, Double angle)
        {
            axisAngleRotation3D.Angle = angle;
            return axisAngleRotation3D;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Camera"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class CameraFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Camera.Transform"/> property of the current <see cref="Camera"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Camera</typeparam>                                                                       
        /// <param name=" camera">current <see cref="Camera"/></param>                                                          
        /// <param name="transform">transform value</param>                                                                            
        /// <returns>current camera</returns>                                                                                    
        public static TType Transform<TType>(this TType camera, Transform3D transform) where TType : notnull, Camera
        {
            camera.Transform = transform;
            return camera;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DiffuseMaterial"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DiffuseMaterialFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DiffuseMaterial.Color"/> property of the current <see cref="DiffuseMaterial"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" diffuseMaterial">current <see cref="DiffuseMaterial"/></param>                                                          
        /// <param name="color">color value</param>                                                                            
        /// <returns>current diffuseMaterial</returns>                                                                                    
        public static DiffuseMaterial Color(this DiffuseMaterial diffuseMaterial, Color color)
        {
            diffuseMaterial.Color = color;
            return diffuseMaterial;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DiffuseMaterial.AmbientColor"/> property of the current <see cref="DiffuseMaterial"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" diffuseMaterial">current <see cref="DiffuseMaterial"/></param>                                                          
        /// <param name="ambientColor">ambientColor value</param>                                                                            
        /// <returns>current diffuseMaterial</returns>                                                                                    
        public static DiffuseMaterial AmbientColor(this DiffuseMaterial diffuseMaterial, Color ambientColor)
        {
            diffuseMaterial.AmbientColor = ambientColor;
            return diffuseMaterial;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DiffuseMaterial.Brush"/> property of the current <see cref="DiffuseMaterial"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" diffuseMaterial">current <see cref="DiffuseMaterial"/></param>                                                          
        /// <param name="brush">brush value</param>                                                                            
        /// <returns>current diffuseMaterial</returns>                                                                                    
        public static DiffuseMaterial Brush(this DiffuseMaterial diffuseMaterial, Brush brush)
        {
            diffuseMaterial.Brush = brush;
            return diffuseMaterial;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DirectionalLight"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DirectionalLightFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DirectionalLight.Direction"/> property of the current <see cref="DirectionalLight"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" directionalLight">current <see cref="DirectionalLight"/></param>                                                          
        /// <param name="direction">direction value</param>                                                                            
        /// <returns>current directionalLight</returns>                                                                                    
        public static DirectionalLight Direction(this DirectionalLight directionalLight, Vector3D direction)
        {
            directionalLight.Direction = direction;
            return directionalLight;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EmissiveMaterial"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EmissiveMaterialFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EmissiveMaterial.Color"/> property of the current <see cref="EmissiveMaterial"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" emissiveMaterial">current <see cref="EmissiveMaterial"/></param>                                                          
        /// <param name="color">color value</param>                                                                            
        /// <returns>current emissiveMaterial</returns>                                                                                    
        public static EmissiveMaterial Color(this EmissiveMaterial emissiveMaterial, Color color)
        {
            emissiveMaterial.Color = color;
            return emissiveMaterial;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="EmissiveMaterial.Brush"/> property of the current <see cref="EmissiveMaterial"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" emissiveMaterial">current <see cref="EmissiveMaterial"/></param>                                                          
        /// <param name="brush">brush value</param>                                                                            
        /// <returns>current emissiveMaterial</returns>                                                                                    
        public static EmissiveMaterial Brush(this EmissiveMaterial emissiveMaterial, Brush brush)
        {
            emissiveMaterial.Brush = brush;
            return emissiveMaterial;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="GeneralTransform3DGroup"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GeneralTransform3DGroupFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GeneralTransform3DGroup.Children"/> property of the current <see cref="GeneralTransform3DGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" generalTransform3DGroup">current <see cref="GeneralTransform3DGroup"/></param>                                                          
        /// <param name="children">children value</param>                                                                            
        /// <returns>current generalTransform3DGroup</returns>                                                                                    
        public static GeneralTransform3DGroup Children(this GeneralTransform3DGroup generalTransform3DGroup, GeneralTransform3DCollection children)
        {
            generalTransform3DGroup.Children = children;
            return generalTransform3DGroup;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="GeometryModel3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class GeometryModel3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="GeometryModel3D.Geometry"/> property of the current <see cref="GeometryModel3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" geometryModel3D">current <see cref="GeometryModel3D"/></param>                                                          
        /// <param name="geometry">geometry value</param>                                                                            
        /// <returns>current geometryModel3D</returns>                                                                                    
        public static GeometryModel3D Geometry(this GeometryModel3D geometryModel3D, Geometry3D geometry)
        {
            geometryModel3D.Geometry = geometry;
            return geometryModel3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GeometryModel3D.Material"/> property of the current <see cref="GeometryModel3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" geometryModel3D">current <see cref="GeometryModel3D"/></param>                                                          
        /// <param name="material">material value</param>                                                                            
        /// <returns>current geometryModel3D</returns>                                                                                    
        public static GeometryModel3D Material(this GeometryModel3D geometryModel3D, Material material)
        {
            geometryModel3D.Material = material;
            return geometryModel3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="GeometryModel3D.BackMaterial"/> property of the current <see cref="GeometryModel3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" geometryModel3D">current <see cref="GeometryModel3D"/></param>                                                          
        /// <param name="backMaterial">backMaterial value</param>                                                                            
        /// <returns>current geometryModel3D</returns>                                                                                    
        public static GeometryModel3D BackMaterial(this GeometryModel3D geometryModel3D, Material backMaterial)
        {
            geometryModel3D.BackMaterial = backMaterial;
            return geometryModel3D;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Light"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class LightFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Light.Color"/> property of the current <see cref="Light"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Light</typeparam>                                                                       
        /// <param name=" light">current <see cref="Light"/></param>                                                          
        /// <param name="color">color value</param>                                                                            
        /// <returns>current light</returns>                                                                                    
        public static TType Color<TType>(this TType light, Color color) where TType : notnull, Light
        {
            light.Color = color;
            return light;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="MaterialGroup"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MaterialGroupFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="MaterialGroup.Children"/> property of the current <see cref="MaterialGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" materialGroup">current <see cref="MaterialGroup"/></param>                                                          
        /// <param name="children">children value</param>                                                                            
        /// <returns>current materialGroup</returns>                                                                                    
        public static MaterialGroup Children(this MaterialGroup materialGroup, MaterialCollection children)
        {
            materialGroup.Children = children;
            return materialGroup;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="MatrixCamera"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MatrixCameraFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="MatrixCamera.ViewMatrix"/> property of the current <see cref="MatrixCamera"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" matrixCamera">current <see cref="MatrixCamera"/></param>                                                          
        /// <param name="viewMatrix">viewMatrix value</param>                                                                            
        /// <returns>current matrixCamera</returns>                                                                                    
        public static MatrixCamera ViewMatrix(this MatrixCamera matrixCamera, Matrix3D viewMatrix)
        {
            matrixCamera.ViewMatrix = viewMatrix;
            return matrixCamera;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MatrixCamera.ProjectionMatrix"/> property of the current <see cref="MatrixCamera"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" matrixCamera">current <see cref="MatrixCamera"/></param>                                                          
        /// <param name="projectionMatrix">projectionMatrix value</param>                                                                            
        /// <returns>current matrixCamera</returns>                                                                                    
        public static MatrixCamera ProjectionMatrix(this MatrixCamera matrixCamera, Matrix3D projectionMatrix)
        {
            matrixCamera.ProjectionMatrix = projectionMatrix;
            return matrixCamera;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="MatrixTransform3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MatrixTransform3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="MatrixTransform3D.Matrix"/> property of the current <see cref="MatrixTransform3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" matrixTransform3D">current <see cref="MatrixTransform3D"/></param>                                                          
        /// <param name="matrix">matrix value</param>                                                                            
        /// <returns>current matrixTransform3D</returns>                                                                                    
        public static MatrixTransform3D Matrix(this MatrixTransform3D matrixTransform3D, Matrix3D matrix)
        {
            matrixTransform3D.Matrix = matrix;
            return matrixTransform3D;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="MeshGeometry3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MeshGeometry3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="MeshGeometry3D.Positions"/> property of the current <see cref="MeshGeometry3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" meshGeometry3D">current <see cref="MeshGeometry3D"/></param>                                                          
        /// <param name="positions">positions value</param>                                                                            
        /// <returns>current meshGeometry3D</returns>                                                                                    
        public static MeshGeometry3D Positions(this MeshGeometry3D meshGeometry3D, Point3DCollection positions)
        {
            meshGeometry3D.Positions = positions;
            return meshGeometry3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MeshGeometry3D.Normals"/> property of the current <see cref="MeshGeometry3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" meshGeometry3D">current <see cref="MeshGeometry3D"/></param>                                                          
        /// <param name="normals">normals value</param>                                                                            
        /// <returns>current meshGeometry3D</returns>                                                                                    
        public static MeshGeometry3D Normals(this MeshGeometry3D meshGeometry3D, Vector3DCollection normals)
        {
            meshGeometry3D.Normals = normals;
            return meshGeometry3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MeshGeometry3D.TextureCoordinates"/> property of the current <see cref="MeshGeometry3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" meshGeometry3D">current <see cref="MeshGeometry3D"/></param>                                                          
        /// <param name="textureCoordinates">textureCoordinates value</param>                                                                            
        /// <returns>current meshGeometry3D</returns>                                                                                    
        public static MeshGeometry3D TextureCoordinates(this MeshGeometry3D meshGeometry3D, PointCollection textureCoordinates)
        {
            meshGeometry3D.TextureCoordinates = textureCoordinates;
            return meshGeometry3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MeshGeometry3D.TriangleIndices"/> property of the current <see cref="MeshGeometry3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" meshGeometry3D">current <see cref="MeshGeometry3D"/></param>                                                          
        /// <param name="triangleIndices">triangleIndices value</param>                                                                            
        /// <returns>current meshGeometry3D</returns>                                                                                    
        public static MeshGeometry3D TriangleIndices(this MeshGeometry3D meshGeometry3D, Int32Collection triangleIndices)
        {
            meshGeometry3D.TriangleIndices = triangleIndices;
            return meshGeometry3D;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Model3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Model3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Model3D.Transform"/> property of the current <see cref="Model3D"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Model3D</typeparam>                                                                       
        /// <param name=" model3D">current <see cref="Model3D"/></param>                                                          
        /// <param name="transform">transform value</param>                                                                            
        /// <returns>current model3D</returns>                                                                                    
        public static TType Transform<TType>(this TType model3D, Transform3D transform) where TType : notnull, Model3D
        {
            model3D.Transform = transform;
            return model3D;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Model3DGroup"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Model3DGroupFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Model3DGroup.Children"/> property of the current <see cref="Model3DGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" model3DGroup">current <see cref="Model3DGroup"/></param>                                                          
        /// <param name="children">children value</param>                                                                            
        /// <returns>current model3DGroup</returns>                                                                                    
        public static Model3DGroup Children(this Model3DGroup model3DGroup, Model3DCollection children)
        {
            model3DGroup.Children = children;
            return model3DGroup;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ModelUIElement3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ModelUIElement3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ModelUIElement3D.Model"/> property of the current <see cref="ModelUIElement3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" modelUIElement3D">current <see cref="ModelUIElement3D"/></param>                                                          
        /// <param name="model">model value</param>                                                                            
        /// <returns>current modelUIElement3D</returns>                                                                                    
        public static ModelUIElement3D Model(this ModelUIElement3D modelUIElement3D, Model3D model)
        {
            modelUIElement3D.Model = model;
            return modelUIElement3D;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ModelVisual3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ModelVisual3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ModelVisual3D.Content"/> property of the current <see cref="ModelVisual3D"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ModelVisual3D</typeparam>                                                                       
        /// <param name=" modelVisual3D">current <see cref="ModelVisual3D"/></param>                                                          
        /// <param name="content">content value</param>                                                                            
        /// <returns>current modelVisual3D</returns>                                                                                    
        public static TType Content<TType>(this TType modelVisual3D, Model3D content) where TType : notnull, ModelVisual3D
        {
            modelVisual3D.Content = content;
            return modelVisual3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ModelVisual3D.Transform"/> property of the current <see cref="ModelVisual3D"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ModelVisual3D</typeparam>                                                                       
        /// <param name=" modelVisual3D">current <see cref="ModelVisual3D"/></param>                                                          
        /// <param name="transform">transform value</param>                                                                            
        /// <returns>current modelVisual3D</returns>                                                                                    
        public static TType Transform<TType>(this TType modelVisual3D, Transform3D transform) where TType : notnull, ModelVisual3D
        {
            modelVisual3D.Transform = transform;
            return modelVisual3D;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="OrthographicCamera"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class OrthographicCameraFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="OrthographicCamera.Width"/> property of the current <see cref="OrthographicCamera"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" orthographicCamera">current <see cref="OrthographicCamera"/></param>                                                          
        /// <param name="width">width value</param>                                                                            
        /// <returns>current orthographicCamera</returns>                                                                                    
        public static OrthographicCamera Width(this OrthographicCamera orthographicCamera, Double width)
        {
            orthographicCamera.Width = width;
            return orthographicCamera;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="PerspectiveCamera"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PerspectiveCameraFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PerspectiveCamera.FieldOfView"/> property of the current <see cref="PerspectiveCamera"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" perspectiveCamera">current <see cref="PerspectiveCamera"/></param>                                                          
        /// <param name="fieldOfView">fieldOfView value</param>                                                                            
        /// <returns>current perspectiveCamera</returns>                                                                                    
        public static PerspectiveCamera FieldOfView(this PerspectiveCamera perspectiveCamera, Double fieldOfView)
        {
            perspectiveCamera.FieldOfView = fieldOfView;
            return perspectiveCamera;
        }
    }
    
    /// <summary>                                                                                                                    
    /// <see cref="PointLightBase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PointLightBaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PointLightBase.Position"/> property of the current <see cref="PointLightBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointLightBase</typeparam>                                                                       
        /// <param name=" pointLightBase">current <see cref="PointLightBase"/></param>                                                          
        /// <param name="position">position value</param>                                                                            
        /// <returns>current pointLightBase</returns>                                                                                    
        public static TType Position<TType>(this TType pointLightBase, Point3D position) where TType : notnull, PointLightBase
        {
            pointLightBase.Position = position;
            return pointLightBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PointLightBase.Range"/> property of the current <see cref="PointLightBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointLightBase</typeparam>                                                                       
        /// <param name=" pointLightBase">current <see cref="PointLightBase"/></param>                                                          
        /// <param name="range">range value</param>                                                                            
        /// <returns>current pointLightBase</returns>                                                                                    
        public static TType Range<TType>(this TType pointLightBase, Double range) where TType : notnull, PointLightBase
        {
            pointLightBase.Range = range;
            return pointLightBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PointLightBase.ConstantAttenuation"/> property of the current <see cref="PointLightBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointLightBase</typeparam>                                                                       
        /// <param name=" pointLightBase">current <see cref="PointLightBase"/></param>                                                          
        /// <param name="constantAttenuation">constantAttenuation value</param>                                                                            
        /// <returns>current pointLightBase</returns>                                                                                    
        public static TType ConstantAttenuation<TType>(this TType pointLightBase, Double constantAttenuation) where TType : notnull, PointLightBase
        {
            pointLightBase.ConstantAttenuation = constantAttenuation;
            return pointLightBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PointLightBase.LinearAttenuation"/> property of the current <see cref="PointLightBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointLightBase</typeparam>                                                                       
        /// <param name=" pointLightBase">current <see cref="PointLightBase"/></param>                                                          
        /// <param name="linearAttenuation">linearAttenuation value</param>                                                                            
        /// <returns>current pointLightBase</returns>                                                                                    
        public static TType LinearAttenuation<TType>(this TType pointLightBase, Double linearAttenuation) where TType : notnull, PointLightBase
        {
            pointLightBase.LinearAttenuation = linearAttenuation;
            return pointLightBase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PointLightBase.QuadraticAttenuation"/> property of the current <see cref="PointLightBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointLightBase</typeparam>                                                                       
        /// <param name=" pointLightBase">current <see cref="PointLightBase"/></param>                                                          
        /// <param name="quadraticAttenuation">quadraticAttenuation value</param>                                                                            
        /// <returns>current pointLightBase</returns>                                                                                    
        public static TType QuadraticAttenuation<TType>(this TType pointLightBase, Double quadraticAttenuation) where TType : notnull, PointLightBase
        {
            pointLightBase.QuadraticAttenuation = quadraticAttenuation;
            return pointLightBase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ProjectionCamera"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ProjectionCameraFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ProjectionCamera.NearPlaneDistance"/> property of the current <see cref="ProjectionCamera"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ProjectionCamera</typeparam>                                                                       
        /// <param name=" projectionCamera">current <see cref="ProjectionCamera"/></param>                                                          
        /// <param name="nearPlaneDistance">nearPlaneDistance value</param>                                                                            
        /// <returns>current projectionCamera</returns>                                                                                    
        public static TType NearPlaneDistance<TType>(this TType projectionCamera, Double nearPlaneDistance) where TType : notnull, ProjectionCamera
        {
            projectionCamera.NearPlaneDistance = nearPlaneDistance;
            return projectionCamera;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ProjectionCamera.FarPlaneDistance"/> property of the current <see cref="ProjectionCamera"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ProjectionCamera</typeparam>                                                                       
        /// <param name=" projectionCamera">current <see cref="ProjectionCamera"/></param>                                                          
        /// <param name="farPlaneDistance">farPlaneDistance value</param>                                                                            
        /// <returns>current projectionCamera</returns>                                                                                    
        public static TType FarPlaneDistance<TType>(this TType projectionCamera, Double farPlaneDistance) where TType : notnull, ProjectionCamera
        {
            projectionCamera.FarPlaneDistance = farPlaneDistance;
            return projectionCamera;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ProjectionCamera.Position"/> property of the current <see cref="ProjectionCamera"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ProjectionCamera</typeparam>                                                                       
        /// <param name=" projectionCamera">current <see cref="ProjectionCamera"/></param>                                                          
        /// <param name="position">position value</param>                                                                            
        /// <returns>current projectionCamera</returns>                                                                                    
        public static TType Position<TType>(this TType projectionCamera, Point3D position) where TType : notnull, ProjectionCamera
        {
            projectionCamera.Position = position;
            return projectionCamera;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ProjectionCamera.LookDirection"/> property of the current <see cref="ProjectionCamera"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ProjectionCamera</typeparam>                                                                       
        /// <param name=" projectionCamera">current <see cref="ProjectionCamera"/></param>                                                          
        /// <param name="lookDirection">lookDirection value</param>                                                                            
        /// <returns>current projectionCamera</returns>                                                                                    
        public static TType LookDirection<TType>(this TType projectionCamera, Vector3D lookDirection) where TType : notnull, ProjectionCamera
        {
            projectionCamera.LookDirection = lookDirection;
            return projectionCamera;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ProjectionCamera.UpDirection"/> property of the current <see cref="ProjectionCamera"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ProjectionCamera</typeparam>                                                                       
        /// <param name=" projectionCamera">current <see cref="ProjectionCamera"/></param>                                                          
        /// <param name="upDirection">upDirection value</param>                                                                            
        /// <returns>current projectionCamera</returns>                                                                                    
        public static TType UpDirection<TType>(this TType projectionCamera, Vector3D upDirection) where TType : notnull, ProjectionCamera
        {
            projectionCamera.UpDirection = upDirection;
            return projectionCamera;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="QuaternionRotation3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class QuaternionRotation3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="QuaternionRotation3D.Quaternion"/> property of the current <see cref="QuaternionRotation3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" quaternionRotation3D">current <see cref="QuaternionRotation3D"/></param>                                                          
        /// <param name="quaternion">quaternion value</param>                                                                            
        /// <returns>current quaternionRotation3D</returns>                                                                                    
        public static QuaternionRotation3D Quaternion(this QuaternionRotation3D quaternionRotation3D, Quaternion quaternion)
        {
            quaternionRotation3D.Quaternion = quaternion;
            return quaternionRotation3D;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="RotateTransform3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class RotateTransform3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="RotateTransform3D.CenterX"/> property of the current <see cref="RotateTransform3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" rotateTransform3D">current <see cref="RotateTransform3D"/></param>                                                          
        /// <param name="centerX">centerX value</param>                                                                            
        /// <returns>current rotateTransform3D</returns>                                                                                    
        public static RotateTransform3D CenterX(this RotateTransform3D rotateTransform3D, Double centerX)
        {
            rotateTransform3D.CenterX = centerX;
            return rotateTransform3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RotateTransform3D.CenterY"/> property of the current <see cref="RotateTransform3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" rotateTransform3D">current <see cref="RotateTransform3D"/></param>                                                          
        /// <param name="centerY">centerY value</param>                                                                            
        /// <returns>current rotateTransform3D</returns>                                                                                    
        public static RotateTransform3D CenterY(this RotateTransform3D rotateTransform3D, Double centerY)
        {
            rotateTransform3D.CenterY = centerY;
            return rotateTransform3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RotateTransform3D.CenterZ"/> property of the current <see cref="RotateTransform3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" rotateTransform3D">current <see cref="RotateTransform3D"/></param>                                                          
        /// <param name="centerZ">centerZ value</param>                                                                            
        /// <returns>current rotateTransform3D</returns>                                                                                    
        public static RotateTransform3D CenterZ(this RotateTransform3D rotateTransform3D, Double centerZ)
        {
            rotateTransform3D.CenterZ = centerZ;
            return rotateTransform3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RotateTransform3D.Rotation"/> property of the current <see cref="RotateTransform3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" rotateTransform3D">current <see cref="RotateTransform3D"/></param>                                                          
        /// <param name="rotation">rotation value</param>                                                                            
        /// <returns>current rotateTransform3D</returns>                                                                                    
        public static RotateTransform3D Rotation(this RotateTransform3D rotateTransform3D, Rotation3D rotation)
        {
            rotateTransform3D.Rotation = rotation;
            return rotateTransform3D;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ScaleTransform3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ScaleTransform3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ScaleTransform3D.ScaleX"/> property of the current <see cref="ScaleTransform3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" scaleTransform3D">current <see cref="ScaleTransform3D"/></param>                                                          
        /// <param name="scaleX">scaleX value</param>                                                                            
        /// <returns>current scaleTransform3D</returns>                                                                                    
        public static ScaleTransform3D ScaleX(this ScaleTransform3D scaleTransform3D, Double scaleX)
        {
            scaleTransform3D.ScaleX = scaleX;
            return scaleTransform3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScaleTransform3D.ScaleY"/> property of the current <see cref="ScaleTransform3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" scaleTransform3D">current <see cref="ScaleTransform3D"/></param>                                                          
        /// <param name="scaleY">scaleY value</param>                                                                            
        /// <returns>current scaleTransform3D</returns>                                                                                    
        public static ScaleTransform3D ScaleY(this ScaleTransform3D scaleTransform3D, Double scaleY)
        {
            scaleTransform3D.ScaleY = scaleY;
            return scaleTransform3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScaleTransform3D.ScaleZ"/> property of the current <see cref="ScaleTransform3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" scaleTransform3D">current <see cref="ScaleTransform3D"/></param>                                                          
        /// <param name="scaleZ">scaleZ value</param>                                                                            
        /// <returns>current scaleTransform3D</returns>                                                                                    
        public static ScaleTransform3D ScaleZ(this ScaleTransform3D scaleTransform3D, Double scaleZ)
        {
            scaleTransform3D.ScaleZ = scaleZ;
            return scaleTransform3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScaleTransform3D.CenterX"/> property of the current <see cref="ScaleTransform3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" scaleTransform3D">current <see cref="ScaleTransform3D"/></param>                                                          
        /// <param name="centerX">centerX value</param>                                                                            
        /// <returns>current scaleTransform3D</returns>                                                                                    
        public static ScaleTransform3D CenterX(this ScaleTransform3D scaleTransform3D, Double centerX)
        {
            scaleTransform3D.CenterX = centerX;
            return scaleTransform3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScaleTransform3D.CenterY"/> property of the current <see cref="ScaleTransform3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" scaleTransform3D">current <see cref="ScaleTransform3D"/></param>                                                          
        /// <param name="centerY">centerY value</param>                                                                            
        /// <returns>current scaleTransform3D</returns>                                                                                    
        public static ScaleTransform3D CenterY(this ScaleTransform3D scaleTransform3D, Double centerY)
        {
            scaleTransform3D.CenterY = centerY;
            return scaleTransform3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ScaleTransform3D.CenterZ"/> property of the current <see cref="ScaleTransform3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" scaleTransform3D">current <see cref="ScaleTransform3D"/></param>                                                          
        /// <param name="centerZ">centerZ value</param>                                                                            
        /// <returns>current scaleTransform3D</returns>                                                                                    
        public static ScaleTransform3D CenterZ(this ScaleTransform3D scaleTransform3D, Double centerZ)
        {
            scaleTransform3D.CenterZ = centerZ;
            return scaleTransform3D;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SpecularMaterial"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SpecularMaterialFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SpecularMaterial.Color"/> property of the current <see cref="SpecularMaterial"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" specularMaterial">current <see cref="SpecularMaterial"/></param>                                                          
        /// <param name="color">color value</param>                                                                            
        /// <returns>current specularMaterial</returns>                                                                                    
        public static SpecularMaterial Color(this SpecularMaterial specularMaterial, Color color)
        {
            specularMaterial.Color = color;
            return specularMaterial;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SpecularMaterial.Brush"/> property of the current <see cref="SpecularMaterial"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" specularMaterial">current <see cref="SpecularMaterial"/></param>                                                          
        /// <param name="brush">brush value</param>                                                                            
        /// <returns>current specularMaterial</returns>                                                                                    
        public static SpecularMaterial Brush(this SpecularMaterial specularMaterial, Brush brush)
        {
            specularMaterial.Brush = brush;
            return specularMaterial;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SpecularMaterial.SpecularPower"/> property of the current <see cref="SpecularMaterial"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" specularMaterial">current <see cref="SpecularMaterial"/></param>                                                          
        /// <param name="specularPower">specularPower value</param>                                                                            
        /// <returns>current specularMaterial</returns>                                                                                    
        public static SpecularMaterial SpecularPower(this SpecularMaterial specularMaterial, Double specularPower)
        {
            specularMaterial.SpecularPower = specularPower;
            return specularMaterial;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SpotLight"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SpotLightFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SpotLight.Direction"/> property of the current <see cref="SpotLight"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" spotLight">current <see cref="SpotLight"/></param>                                                          
        /// <param name="direction">direction value</param>                                                                            
        /// <returns>current spotLight</returns>                                                                                    
        public static SpotLight Direction(this SpotLight spotLight, Vector3D direction)
        {
            spotLight.Direction = direction;
            return spotLight;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SpotLight.OuterConeAngle"/> property of the current <see cref="SpotLight"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" spotLight">current <see cref="SpotLight"/></param>                                                          
        /// <param name="outerConeAngle">outerConeAngle value</param>                                                                            
        /// <returns>current spotLight</returns>                                                                                    
        public static SpotLight OuterConeAngle(this SpotLight spotLight, Double outerConeAngle)
        {
            spotLight.OuterConeAngle = outerConeAngle;
            return spotLight;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SpotLight.InnerConeAngle"/> property of the current <see cref="SpotLight"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" spotLight">current <see cref="SpotLight"/></param>                                                          
        /// <param name="innerConeAngle">innerConeAngle value</param>                                                                            
        /// <returns>current spotLight</returns>                                                                                    
        public static SpotLight InnerConeAngle(this SpotLight spotLight, Double innerConeAngle)
        {
            spotLight.InnerConeAngle = innerConeAngle;
            return spotLight;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Transform3DGroup"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Transform3DGroupFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Transform3DGroup.Children"/> property of the current <see cref="Transform3DGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" transform3DGroup">current <see cref="Transform3DGroup"/></param>                                                          
        /// <param name="children">children value</param>                                                                            
        /// <returns>current transform3DGroup</returns>                                                                                    
        public static Transform3DGroup Children(this Transform3DGroup transform3DGroup, Transform3DCollection children)
        {
            transform3DGroup.Children = children;
            return transform3DGroup;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TranslateTransform3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TranslateTransform3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TranslateTransform3D.OffsetX"/> property of the current <see cref="TranslateTransform3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" translateTransform3D">current <see cref="TranslateTransform3D"/></param>                                                          
        /// <param name="offsetX">offsetX value</param>                                                                            
        /// <returns>current translateTransform3D</returns>                                                                                    
        public static TranslateTransform3D OffsetX(this TranslateTransform3D translateTransform3D, Double offsetX)
        {
            translateTransform3D.OffsetX = offsetX;
            return translateTransform3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TranslateTransform3D.OffsetY"/> property of the current <see cref="TranslateTransform3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" translateTransform3D">current <see cref="TranslateTransform3D"/></param>                                                          
        /// <param name="offsetY">offsetY value</param>                                                                            
        /// <returns>current translateTransform3D</returns>                                                                                    
        public static TranslateTransform3D OffsetY(this TranslateTransform3D translateTransform3D, Double offsetY)
        {
            translateTransform3D.OffsetY = offsetY;
            return translateTransform3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TranslateTransform3D.OffsetZ"/> property of the current <see cref="TranslateTransform3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" translateTransform3D">current <see cref="TranslateTransform3D"/></param>                                                          
        /// <param name="offsetZ">offsetZ value</param>                                                                            
        /// <returns>current translateTransform3D</returns>                                                                                    
        public static TranslateTransform3D OffsetZ(this TranslateTransform3D translateTransform3D, Double offsetZ)
        {
            translateTransform3D.OffsetZ = offsetZ;
            return translateTransform3D;
        }
    }
    
    /// <summary>                                                                                                                    
    /// <see cref="Viewport2DVisual3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Viewport2DVisual3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Viewport2DVisual3D.Visual"/> property of the current <see cref="Viewport2DVisual3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" viewport2DVisual3D">current <see cref="Viewport2DVisual3D"/></param>                                                          
        /// <param name="visual">visual value</param>                                                                            
        /// <returns>current viewport2DVisual3D</returns>                                                                                    
        public static Viewport2DVisual3D Visual(this Viewport2DVisual3D viewport2DVisual3D, Visual visual)
        {
            viewport2DVisual3D.Visual = visual;
            return viewport2DVisual3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Viewport2DVisual3D.Geometry"/> property of the current <see cref="Viewport2DVisual3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" viewport2DVisual3D">current <see cref="Viewport2DVisual3D"/></param>                                                          
        /// <param name="geometry">geometry value</param>                                                                            
        /// <returns>current viewport2DVisual3D</returns>                                                                                    
        public static Viewport2DVisual3D Geometry(this Viewport2DVisual3D viewport2DVisual3D, Geometry3D geometry)
        {
            viewport2DVisual3D.Geometry = geometry;
            return viewport2DVisual3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Viewport2DVisual3D.Material"/> property of the current <see cref="Viewport2DVisual3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" viewport2DVisual3D">current <see cref="Viewport2DVisual3D"/></param>                                                          
        /// <param name="material">material value</param>                                                                            
        /// <returns>current viewport2DVisual3D</returns>                                                                                    
        public static Viewport2DVisual3D Material(this Viewport2DVisual3D viewport2DVisual3D, Material material)
        {
            viewport2DVisual3D.Material = material;
            return viewport2DVisual3D;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Viewport2DVisual3D.CacheMode"/> property of the current <see cref="Viewport2DVisual3D"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" viewport2DVisual3D">current <see cref="Viewport2DVisual3D"/></param>                                                          
        /// <param name="cacheMode">cacheMode value</param>                                                                            
        /// <returns>current viewport2DVisual3D</returns>                                                                                    
        public static Viewport2DVisual3D CacheMode(this Viewport2DVisual3D viewport2DVisual3D, CacheMode cacheMode)
        {
            viewport2DVisual3D.CacheMode = cacheMode;
            return viewport2DVisual3D;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Viewport3DVisual"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Viewport3DVisualFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Viewport3DVisual.Clip"/> property of the current <see cref="Viewport3DVisual"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" viewport3DVisual">current <see cref="Viewport3DVisual"/></param>                                                          
        /// <param name="clip">clip value</param>                                                                            
        /// <returns>current viewport3DVisual</returns>                                                                                    
        public static Viewport3DVisual Clip(this Viewport3DVisual viewport3DVisual, Geometry clip)
        {
            viewport3DVisual.Clip = clip;
            return viewport3DVisual;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Viewport3DVisual.Opacity"/> property of the current <see cref="Viewport3DVisual"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" viewport3DVisual">current <see cref="Viewport3DVisual"/></param>                                                          
        /// <param name="opacity">opacity value</param>                                                                            
        /// <returns>current viewport3DVisual</returns>                                                                                    
        public static Viewport3DVisual Opacity(this Viewport3DVisual viewport3DVisual, Double opacity)
        {
            viewport3DVisual.Opacity = opacity;
            return viewport3DVisual;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Viewport3DVisual.OpacityMask"/> property of the current <see cref="Viewport3DVisual"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" viewport3DVisual">current <see cref="Viewport3DVisual"/></param>                                                          
        /// <param name="opacityMask">opacityMask value</param>                                                                            
        /// <returns>current viewport3DVisual</returns>                                                                                    
        public static Viewport3DVisual OpacityMask(this Viewport3DVisual viewport3DVisual, Brush opacityMask)
        {
            viewport3DVisual.OpacityMask = opacityMask;
            return viewport3DVisual;
        }


        /// <summary>                                                                                                                
        /// Set the <see cref="Viewport3DVisual.Transform"/> property of the current <see cref="Viewport3DVisual"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" viewport3DVisual">current <see cref="Viewport3DVisual"/></param>                                                          
        /// <param name="transform">transform value</param>                                                                            
        /// <returns>current viewport3DVisual</returns>                                                                                    
        public static Viewport3DVisual Transform(this Viewport3DVisual viewport3DVisual, Transform transform)
        {
            viewport3DVisual.Transform = transform;
            return viewport3DVisual;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Viewport3DVisual.Offset"/> property of the current <see cref="Viewport3DVisual"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" viewport3DVisual">current <see cref="Viewport3DVisual"/></param>                                                          
        /// <param name="offset">offset value</param>                                                                            
        /// <returns>current viewport3DVisual</returns>                                                                                    
        public static Viewport3DVisual Offset(this Viewport3DVisual viewport3DVisual, Vector offset)
        {
            viewport3DVisual.Offset = offset;
            return viewport3DVisual;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Viewport3DVisual.Camera"/> property of the current <see cref="Viewport3DVisual"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" viewport3DVisual">current <see cref="Viewport3DVisual"/></param>                                                          
        /// <param name="camera">camera value</param>                                                                            
        /// <returns>current viewport3DVisual</returns>                                                                                    
        public static Viewport3DVisual Camera(this Viewport3DVisual viewport3DVisual, Camera camera)
        {
            viewport3DVisual.Camera = camera;
            return viewport3DVisual;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Viewport3DVisual.Viewport"/> property of the current <see cref="Viewport3DVisual"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" viewport3DVisual">current <see cref="Viewport3DVisual"/></param>                                                          
        /// <param name="viewport">viewport value</param>                                                                            
        /// <returns>current viewport3DVisual</returns>                                                                                    
        public static Viewport3DVisual Viewport(this Viewport3DVisual viewport3DVisual, Rect viewport)
        {
            viewport3DVisual.Viewport = viewport;
            return viewport3DVisual;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Visual3D"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Visual3DFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Visual3D.Transform"/> property of the current <see cref="Visual3D"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Visual3D</typeparam>                                                                       
        /// <param name=" visual3D">current <see cref="Visual3D"/></param>                                                          
        /// <param name="transform">transform value</param>                                                                            
        /// <returns>current visual3D</returns>                                                                                    
        public static TType Transform<TType>(this TType visual3D, Transform3D transform) where TType : notnull, Visual3D
        {
            visual3D.Transform = transform;
            return visual3D;
        }
    }
    
    /// <summary>                                                                                                                    
    /// <see cref="BackEase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BackEaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BackEase.Amplitude"/> property of the current <see cref="BackEase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BackEase</typeparam>                                                                       
        /// <param name=" backEase">current <see cref="BackEase"/></param>                                                          
        /// <param name="amplitude">amplitude value</param>                                                                            
        /// <returns>current backEase</returns>                                                                                    
        public static TType Amplitude<TType>(this TType backEase, Double amplitude) where TType : notnull, BackEase
        {
            backEase.Amplitude = amplitude;
            return backEase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BounceEase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BounceEaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BounceEase.Bounces"/> property of the current <see cref="BounceEase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BounceEase</typeparam>                                                                       
        /// <param name=" bounceEase">current <see cref="BounceEase"/></param>                                                          
        /// <param name="bounces">bounces value</param>                                                                            
        /// <returns>current bounceEase</returns>                                                                                    
        public static TType Bounces<TType>(this TType bounceEase, Int32 bounces) where TType : notnull, BounceEase
        {
            bounceEase.Bounces = bounces;
            return bounceEase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BounceEase.Bounciness"/> property of the current <see cref="BounceEase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BounceEase</typeparam>                                                                       
        /// <param name=" bounceEase">current <see cref="BounceEase"/></param>                                                          
        /// <param name="bounciness">bounciness value</param>                                                                            
        /// <returns>current bounceEase</returns>                                                                                    
        public static TType Bounciness<TType>(this TType bounceEase, Double bounciness) where TType : notnull, BounceEase
        {
            bounceEase.Bounciness = bounciness;
            return bounceEase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DoubleAnimationUsingPath"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DoubleAnimationUsingPathFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleAnimationUsingPath.PathGeometry"/> property of the current <see cref="DoubleAnimationUsingPath"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleAnimationUsingPath</typeparam>                                                                       
        /// <param name=" doubleAnimationUsingPath">current <see cref="DoubleAnimationUsingPath"/></param>                                                          
        /// <param name="pathGeometry">pathGeometry value</param>                                                                            
        /// <returns>current doubleAnimationUsingPath</returns>                                                                                    
        public static TType PathGeometry<TType>(this TType doubleAnimationUsingPath, PathGeometry pathGeometry) where TType : notnull, DoubleAnimationUsingPath
        {
            doubleAnimationUsingPath.PathGeometry = pathGeometry;
            return doubleAnimationUsingPath;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleAnimationUsingPath.Source"/> property of the current <see cref="DoubleAnimationUsingPath"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleAnimationUsingPath</typeparam>                                                                       
        /// <param name=" doubleAnimationUsingPath">current <see cref="DoubleAnimationUsingPath"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current doubleAnimationUsingPath</returns>                                                                                    
        public static TType Source<TType>(this TType doubleAnimationUsingPath, PathAnimationSource source) where TType : notnull, DoubleAnimationUsingPath
        {
            doubleAnimationUsingPath.Source = source;
            return doubleAnimationUsingPath;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleAnimationUsingPath.IsAdditive"/> property of the current <see cref="DoubleAnimationUsingPath"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleAnimationUsingPath</typeparam>                                                                       
        /// <param name=" doubleAnimationUsingPath">current <see cref="DoubleAnimationUsingPath"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current doubleAnimationUsingPath</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType doubleAnimationUsingPath, Boolean isAdditive) where TType : notnull, DoubleAnimationUsingPath
        {
            doubleAnimationUsingPath.IsAdditive = isAdditive;
            return doubleAnimationUsingPath;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleAnimationUsingPath.IsCumulative"/> property of the current <see cref="DoubleAnimationUsingPath"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleAnimationUsingPath</typeparam>                                                                       
        /// <param name=" doubleAnimationUsingPath">current <see cref="DoubleAnimationUsingPath"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current doubleAnimationUsingPath</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType doubleAnimationUsingPath, Boolean isCumulative) where TType : notnull, DoubleAnimationUsingPath
        {
            doubleAnimationUsingPath.IsCumulative = isCumulative;
            return doubleAnimationUsingPath;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingFunctionBase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingFunctionBaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingFunctionBase.EasingMode"/> property of the current <see cref="EasingFunctionBase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingFunctionBase</typeparam>                                                                       
        /// <param name=" easingFunctionBase">current <see cref="EasingFunctionBase"/></param>                                                          
        /// <param name="easingMode">easingMode value</param>                                                                            
        /// <returns>current easingFunctionBase</returns>                                                                                    
        public static TType EasingMode<TType>(this TType easingFunctionBase, EasingMode easingMode) where TType : notnull, EasingFunctionBase
        {
            easingFunctionBase.EasingMode = easingMode;
            return easingFunctionBase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingQuaternionKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingQuaternionKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingQuaternionKeyFrame.UseShortestPath"/> property of the current <see cref="EasingQuaternionKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingQuaternionKeyFrame</typeparam>                                                                       
        /// <param name=" easingQuaternionKeyFrame">current <see cref="EasingQuaternionKeyFrame"/></param>                                                          
        /// <param name="useShortestPath">useShortestPath value</param>                                                                            
        /// <returns>current easingQuaternionKeyFrame</returns>                                                                                    
        public static TType UseShortestPath<TType>(this TType easingQuaternionKeyFrame, Boolean useShortestPath) where TType : notnull, EasingQuaternionKeyFrame
        {
            easingQuaternionKeyFrame.UseShortestPath = useShortestPath;
            return easingQuaternionKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingQuaternionKeyFrame.EasingFunction"/> property of the current <see cref="EasingQuaternionKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingQuaternionKeyFrame</typeparam>                                                                       
        /// <param name=" easingQuaternionKeyFrame">current <see cref="EasingQuaternionKeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingQuaternionKeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingQuaternionKeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingQuaternionKeyFrame
        {
            easingQuaternionKeyFrame.EasingFunction = easingFunction;
            return easingQuaternionKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ElasticEase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ElasticEaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ElasticEase.Oscillations"/> property of the current <see cref="ElasticEase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ElasticEase</typeparam>                                                                       
        /// <param name=" elasticEase">current <see cref="ElasticEase"/></param>                                                          
        /// <param name="oscillations">oscillations value</param>                                                                            
        /// <returns>current elasticEase</returns>                                                                                    
        public static TType Oscillations<TType>(this TType elasticEase, Int32 oscillations) where TType : notnull, ElasticEase
        {
            elasticEase.Oscillations = oscillations;
            return elasticEase;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ElasticEase.Springiness"/> property of the current <see cref="ElasticEase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ElasticEase</typeparam>                                                                       
        /// <param name=" elasticEase">current <see cref="ElasticEase"/></param>                                                          
        /// <param name="springiness">springiness value</param>                                                                            
        /// <returns>current elasticEase</returns>                                                                                    
        public static TType Springiness<TType>(this TType elasticEase, Double springiness) where TType : notnull, ElasticEase
        {
            elasticEase.Springiness = springiness;
            return elasticEase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ExponentialEase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ExponentialEaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ExponentialEase.Exponent"/> property of the current <see cref="ExponentialEase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ExponentialEase</typeparam>                                                                       
        /// <param name=" exponentialEase">current <see cref="ExponentialEase"/></param>                                                          
        /// <param name="exponent">exponent value</param>                                                                            
        /// <returns>current exponentialEase</returns>                                                                                    
        public static TType Exponent<TType>(this TType exponentialEase, Double exponent) where TType : notnull, ExponentialEase
        {
            exponentialEase.Exponent = exponent;
            return exponentialEase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="KeySpline"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class KeySplineFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="KeySpline.ControlPoint1"/> property of the current <see cref="KeySpline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">KeySpline</typeparam>                                                                       
        /// <param name=" keySpline">current <see cref="KeySpline"/></param>                                                          
        /// <param name="controlPoint1">controlPoint1 value</param>                                                                            
        /// <returns>current keySpline</returns>                                                                                    
        public static TType ControlPoint1<TType>(this TType keySpline, Point controlPoint1) where TType : notnull, KeySpline
        {
            keySpline.ControlPoint1 = controlPoint1;
            return keySpline;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="KeySpline.ControlPoint2"/> property of the current <see cref="KeySpline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">KeySpline</typeparam>                                                                       
        /// <param name=" keySpline">current <see cref="KeySpline"/></param>                                                          
        /// <param name="controlPoint2">controlPoint2 value</param>                                                                            
        /// <returns>current keySpline</returns>                                                                                    
        public static TType ControlPoint2<TType>(this TType keySpline, Point controlPoint2) where TType : notnull, KeySpline
        {
            keySpline.ControlPoint2 = controlPoint2;
            return keySpline;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="LinearQuaternionKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class LinearQuaternionKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="LinearQuaternionKeyFrame.UseShortestPath"/> property of the current <see cref="LinearQuaternionKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">LinearQuaternionKeyFrame</typeparam>                                                                       
        /// <param name=" linearQuaternionKeyFrame">current <see cref="LinearQuaternionKeyFrame"/></param>                                                          
        /// <param name="useShortestPath">useShortestPath value</param>                                                                            
        /// <returns>current linearQuaternionKeyFrame</returns>                                                                                    
        public static TType UseShortestPath<TType>(this TType linearQuaternionKeyFrame, Boolean useShortestPath) where TType : notnull, LinearQuaternionKeyFrame
        {
            linearQuaternionKeyFrame.UseShortestPath = useShortestPath;
            return linearQuaternionKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="MatrixAnimationUsingPath"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MatrixAnimationUsingPathFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="MatrixAnimationUsingPath.DoesRotateWithTangent"/> property of the current <see cref="MatrixAnimationUsingPath"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MatrixAnimationUsingPath</typeparam>                                                                       
        /// <param name=" matrixAnimationUsingPath">current <see cref="MatrixAnimationUsingPath"/></param>                                                          
        /// <param name="doesRotateWithTangent">doesRotateWithTangent value</param>                                                                            
        /// <returns>current matrixAnimationUsingPath</returns>                                                                                    
        public static TType DoesRotateWithTangent<TType>(this TType matrixAnimationUsingPath, Boolean doesRotateWithTangent) where TType : notnull, MatrixAnimationUsingPath
        {
            matrixAnimationUsingPath.DoesRotateWithTangent = doesRotateWithTangent;
            return matrixAnimationUsingPath;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MatrixAnimationUsingPath.IsAdditive"/> property of the current <see cref="MatrixAnimationUsingPath"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MatrixAnimationUsingPath</typeparam>                                                                       
        /// <param name=" matrixAnimationUsingPath">current <see cref="MatrixAnimationUsingPath"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current matrixAnimationUsingPath</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType matrixAnimationUsingPath, Boolean isAdditive) where TType : notnull, MatrixAnimationUsingPath
        {
            matrixAnimationUsingPath.IsAdditive = isAdditive;
            return matrixAnimationUsingPath;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MatrixAnimationUsingPath.IsAngleCumulative"/> property of the current <see cref="MatrixAnimationUsingPath"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MatrixAnimationUsingPath</typeparam>                                                                       
        /// <param name=" matrixAnimationUsingPath">current <see cref="MatrixAnimationUsingPath"/></param>                                                          
        /// <param name="isAngleCumulative">isAngleCumulative value</param>                                                                            
        /// <returns>current matrixAnimationUsingPath</returns>                                                                                    
        public static TType IsAngleCumulative<TType>(this TType matrixAnimationUsingPath, Boolean isAngleCumulative) where TType : notnull, MatrixAnimationUsingPath
        {
            matrixAnimationUsingPath.IsAngleCumulative = isAngleCumulative;
            return matrixAnimationUsingPath;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MatrixAnimationUsingPath.IsOffsetCumulative"/> property of the current <see cref="MatrixAnimationUsingPath"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MatrixAnimationUsingPath</typeparam>                                                                       
        /// <param name=" matrixAnimationUsingPath">current <see cref="MatrixAnimationUsingPath"/></param>                                                          
        /// <param name="isOffsetCumulative">isOffsetCumulative value</param>                                                                            
        /// <returns>current matrixAnimationUsingPath</returns>                                                                                    
        public static TType IsOffsetCumulative<TType>(this TType matrixAnimationUsingPath, Boolean isOffsetCumulative) where TType : notnull, MatrixAnimationUsingPath
        {
            matrixAnimationUsingPath.IsOffsetCumulative = isOffsetCumulative;
            return matrixAnimationUsingPath;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MatrixAnimationUsingPath.PathGeometry"/> property of the current <see cref="MatrixAnimationUsingPath"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MatrixAnimationUsingPath</typeparam>                                                                       
        /// <param name=" matrixAnimationUsingPath">current <see cref="MatrixAnimationUsingPath"/></param>                                                          
        /// <param name="pathGeometry">pathGeometry value</param>                                                                            
        /// <returns>current matrixAnimationUsingPath</returns>                                                                                    
        public static TType PathGeometry<TType>(this TType matrixAnimationUsingPath, PathGeometry pathGeometry) where TType : notnull, MatrixAnimationUsingPath
        {
            matrixAnimationUsingPath.PathGeometry = pathGeometry;
            return matrixAnimationUsingPath;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ParallelTimeline"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ParallelTimelineFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ParallelTimeline.SlipBehavior"/> property of the current <see cref="ParallelTimeline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ParallelTimeline</typeparam>                                                                       
        /// <param name=" parallelTimeline">current <see cref="ParallelTimeline"/></param>                                                          
        /// <param name="slipBehavior">slipBehavior value</param>                                                                            
        /// <returns>current parallelTimeline</returns>                                                                                    
        public static TType SlipBehavior<TType>(this TType parallelTimeline, SlipBehavior slipBehavior) where TType : notnull, ParallelTimeline
        {
            parallelTimeline.SlipBehavior = slipBehavior;
            return parallelTimeline;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="PointAnimationUsingPath"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PointAnimationUsingPathFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PointAnimationUsingPath.PathGeometry"/> property of the current <see cref="PointAnimationUsingPath"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointAnimationUsingPath</typeparam>                                                                       
        /// <param name=" pointAnimationUsingPath">current <see cref="PointAnimationUsingPath"/></param>                                                          
        /// <param name="pathGeometry">pathGeometry value</param>                                                                            
        /// <returns>current pointAnimationUsingPath</returns>                                                                                    
        public static TType PathGeometry<TType>(this TType pointAnimationUsingPath, PathGeometry pathGeometry) where TType : notnull, PointAnimationUsingPath
        {
            pointAnimationUsingPath.PathGeometry = pathGeometry;
            return pointAnimationUsingPath;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PointAnimationUsingPath.IsAdditive"/> property of the current <see cref="PointAnimationUsingPath"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointAnimationUsingPath</typeparam>                                                                       
        /// <param name=" pointAnimationUsingPath">current <see cref="PointAnimationUsingPath"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current pointAnimationUsingPath</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType pointAnimationUsingPath, Boolean isAdditive) where TType : notnull, PointAnimationUsingPath
        {
            pointAnimationUsingPath.IsAdditive = isAdditive;
            return pointAnimationUsingPath;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PointAnimationUsingPath.IsCumulative"/> property of the current <see cref="PointAnimationUsingPath"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointAnimationUsingPath</typeparam>                                                                       
        /// <param name=" pointAnimationUsingPath">current <see cref="PointAnimationUsingPath"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current pointAnimationUsingPath</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType pointAnimationUsingPath, Boolean isCumulative) where TType : notnull, PointAnimationUsingPath
        {
            pointAnimationUsingPath.IsCumulative = isCumulative;
            return pointAnimationUsingPath;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="PowerEase"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PowerEaseFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PowerEase.Power"/> property of the current <see cref="PowerEase"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PowerEase</typeparam>                                                                       
        /// <param name=" powerEase">current <see cref="PowerEase"/></param>                                                          
        /// <param name="power">power value</param>                                                                            
        /// <returns>current powerEase</returns>                                                                                    
        public static TType Power<TType>(this TType powerEase, Double power) where TType : notnull, PowerEase
        {
            powerEase.Power = power;
            return powerEase;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="QuaternionAnimation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class QuaternionAnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="QuaternionAnimation.UseShortestPath"/> property of the current <see cref="QuaternionAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">QuaternionAnimation</typeparam>                                                                       
        /// <param name=" quaternionAnimation">current <see cref="QuaternionAnimation"/></param>                                                          
        /// <param name="useShortestPath">useShortestPath value</param>                                                                            
        /// <returns>current quaternionAnimation</returns>                                                                                    
        public static TType UseShortestPath<TType>(this TType quaternionAnimation, Boolean useShortestPath) where TType : notnull, QuaternionAnimation
        {
            quaternionAnimation.UseShortestPath = useShortestPath;
            return quaternionAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="QuaternionAnimation.From"/> property of the current <see cref="QuaternionAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">QuaternionAnimation</typeparam>                                                                       
        /// <param name=" quaternionAnimation">current <see cref="QuaternionAnimation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current quaternionAnimation</returns>                                                                                    
        public static TType From<TType>(this TType quaternionAnimation, Nullable<Quaternion> from) where TType : notnull, QuaternionAnimation
        {
            quaternionAnimation.From = from;
            return quaternionAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="QuaternionAnimation.To"/> property of the current <see cref="QuaternionAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">QuaternionAnimation</typeparam>                                                                       
        /// <param name=" quaternionAnimation">current <see cref="QuaternionAnimation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current quaternionAnimation</returns>                                                                                    
        public static TType To<TType>(this TType quaternionAnimation, Nullable<Quaternion> to) where TType : notnull, QuaternionAnimation
        {
            quaternionAnimation.To = to;
            return quaternionAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="QuaternionAnimation.By"/> property of the current <see cref="QuaternionAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">QuaternionAnimation</typeparam>                                                                       
        /// <param name=" quaternionAnimation">current <see cref="QuaternionAnimation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current quaternionAnimation</returns>                                                                                    
        public static TType By<TType>(this TType quaternionAnimation, Nullable<Quaternion> by) where TType : notnull, QuaternionAnimation
        {
            quaternionAnimation.By = by;
            return quaternionAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="QuaternionAnimation.EasingFunction"/> property of the current <see cref="QuaternionAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">QuaternionAnimation</typeparam>                                                                       
        /// <param name=" quaternionAnimation">current <see cref="QuaternionAnimation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current quaternionAnimation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType quaternionAnimation, IEasingFunction easingFunction) where TType : notnull, QuaternionAnimation
        {
            quaternionAnimation.EasingFunction = easingFunction;
            return quaternionAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="QuaternionAnimation.IsAdditive"/> property of the current <see cref="QuaternionAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">QuaternionAnimation</typeparam>                                                                       
        /// <param name=" quaternionAnimation">current <see cref="QuaternionAnimation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current quaternionAnimation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType quaternionAnimation, Boolean isAdditive) where TType : notnull, QuaternionAnimation
        {
            quaternionAnimation.IsAdditive = isAdditive;
            return quaternionAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="QuaternionAnimation.IsCumulative"/> property of the current <see cref="QuaternionAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">QuaternionAnimation</typeparam>                                                                       
        /// <param name=" quaternionAnimation">current <see cref="QuaternionAnimation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current quaternionAnimation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType quaternionAnimation, Boolean isCumulative) where TType : notnull, QuaternionAnimation
        {
            quaternionAnimation.IsCumulative = isCumulative;
            return quaternionAnimation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplineQuaternionKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineQuaternionKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineQuaternionKeyFrame.UseShortestPath"/> property of the current <see cref="SplineQuaternionKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineQuaternionKeyFrame</typeparam>                                                                       
        /// <param name=" splineQuaternionKeyFrame">current <see cref="SplineQuaternionKeyFrame"/></param>                                                          
        /// <param name="useShortestPath">useShortestPath value</param>                                                                            
        /// <returns>current splineQuaternionKeyFrame</returns>                                                                                    
        public static TType UseShortestPath<TType>(this TType splineQuaternionKeyFrame, Boolean useShortestPath) where TType : notnull, SplineQuaternionKeyFrame
        {
            splineQuaternionKeyFrame.UseShortestPath = useShortestPath;
            return splineQuaternionKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineQuaternionKeyFrame.KeySpline"/> property of the current <see cref="SplineQuaternionKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineQuaternionKeyFrame</typeparam>                                                                       
        /// <param name=" splineQuaternionKeyFrame">current <see cref="SplineQuaternionKeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineQuaternionKeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineQuaternionKeyFrame, KeySpline keySpline) where TType : notnull, SplineQuaternionKeyFrame
        {
            splineQuaternionKeyFrame.KeySpline = keySpline;
            return splineQuaternionKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Timeline"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TimelineFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Timeline.AccelerationRatio"/> property of the current <see cref="Timeline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Timeline</typeparam>                                                                       
        /// <param name=" timeline">current <see cref="Timeline"/></param>                                                          
        /// <param name="accelerationRatio">accelerationRatio value</param>                                                                            
        /// <returns>current timeline</returns>                                                                                    
        public static TType AccelerationRatio<TType>(this TType timeline, Double accelerationRatio) where TType : notnull, Timeline
        {
            timeline.AccelerationRatio = accelerationRatio;
            return timeline;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Timeline.AutoReverse"/> property of the current <see cref="Timeline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Timeline</typeparam>                                                                       
        /// <param name=" timeline">current <see cref="Timeline"/></param>                                                          
        /// <param name="autoReverse">autoReverse value</param>                                                                            
        /// <returns>current timeline</returns>                                                                                    
        public static TType AutoReverse<TType>(this TType timeline, Boolean autoReverse) where TType : notnull, Timeline
        {
            timeline.AutoReverse = autoReverse;
            return timeline;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Timeline.BeginTime"/> property of the current <see cref="Timeline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Timeline</typeparam>                                                                       
        /// <param name=" timeline">current <see cref="Timeline"/></param>                                                          
        /// <param name="beginTime">beginTime value</param>                                                                            
        /// <returns>current timeline</returns>                                                                                    
        public static TType BeginTime<TType>(this TType timeline, Nullable<TimeSpan> beginTime) where TType : notnull, Timeline
        {
            timeline.BeginTime = beginTime;
            return timeline;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Timeline.DecelerationRatio"/> property of the current <see cref="Timeline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Timeline</typeparam>                                                                       
        /// <param name=" timeline">current <see cref="Timeline"/></param>                                                          
        /// <param name="decelerationRatio">decelerationRatio value</param>                                                                            
        /// <returns>current timeline</returns>                                                                                    
        public static TType DecelerationRatio<TType>(this TType timeline, Double decelerationRatio) where TType : notnull, Timeline
        {
            timeline.DecelerationRatio = decelerationRatio;
            return timeline;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Timeline.Duration"/> property of the current <see cref="Timeline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Timeline</typeparam>                                                                       
        /// <param name=" timeline">current <see cref="Timeline"/></param>                                                          
        /// <param name="duration">duration value</param>                                                                            
        /// <returns>current timeline</returns>                                                                                    
        public static TType Duration<TType>(this TType timeline, Duration duration) where TType : notnull, Timeline
        {
            timeline.Duration = duration;
            return timeline;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Timeline.FillBehavior"/> property of the current <see cref="Timeline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Timeline</typeparam>                                                                       
        /// <param name=" timeline">current <see cref="Timeline"/></param>                                                          
        /// <param name="fillBehavior">fillBehavior value</param>                                                                            
        /// <returns>current timeline</returns>                                                                                    
        public static TType FillBehavior<TType>(this TType timeline, FillBehavior fillBehavior) where TType : notnull, Timeline
        {
            timeline.FillBehavior = fillBehavior;
            return timeline;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Timeline.Name"/> property of the current <see cref="Timeline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Timeline</typeparam>                                                                       
        /// <param name=" timeline">current <see cref="Timeline"/></param>                                                          
        /// <param name="name">name value</param>                                                                            
        /// <returns>current timeline</returns>                                                                                    
        public static TType Name<TType>(this TType timeline, String name) where TType : notnull, Timeline
        {
            timeline.Name = name;
            return timeline;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Timeline.RepeatBehavior"/> property of the current <see cref="Timeline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Timeline</typeparam>                                                                       
        /// <param name=" timeline">current <see cref="Timeline"/></param>                                                          
        /// <param name="repeatBehavior">repeatBehavior value</param>                                                                            
        /// <returns>current timeline</returns>                                                                                    
        public static TType RepeatBehavior<TType>(this TType timeline, RepeatBehavior repeatBehavior) where TType : notnull, Timeline
        {
            timeline.RepeatBehavior = repeatBehavior;
            return timeline;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Timeline.SpeedRatio"/> property of the current <see cref="Timeline"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Timeline</typeparam>                                                                       
        /// <param name=" timeline">current <see cref="Timeline"/></param>                                                          
        /// <param name="speedRatio">speedRatio value</param>                                                                            
        /// <returns>current timeline</returns>                                                                                    
        public static TType SpeedRatio<TType>(this TType timeline, Double speedRatio) where TType : notnull, Timeline
        {
            timeline.SpeedRatio = speedRatio;
            return timeline;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TimelineGroup"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TimelineGroupFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TimelineGroup.Children"/> property of the current <see cref="TimelineGroup"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">TimelineGroup</typeparam>                                                                       
        /// <param name=" timelineGroup">current <see cref="TimelineGroup"/></param>                                                          
        /// <param name="children">children value</param>                                                                            
        /// <returns>current timelineGroup</returns>                                                                                    
        public static TType Children<TType>(this TType timelineGroup, TimelineCollection children) where TType : notnull, TimelineGroup
        {
            timelineGroup.Children = children;
            return timelineGroup;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BooleanAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BooleanAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BooleanAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="BooleanAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BooleanAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" booleanAnimationUsingKeyFrames">current <see cref="BooleanAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current booleanAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType booleanAnimationUsingKeyFrames, BooleanKeyFrameCollection keyFrames) where TType : notnull, BooleanAnimationUsingKeyFrames
        {
            booleanAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return booleanAnimationUsingKeyFrames;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="ByteAnimation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ByteAnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ByteAnimation.From"/> property of the current <see cref="ByteAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ByteAnimation</typeparam>                                                                       
        /// <param name=" byteAnimation">current <see cref="ByteAnimation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current byteAnimation</returns>                                                                                    
        public static TType From<TType>(this TType byteAnimation, Nullable<Byte> from) where TType : notnull, ByteAnimation
        {
            byteAnimation.From = from;
            return byteAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ByteAnimation.To"/> property of the current <see cref="ByteAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ByteAnimation</typeparam>                                                                       
        /// <param name=" byteAnimation">current <see cref="ByteAnimation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current byteAnimation</returns>                                                                                    
        public static TType To<TType>(this TType byteAnimation, Nullable<Byte> to) where TType : notnull, ByteAnimation
        {
            byteAnimation.To = to;
            return byteAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ByteAnimation.By"/> property of the current <see cref="ByteAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ByteAnimation</typeparam>                                                                       
        /// <param name=" byteAnimation">current <see cref="ByteAnimation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current byteAnimation</returns>                                                                                    
        public static TType By<TType>(this TType byteAnimation, Nullable<Byte> by) where TType : notnull, ByteAnimation
        {
            byteAnimation.By = by;
            return byteAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ByteAnimation.EasingFunction"/> property of the current <see cref="ByteAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ByteAnimation</typeparam>                                                                       
        /// <param name=" byteAnimation">current <see cref="ByteAnimation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current byteAnimation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType byteAnimation, IEasingFunction easingFunction) where TType : notnull, ByteAnimation
        {
            byteAnimation.EasingFunction = easingFunction;
            return byteAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ByteAnimation.IsAdditive"/> property of the current <see cref="ByteAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ByteAnimation</typeparam>                                                                       
        /// <param name=" byteAnimation">current <see cref="ByteAnimation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current byteAnimation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType byteAnimation, Boolean isAdditive) where TType : notnull, ByteAnimation
        {
            byteAnimation.IsAdditive = isAdditive;
            return byteAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ByteAnimation.IsCumulative"/> property of the current <see cref="ByteAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ByteAnimation</typeparam>                                                                       
        /// <param name=" byteAnimation">current <see cref="ByteAnimation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current byteAnimation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType byteAnimation, Boolean isCumulative) where TType : notnull, ByteAnimation
        {
            byteAnimation.IsCumulative = isCumulative;
            return byteAnimation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ByteAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ByteAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ByteAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="ByteAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ByteAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" byteAnimationUsingKeyFrames">current <see cref="ByteAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current byteAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType byteAnimationUsingKeyFrames, ByteKeyFrameCollection keyFrames) where TType : notnull, ByteAnimationUsingKeyFrames
        {
            byteAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return byteAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ByteAnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="ByteAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ByteAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" byteAnimationUsingKeyFrames">current <see cref="ByteAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current byteAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType byteAnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, ByteAnimationUsingKeyFrames
        {
            byteAnimationUsingKeyFrames.IsAdditive = isAdditive;
            return byteAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ByteAnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="ByteAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ByteAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" byteAnimationUsingKeyFrames">current <see cref="ByteAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current byteAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType byteAnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, ByteAnimationUsingKeyFrames
        {
            byteAnimationUsingKeyFrames.IsCumulative = isCumulative;
            return byteAnimationUsingKeyFrames;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="CharAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class CharAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="CharAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="CharAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">CharAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" charAnimationUsingKeyFrames">current <see cref="CharAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current charAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType charAnimationUsingKeyFrames, CharKeyFrameCollection keyFrames) where TType : notnull, CharAnimationUsingKeyFrames
        {
            charAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return charAnimationUsingKeyFrames;
        }
    }
  
    /// <summary>                                                                                                                    
    /// <see cref="ColorAnimation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ColorAnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorAnimation.From"/> property of the current <see cref="ColorAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ColorAnimation</typeparam>                                                                       
        /// <param name=" colorAnimation">current <see cref="ColorAnimation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current colorAnimation</returns>                                                                                    
        public static TType From<TType>(this TType colorAnimation, Nullable<Color> from) where TType : notnull, ColorAnimation
        {
            colorAnimation.From = from;
            return colorAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorAnimation.To"/> property of the current <see cref="ColorAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ColorAnimation</typeparam>                                                                       
        /// <param name=" colorAnimation">current <see cref="ColorAnimation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current colorAnimation</returns>                                                                                    
        public static TType To<TType>(this TType colorAnimation, Nullable<Color> to) where TType : notnull, ColorAnimation
        {
            colorAnimation.To = to;
            return colorAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorAnimation.By"/> property of the current <see cref="ColorAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ColorAnimation</typeparam>                                                                       
        /// <param name=" colorAnimation">current <see cref="ColorAnimation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current colorAnimation</returns>                                                                                    
        public static TType By<TType>(this TType colorAnimation, Nullable<Color> by) where TType : notnull, ColorAnimation
        {
            colorAnimation.By = by;
            return colorAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorAnimation.EasingFunction"/> property of the current <see cref="ColorAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ColorAnimation</typeparam>                                                                       
        /// <param name=" colorAnimation">current <see cref="ColorAnimation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current colorAnimation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType colorAnimation, IEasingFunction easingFunction) where TType : notnull, ColorAnimation
        {
            colorAnimation.EasingFunction = easingFunction;
            return colorAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorAnimation.IsAdditive"/> property of the current <see cref="ColorAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ColorAnimation</typeparam>                                                                       
        /// <param name=" colorAnimation">current <see cref="ColorAnimation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current colorAnimation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType colorAnimation, Boolean isAdditive) where TType : notnull, ColorAnimation
        {
            colorAnimation.IsAdditive = isAdditive;
            return colorAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorAnimation.IsCumulative"/> property of the current <see cref="ColorAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ColorAnimation</typeparam>                                                                       
        /// <param name=" colorAnimation">current <see cref="ColorAnimation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current colorAnimation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType colorAnimation, Boolean isCumulative) where TType : notnull, ColorAnimation
        {
            colorAnimation.IsCumulative = isCumulative;
            return colorAnimation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ColorAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ColorAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="ColorAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ColorAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" colorAnimationUsingKeyFrames">current <see cref="ColorAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current colorAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType colorAnimationUsingKeyFrames, ColorKeyFrameCollection keyFrames) where TType : notnull, ColorAnimationUsingKeyFrames
        {
            colorAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return colorAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorAnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="ColorAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ColorAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" colorAnimationUsingKeyFrames">current <see cref="ColorAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current colorAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType colorAnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, ColorAnimationUsingKeyFrames
        {
            colorAnimationUsingKeyFrames.IsAdditive = isAdditive;
            return colorAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorAnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="ColorAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ColorAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" colorAnimationUsingKeyFrames">current <see cref="ColorAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current colorAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType colorAnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, ColorAnimationUsingKeyFrames
        {
            colorAnimationUsingKeyFrames.IsCumulative = isCumulative;
            return colorAnimationUsingKeyFrames;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="DecimalAnimation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DecimalAnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DecimalAnimation.From"/> property of the current <see cref="DecimalAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DecimalAnimation</typeparam>                                                                       
        /// <param name=" decimalAnimation">current <see cref="DecimalAnimation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current decimalAnimation</returns>                                                                                    
        public static TType From<TType>(this TType decimalAnimation, Nullable<Decimal> from) where TType : notnull, DecimalAnimation
        {
            decimalAnimation.From = from;
            return decimalAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DecimalAnimation.To"/> property of the current <see cref="DecimalAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DecimalAnimation</typeparam>                                                                       
        /// <param name=" decimalAnimation">current <see cref="DecimalAnimation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current decimalAnimation</returns>                                                                                    
        public static TType To<TType>(this TType decimalAnimation, Nullable<Decimal> to) where TType : notnull, DecimalAnimation
        {
            decimalAnimation.To = to;
            return decimalAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DecimalAnimation.By"/> property of the current <see cref="DecimalAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DecimalAnimation</typeparam>                                                                       
        /// <param name=" decimalAnimation">current <see cref="DecimalAnimation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current decimalAnimation</returns>                                                                                    
        public static TType By<TType>(this TType decimalAnimation, Nullable<Decimal> by) where TType : notnull, DecimalAnimation
        {
            decimalAnimation.By = by;
            return decimalAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DecimalAnimation.EasingFunction"/> property of the current <see cref="DecimalAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DecimalAnimation</typeparam>                                                                       
        /// <param name=" decimalAnimation">current <see cref="DecimalAnimation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current decimalAnimation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType decimalAnimation, IEasingFunction easingFunction) where TType : notnull, DecimalAnimation
        {
            decimalAnimation.EasingFunction = easingFunction;
            return decimalAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DecimalAnimation.IsAdditive"/> property of the current <see cref="DecimalAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DecimalAnimation</typeparam>                                                                       
        /// <param name=" decimalAnimation">current <see cref="DecimalAnimation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current decimalAnimation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType decimalAnimation, Boolean isAdditive) where TType : notnull, DecimalAnimation
        {
            decimalAnimation.IsAdditive = isAdditive;
            return decimalAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DecimalAnimation.IsCumulative"/> property of the current <see cref="DecimalAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DecimalAnimation</typeparam>                                                                       
        /// <param name=" decimalAnimation">current <see cref="DecimalAnimation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current decimalAnimation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType decimalAnimation, Boolean isCumulative) where TType : notnull, DecimalAnimation
        {
            decimalAnimation.IsCumulative = isCumulative;
            return decimalAnimation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DecimalAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DecimalAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DecimalAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="DecimalAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DecimalAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" decimalAnimationUsingKeyFrames">current <see cref="DecimalAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current decimalAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType decimalAnimationUsingKeyFrames, DecimalKeyFrameCollection keyFrames) where TType : notnull, DecimalAnimationUsingKeyFrames
        {
            decimalAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return decimalAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DecimalAnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="DecimalAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DecimalAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" decimalAnimationUsingKeyFrames">current <see cref="DecimalAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current decimalAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType decimalAnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, DecimalAnimationUsingKeyFrames
        {
            decimalAnimationUsingKeyFrames.IsAdditive = isAdditive;
            return decimalAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DecimalAnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="DecimalAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DecimalAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" decimalAnimationUsingKeyFrames">current <see cref="DecimalAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current decimalAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType decimalAnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, DecimalAnimationUsingKeyFrames
        {
            decimalAnimationUsingKeyFrames.IsCumulative = isCumulative;
            return decimalAnimationUsingKeyFrames;
        }
    }
    
    /// <summary>                                                                                                                    
    /// <see cref="DoubleAnimation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DoubleAnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleAnimation.From"/> property of the current <see cref="DoubleAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleAnimation</typeparam>                                                                       
        /// <param name=" doubleAnimation">current <see cref="DoubleAnimation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current doubleAnimation</returns>                                                                                    
        public static TType From<TType>(this TType doubleAnimation, Nullable<Double> from) where TType : notnull, DoubleAnimation
        {
            doubleAnimation.From = from;
            return doubleAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleAnimation.To"/> property of the current <see cref="DoubleAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleAnimation</typeparam>                                                                       
        /// <param name=" doubleAnimation">current <see cref="DoubleAnimation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current doubleAnimation</returns>                                                                                    
        public static TType To<TType>(this TType doubleAnimation, Nullable<Double> to) where TType : notnull, DoubleAnimation
        {
            doubleAnimation.To = to;
            return doubleAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleAnimation.By"/> property of the current <see cref="DoubleAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleAnimation</typeparam>                                                                       
        /// <param name=" doubleAnimation">current <see cref="DoubleAnimation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current doubleAnimation</returns>                                                                                    
        public static TType By<TType>(this TType doubleAnimation, Nullable<Double> by) where TType : notnull, DoubleAnimation
        {
            doubleAnimation.By = by;
            return doubleAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleAnimation.EasingFunction"/> property of the current <see cref="DoubleAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleAnimation</typeparam>                                                                       
        /// <param name=" doubleAnimation">current <see cref="DoubleAnimation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current doubleAnimation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType doubleAnimation, IEasingFunction easingFunction) where TType : notnull, DoubleAnimation
        {
            doubleAnimation.EasingFunction = easingFunction;
            return doubleAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleAnimation.IsAdditive"/> property of the current <see cref="DoubleAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleAnimation</typeparam>                                                                       
        /// <param name=" doubleAnimation">current <see cref="DoubleAnimation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current doubleAnimation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType doubleAnimation, Boolean isAdditive) where TType : notnull, DoubleAnimation
        {
            doubleAnimation.IsAdditive = isAdditive;
            return doubleAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleAnimation.IsCumulative"/> property of the current <see cref="DoubleAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleAnimation</typeparam>                                                                       
        /// <param name=" doubleAnimation">current <see cref="DoubleAnimation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current doubleAnimation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType doubleAnimation, Boolean isCumulative) where TType : notnull, DoubleAnimation
        {
            doubleAnimation.IsCumulative = isCumulative;
            return doubleAnimation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DoubleAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DoubleAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="DoubleAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" doubleAnimationUsingKeyFrames">current <see cref="DoubleAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current doubleAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType doubleAnimationUsingKeyFrames, DoubleKeyFrameCollection keyFrames) where TType : notnull, DoubleAnimationUsingKeyFrames
        {
            doubleAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return doubleAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleAnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="DoubleAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" doubleAnimationUsingKeyFrames">current <see cref="DoubleAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current doubleAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType doubleAnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, DoubleAnimationUsingKeyFrames
        {
            doubleAnimationUsingKeyFrames.IsAdditive = isAdditive;
            return doubleAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleAnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="DoubleAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" doubleAnimationUsingKeyFrames">current <see cref="DoubleAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current doubleAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType doubleAnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, DoubleAnimationUsingKeyFrames
        {
            doubleAnimationUsingKeyFrames.IsCumulative = isCumulative;
            return doubleAnimationUsingKeyFrames;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="EasingByteKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingByteKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingByteKeyFrame.EasingFunction"/> property of the current <see cref="EasingByteKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingByteKeyFrame</typeparam>                                                                       
        /// <param name=" easingByteKeyFrame">current <see cref="EasingByteKeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingByteKeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingByteKeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingByteKeyFrame
        {
            easingByteKeyFrame.EasingFunction = easingFunction;
            return easingByteKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingColorKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingColorKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingColorKeyFrame.EasingFunction"/> property of the current <see cref="EasingColorKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingColorKeyFrame</typeparam>                                                                       
        /// <param name=" easingColorKeyFrame">current <see cref="EasingColorKeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingColorKeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingColorKeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingColorKeyFrame
        {
            easingColorKeyFrame.EasingFunction = easingFunction;
            return easingColorKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingDecimalKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingDecimalKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingDecimalKeyFrame.EasingFunction"/> property of the current <see cref="EasingDecimalKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingDecimalKeyFrame</typeparam>                                                                       
        /// <param name=" easingDecimalKeyFrame">current <see cref="EasingDecimalKeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingDecimalKeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingDecimalKeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingDecimalKeyFrame
        {
            easingDecimalKeyFrame.EasingFunction = easingFunction;
            return easingDecimalKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingDoubleKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingDoubleKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingDoubleKeyFrame.EasingFunction"/> property of the current <see cref="EasingDoubleKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingDoubleKeyFrame</typeparam>                                                                       
        /// <param name=" easingDoubleKeyFrame">current <see cref="EasingDoubleKeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingDoubleKeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingDoubleKeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingDoubleKeyFrame
        {
            easingDoubleKeyFrame.EasingFunction = easingFunction;
            return easingDoubleKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingInt16KeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingInt16KeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingInt16KeyFrame.EasingFunction"/> property of the current <see cref="EasingInt16KeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingInt16KeyFrame</typeparam>                                                                       
        /// <param name=" easingInt16KeyFrame">current <see cref="EasingInt16KeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingInt16KeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingInt16KeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingInt16KeyFrame
        {
            easingInt16KeyFrame.EasingFunction = easingFunction;
            return easingInt16KeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingInt32KeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingInt32KeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingInt32KeyFrame.EasingFunction"/> property of the current <see cref="EasingInt32KeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingInt32KeyFrame</typeparam>                                                                       
        /// <param name=" easingInt32KeyFrame">current <see cref="EasingInt32KeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingInt32KeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingInt32KeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingInt32KeyFrame
        {
            easingInt32KeyFrame.EasingFunction = easingFunction;
            return easingInt32KeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingInt64KeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingInt64KeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingInt64KeyFrame.EasingFunction"/> property of the current <see cref="EasingInt64KeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingInt64KeyFrame</typeparam>                                                                       
        /// <param name=" easingInt64KeyFrame">current <see cref="EasingInt64KeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingInt64KeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingInt64KeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingInt64KeyFrame
        {
            easingInt64KeyFrame.EasingFunction = easingFunction;
            return easingInt64KeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingPointKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingPointKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingPointKeyFrame.EasingFunction"/> property of the current <see cref="EasingPointKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingPointKeyFrame</typeparam>                                                                       
        /// <param name=" easingPointKeyFrame">current <see cref="EasingPointKeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingPointKeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingPointKeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingPointKeyFrame
        {
            easingPointKeyFrame.EasingFunction = easingFunction;
            return easingPointKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingPoint3DKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingPoint3DKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingPoint3DKeyFrame.EasingFunction"/> property of the current <see cref="EasingPoint3DKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingPoint3DKeyFrame</typeparam>                                                                       
        /// <param name=" easingPoint3DKeyFrame">current <see cref="EasingPoint3DKeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingPoint3DKeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingPoint3DKeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingPoint3DKeyFrame
        {
            easingPoint3DKeyFrame.EasingFunction = easingFunction;
            return easingPoint3DKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingRotation3DKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingRotation3DKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingRotation3DKeyFrame.EasingFunction"/> property of the current <see cref="EasingRotation3DKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingRotation3DKeyFrame</typeparam>                                                                       
        /// <param name=" easingRotation3DKeyFrame">current <see cref="EasingRotation3DKeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingRotation3DKeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingRotation3DKeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingRotation3DKeyFrame
        {
            easingRotation3DKeyFrame.EasingFunction = easingFunction;
            return easingRotation3DKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingRectKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingRectKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingRectKeyFrame.EasingFunction"/> property of the current <see cref="EasingRectKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingRectKeyFrame</typeparam>                                                                       
        /// <param name=" easingRectKeyFrame">current <see cref="EasingRectKeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingRectKeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingRectKeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingRectKeyFrame
        {
            easingRectKeyFrame.EasingFunction = easingFunction;
            return easingRectKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingSingleKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingSingleKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingSingleKeyFrame.EasingFunction"/> property of the current <see cref="EasingSingleKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingSingleKeyFrame</typeparam>                                                                       
        /// <param name=" easingSingleKeyFrame">current <see cref="EasingSingleKeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingSingleKeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingSingleKeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingSingleKeyFrame
        {
            easingSingleKeyFrame.EasingFunction = easingFunction;
            return easingSingleKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingSizeKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingSizeKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingSizeKeyFrame.EasingFunction"/> property of the current <see cref="EasingSizeKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingSizeKeyFrame</typeparam>                                                                       
        /// <param name=" easingSizeKeyFrame">current <see cref="EasingSizeKeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingSizeKeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingSizeKeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingSizeKeyFrame
        {
            easingSizeKeyFrame.EasingFunction = easingFunction;
            return easingSizeKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingVectorKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingVectorKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingVectorKeyFrame.EasingFunction"/> property of the current <see cref="EasingVectorKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingVectorKeyFrame</typeparam>                                                                       
        /// <param name=" easingVectorKeyFrame">current <see cref="EasingVectorKeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingVectorKeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingVectorKeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingVectorKeyFrame
        {
            easingVectorKeyFrame.EasingFunction = easingFunction;
            return easingVectorKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EasingVector3DKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EasingVector3DKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EasingVector3DKeyFrame.EasingFunction"/> property of the current <see cref="EasingVector3DKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">EasingVector3DKeyFrame</typeparam>                                                                       
        /// <param name=" easingVector3DKeyFrame">current <see cref="EasingVector3DKeyFrame"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current easingVector3DKeyFrame</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType easingVector3DKeyFrame, IEasingFunction easingFunction) where TType : notnull, EasingVector3DKeyFrame
        {
            easingVector3DKeyFrame.EasingFunction = easingFunction;
            return easingVector3DKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Int16Animation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Int16AnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Int16Animation.From"/> property of the current <see cref="Int16Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int16Animation</typeparam>                                                                       
        /// <param name=" int16Animation">current <see cref="Int16Animation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current int16Animation</returns>                                                                                    
        public static TType From<TType>(this TType int16Animation, Nullable<Int16> from) where TType : notnull, Int16Animation
        {
            int16Animation.From = from;
            return int16Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int16Animation.To"/> property of the current <see cref="Int16Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int16Animation</typeparam>                                                                       
        /// <param name=" int16Animation">current <see cref="Int16Animation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current int16Animation</returns>                                                                                    
        public static TType To<TType>(this TType int16Animation, Nullable<Int16> to) where TType : notnull, Int16Animation
        {
            int16Animation.To = to;
            return int16Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int16Animation.By"/> property of the current <see cref="Int16Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int16Animation</typeparam>                                                                       
        /// <param name=" int16Animation">current <see cref="Int16Animation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current int16Animation</returns>                                                                                    
        public static TType By<TType>(this TType int16Animation, Nullable<Int16> by) where TType : notnull, Int16Animation
        {
            int16Animation.By = by;
            return int16Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int16Animation.EasingFunction"/> property of the current <see cref="Int16Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int16Animation</typeparam>                                                                       
        /// <param name=" int16Animation">current <see cref="Int16Animation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current int16Animation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType int16Animation, IEasingFunction easingFunction) where TType : notnull, Int16Animation
        {
            int16Animation.EasingFunction = easingFunction;
            return int16Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int16Animation.IsAdditive"/> property of the current <see cref="Int16Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int16Animation</typeparam>                                                                       
        /// <param name=" int16Animation">current <see cref="Int16Animation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current int16Animation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType int16Animation, Boolean isAdditive) where TType : notnull, Int16Animation
        {
            int16Animation.IsAdditive = isAdditive;
            return int16Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int16Animation.IsCumulative"/> property of the current <see cref="Int16Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int16Animation</typeparam>                                                                       
        /// <param name=" int16Animation">current <see cref="Int16Animation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current int16Animation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType int16Animation, Boolean isCumulative) where TType : notnull, Int16Animation
        {
            int16Animation.IsCumulative = isCumulative;
            return int16Animation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Int16AnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Int16AnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Int16AnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="Int16AnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int16AnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" int16AnimationUsingKeyFrames">current <see cref="Int16AnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current int16AnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType int16AnimationUsingKeyFrames, Int16KeyFrameCollection keyFrames) where TType : notnull, Int16AnimationUsingKeyFrames
        {
            int16AnimationUsingKeyFrames.KeyFrames = keyFrames;
            return int16AnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int16AnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="Int16AnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int16AnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" int16AnimationUsingKeyFrames">current <see cref="Int16AnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current int16AnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType int16AnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, Int16AnimationUsingKeyFrames
        {
            int16AnimationUsingKeyFrames.IsAdditive = isAdditive;
            return int16AnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int16AnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="Int16AnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int16AnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" int16AnimationUsingKeyFrames">current <see cref="Int16AnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current int16AnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType int16AnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, Int16AnimationUsingKeyFrames
        {
            int16AnimationUsingKeyFrames.IsCumulative = isCumulative;
            return int16AnimationUsingKeyFrames;
        }
    }
  
    /// <summary>                                                                                                                    
    /// <see cref="Int32Animation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Int32AnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Int32Animation.From"/> property of the current <see cref="Int32Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int32Animation</typeparam>                                                                       
        /// <param name=" int32Animation">current <see cref="Int32Animation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current int32Animation</returns>                                                                                    
        public static TType From<TType>(this TType int32Animation, Nullable<Int32> from) where TType : notnull, Int32Animation
        {
            int32Animation.From = from;
            return int32Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int32Animation.To"/> property of the current <see cref="Int32Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int32Animation</typeparam>                                                                       
        /// <param name=" int32Animation">current <see cref="Int32Animation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current int32Animation</returns>                                                                                    
        public static TType To<TType>(this TType int32Animation, Nullable<Int32> to) where TType : notnull, Int32Animation
        {
            int32Animation.To = to;
            return int32Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int32Animation.By"/> property of the current <see cref="Int32Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int32Animation</typeparam>                                                                       
        /// <param name=" int32Animation">current <see cref="Int32Animation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current int32Animation</returns>                                                                                    
        public static TType By<TType>(this TType int32Animation, Nullable<Int32> by) where TType : notnull, Int32Animation
        {
            int32Animation.By = by;
            return int32Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int32Animation.EasingFunction"/> property of the current <see cref="Int32Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int32Animation</typeparam>                                                                       
        /// <param name=" int32Animation">current <see cref="Int32Animation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current int32Animation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType int32Animation, IEasingFunction easingFunction) where TType : notnull, Int32Animation
        {
            int32Animation.EasingFunction = easingFunction;
            return int32Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int32Animation.IsAdditive"/> property of the current <see cref="Int32Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int32Animation</typeparam>                                                                       
        /// <param name=" int32Animation">current <see cref="Int32Animation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current int32Animation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType int32Animation, Boolean isAdditive) where TType : notnull, Int32Animation
        {
            int32Animation.IsAdditive = isAdditive;
            return int32Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int32Animation.IsCumulative"/> property of the current <see cref="Int32Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int32Animation</typeparam>                                                                       
        /// <param name=" int32Animation">current <see cref="Int32Animation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current int32Animation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType int32Animation, Boolean isCumulative) where TType : notnull, Int32Animation
        {
            int32Animation.IsCumulative = isCumulative;
            return int32Animation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Int32AnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Int32AnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Int32AnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="Int32AnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int32AnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" int32AnimationUsingKeyFrames">current <see cref="Int32AnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current int32AnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType int32AnimationUsingKeyFrames, Int32KeyFrameCollection keyFrames) where TType : notnull, Int32AnimationUsingKeyFrames
        {
            int32AnimationUsingKeyFrames.KeyFrames = keyFrames;
            return int32AnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int32AnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="Int32AnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int32AnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" int32AnimationUsingKeyFrames">current <see cref="Int32AnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current int32AnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType int32AnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, Int32AnimationUsingKeyFrames
        {
            int32AnimationUsingKeyFrames.IsAdditive = isAdditive;
            return int32AnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int32AnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="Int32AnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int32AnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" int32AnimationUsingKeyFrames">current <see cref="Int32AnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current int32AnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType int32AnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, Int32AnimationUsingKeyFrames
        {
            int32AnimationUsingKeyFrames.IsCumulative = isCumulative;
            return int32AnimationUsingKeyFrames;
        }
    }
  
    /// <summary>                                                                                                                    
    /// <see cref="Int64Animation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Int64AnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Int64Animation.From"/> property of the current <see cref="Int64Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int64Animation</typeparam>                                                                       
        /// <param name=" int64Animation">current <see cref="Int64Animation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current int64Animation</returns>                                                                                    
        public static TType From<TType>(this TType int64Animation, Nullable<Int64> from) where TType : notnull, Int64Animation
        {
            int64Animation.From = from;
            return int64Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int64Animation.To"/> property of the current <see cref="Int64Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int64Animation</typeparam>                                                                       
        /// <param name=" int64Animation">current <see cref="Int64Animation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current int64Animation</returns>                                                                                    
        public static TType To<TType>(this TType int64Animation, Nullable<Int64> to) where TType : notnull, Int64Animation
        {
            int64Animation.To = to;
            return int64Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int64Animation.By"/> property of the current <see cref="Int64Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int64Animation</typeparam>                                                                       
        /// <param name=" int64Animation">current <see cref="Int64Animation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current int64Animation</returns>                                                                                    
        public static TType By<TType>(this TType int64Animation, Nullable<Int64> by) where TType : notnull, Int64Animation
        {
            int64Animation.By = by;
            return int64Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int64Animation.EasingFunction"/> property of the current <see cref="Int64Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int64Animation</typeparam>                                                                       
        /// <param name=" int64Animation">current <see cref="Int64Animation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current int64Animation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType int64Animation, IEasingFunction easingFunction) where TType : notnull, Int64Animation
        {
            int64Animation.EasingFunction = easingFunction;
            return int64Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int64Animation.IsAdditive"/> property of the current <see cref="Int64Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int64Animation</typeparam>                                                                       
        /// <param name=" int64Animation">current <see cref="Int64Animation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current int64Animation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType int64Animation, Boolean isAdditive) where TType : notnull, Int64Animation
        {
            int64Animation.IsAdditive = isAdditive;
            return int64Animation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int64Animation.IsCumulative"/> property of the current <see cref="Int64Animation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int64Animation</typeparam>                                                                       
        /// <param name=" int64Animation">current <see cref="Int64Animation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current int64Animation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType int64Animation, Boolean isCumulative) where TType : notnull, Int64Animation
        {
            int64Animation.IsCumulative = isCumulative;
            return int64Animation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Int64AnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Int64AnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Int64AnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="Int64AnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int64AnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" int64AnimationUsingKeyFrames">current <see cref="Int64AnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current int64AnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType int64AnimationUsingKeyFrames, Int64KeyFrameCollection keyFrames) where TType : notnull, Int64AnimationUsingKeyFrames
        {
            int64AnimationUsingKeyFrames.KeyFrames = keyFrames;
            return int64AnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int64AnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="Int64AnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int64AnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" int64AnimationUsingKeyFrames">current <see cref="Int64AnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current int64AnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType int64AnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, Int64AnimationUsingKeyFrames
        {
            int64AnimationUsingKeyFrames.IsAdditive = isAdditive;
            return int64AnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int64AnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="Int64AnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int64AnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" int64AnimationUsingKeyFrames">current <see cref="Int64AnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current int64AnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType int64AnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, Int64AnimationUsingKeyFrames
        {
            int64AnimationUsingKeyFrames.IsCumulative = isCumulative;
            return int64AnimationUsingKeyFrames;
        }
    }
    
    /// <summary>                                                                                                                    
    /// <see cref="BooleanKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BooleanKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BooleanKeyFrame.KeyTime"/> property of the current <see cref="BooleanKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BooleanKeyFrame</typeparam>                                                                       
        /// <param name=" booleanKeyFrame">current <see cref="BooleanKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current booleanKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType booleanKeyFrame, KeyTime keyTime) where TType : notnull, BooleanKeyFrame
        {
            booleanKeyFrame.KeyTime = keyTime;
            return booleanKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BooleanKeyFrame.Value"/> property of the current <see cref="BooleanKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BooleanKeyFrame</typeparam>                                                                       
        /// <param name=" booleanKeyFrame">current <see cref="BooleanKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current booleanKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType booleanKeyFrame, Boolean value) where TType : notnull, BooleanKeyFrame
        {
            booleanKeyFrame.Value = value;
            return booleanKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ByteKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ByteKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ByteKeyFrame.KeyTime"/> property of the current <see cref="ByteKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ByteKeyFrame</typeparam>                                                                       
        /// <param name=" byteKeyFrame">current <see cref="ByteKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current byteKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType byteKeyFrame, KeyTime keyTime) where TType : notnull, ByteKeyFrame
        {
            byteKeyFrame.KeyTime = keyTime;
            return byteKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ByteKeyFrame.Value"/> property of the current <see cref="ByteKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ByteKeyFrame</typeparam>                                                                       
        /// <param name=" byteKeyFrame">current <see cref="ByteKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current byteKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType byteKeyFrame, Byte value) where TType : notnull, ByteKeyFrame
        {
            byteKeyFrame.Value = value;
            return byteKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="CharKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class CharKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="CharKeyFrame.KeyTime"/> property of the current <see cref="CharKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">CharKeyFrame</typeparam>                                                                       
        /// <param name=" charKeyFrame">current <see cref="CharKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current charKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType charKeyFrame, KeyTime keyTime) where TType : notnull, CharKeyFrame
        {
            charKeyFrame.KeyTime = keyTime;
            return charKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="CharKeyFrame.Value"/> property of the current <see cref="CharKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">CharKeyFrame</typeparam>                                                                       
        /// <param name=" charKeyFrame">current <see cref="CharKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current charKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType charKeyFrame, Char value) where TType : notnull, CharKeyFrame
        {
            charKeyFrame.Value = value;
            return charKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ColorKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ColorKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorKeyFrame.KeyTime"/> property of the current <see cref="ColorKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ColorKeyFrame</typeparam>                                                                       
        /// <param name=" colorKeyFrame">current <see cref="ColorKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current colorKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType colorKeyFrame, KeyTime keyTime) where TType : notnull, ColorKeyFrame
        {
            colorKeyFrame.KeyTime = keyTime;
            return colorKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorKeyFrame.Value"/> property of the current <see cref="ColorKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ColorKeyFrame</typeparam>                                                                       
        /// <param name=" colorKeyFrame">current <see cref="ColorKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current colorKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType colorKeyFrame, Color value) where TType : notnull, ColorKeyFrame
        {
            colorKeyFrame.Value = value;
            return colorKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DecimalKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DecimalKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DecimalKeyFrame.KeyTime"/> property of the current <see cref="DecimalKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DecimalKeyFrame</typeparam>                                                                       
        /// <param name=" decimalKeyFrame">current <see cref="DecimalKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current decimalKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType decimalKeyFrame, KeyTime keyTime) where TType : notnull, DecimalKeyFrame
        {
            decimalKeyFrame.KeyTime = keyTime;
            return decimalKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DecimalKeyFrame.Value"/> property of the current <see cref="DecimalKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DecimalKeyFrame</typeparam>                                                                       
        /// <param name=" decimalKeyFrame">current <see cref="DecimalKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current decimalKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType decimalKeyFrame, Decimal value) where TType : notnull, DecimalKeyFrame
        {
            decimalKeyFrame.Value = value;
            return decimalKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DoubleKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DoubleKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleKeyFrame.KeyTime"/> property of the current <see cref="DoubleKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleKeyFrame</typeparam>                                                                       
        /// <param name=" doubleKeyFrame">current <see cref="DoubleKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current doubleKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType doubleKeyFrame, KeyTime keyTime) where TType : notnull, DoubleKeyFrame
        {
            doubleKeyFrame.KeyTime = keyTime;
            return doubleKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DoubleKeyFrame.Value"/> property of the current <see cref="DoubleKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">DoubleKeyFrame</typeparam>                                                                       
        /// <param name=" doubleKeyFrame">current <see cref="DoubleKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current doubleKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType doubleKeyFrame, Double value) where TType : notnull, DoubleKeyFrame
        {
            doubleKeyFrame.Value = value;
            return doubleKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Int16KeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Int16KeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Int16KeyFrame.KeyTime"/> property of the current <see cref="Int16KeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int16KeyFrame</typeparam>                                                                       
        /// <param name=" int16KeyFrame">current <see cref="Int16KeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current int16KeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType int16KeyFrame, KeyTime keyTime) where TType : notnull, Int16KeyFrame
        {
            int16KeyFrame.KeyTime = keyTime;
            return int16KeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int16KeyFrame.Value"/> property of the current <see cref="Int16KeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int16KeyFrame</typeparam>                                                                       
        /// <param name=" int16KeyFrame">current <see cref="Int16KeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current int16KeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType int16KeyFrame, Int16 value) where TType : notnull, Int16KeyFrame
        {
            int16KeyFrame.Value = value;
            return int16KeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Int32KeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Int32KeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Int32KeyFrame.KeyTime"/> property of the current <see cref="Int32KeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int32KeyFrame</typeparam>                                                                       
        /// <param name=" int32KeyFrame">current <see cref="Int32KeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current int32KeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType int32KeyFrame, KeyTime keyTime) where TType : notnull, Int32KeyFrame
        {
            int32KeyFrame.KeyTime = keyTime;
            return int32KeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int32KeyFrame.Value"/> property of the current <see cref="Int32KeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int32KeyFrame</typeparam>                                                                       
        /// <param name=" int32KeyFrame">current <see cref="Int32KeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current int32KeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType int32KeyFrame, Int32 value) where TType : notnull, Int32KeyFrame
        {
            int32KeyFrame.Value = value;
            return int32KeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Int64KeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Int64KeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Int64KeyFrame.KeyTime"/> property of the current <see cref="Int64KeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int64KeyFrame</typeparam>                                                                       
        /// <param name=" int64KeyFrame">current <see cref="Int64KeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current int64KeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType int64KeyFrame, KeyTime keyTime) where TType : notnull, Int64KeyFrame
        {
            int64KeyFrame.KeyTime = keyTime;
            return int64KeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Int64KeyFrame.Value"/> property of the current <see cref="Int64KeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Int64KeyFrame</typeparam>                                                                       
        /// <param name=" int64KeyFrame">current <see cref="Int64KeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current int64KeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType int64KeyFrame, Int64 value) where TType : notnull, Int64KeyFrame
        {
            int64KeyFrame.Value = value;
            return int64KeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="MatrixKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MatrixKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="MatrixKeyFrame.KeyTime"/> property of the current <see cref="MatrixKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MatrixKeyFrame</typeparam>                                                                       
        /// <param name=" matrixKeyFrame">current <see cref="MatrixKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current matrixKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType matrixKeyFrame, KeyTime keyTime) where TType : notnull, MatrixKeyFrame
        {
            matrixKeyFrame.KeyTime = keyTime;
            return matrixKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="MatrixKeyFrame.Value"/> property of the current <see cref="MatrixKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MatrixKeyFrame</typeparam>                                                                       
        /// <param name=" matrixKeyFrame">current <see cref="MatrixKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current matrixKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType matrixKeyFrame, Matrix value) where TType : notnull, MatrixKeyFrame
        {
            matrixKeyFrame.Value = value;
            return matrixKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ObjectKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ObjectKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ObjectKeyFrame.KeyTime"/> property of the current <see cref="ObjectKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ObjectKeyFrame</typeparam>                                                                       
        /// <param name=" objectKeyFrame">current <see cref="ObjectKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current objectKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType objectKeyFrame, KeyTime keyTime) where TType : notnull, ObjectKeyFrame
        {
            objectKeyFrame.KeyTime = keyTime;
            return objectKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ObjectKeyFrame.Value"/> property of the current <see cref="ObjectKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ObjectKeyFrame</typeparam>                                                                       
        /// <param name=" objectKeyFrame">current <see cref="ObjectKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current objectKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType objectKeyFrame, Object value) where TType : notnull, ObjectKeyFrame
        {
            objectKeyFrame.Value = value;
            return objectKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="PointKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PointKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PointKeyFrame.KeyTime"/> property of the current <see cref="PointKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointKeyFrame</typeparam>                                                                       
        /// <param name=" pointKeyFrame">current <see cref="PointKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current pointKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType pointKeyFrame, KeyTime keyTime) where TType : notnull, PointKeyFrame
        {
            pointKeyFrame.KeyTime = keyTime;
            return pointKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PointKeyFrame.Value"/> property of the current <see cref="PointKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointKeyFrame</typeparam>                                                                       
        /// <param name=" pointKeyFrame">current <see cref="PointKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current pointKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType pointKeyFrame, Point value) where TType : notnull, PointKeyFrame
        {
            pointKeyFrame.Value = value;
            return pointKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Point3DKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Point3DKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Point3DKeyFrame.KeyTime"/> property of the current <see cref="Point3DKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Point3DKeyFrame</typeparam>                                                                       
        /// <param name=" point3DKeyFrame">current <see cref="Point3DKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current point3DKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType point3DKeyFrame, KeyTime keyTime) where TType : notnull, Point3DKeyFrame
        {
            point3DKeyFrame.KeyTime = keyTime;
            return point3DKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Point3DKeyFrame.Value"/> property of the current <see cref="Point3DKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Point3DKeyFrame</typeparam>                                                                       
        /// <param name=" point3DKeyFrame">current <see cref="Point3DKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current point3DKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType point3DKeyFrame, Point3D value) where TType : notnull, Point3DKeyFrame
        {
            point3DKeyFrame.Value = value;
            return point3DKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="QuaternionKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class QuaternionKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="QuaternionKeyFrame.KeyTime"/> property of the current <see cref="QuaternionKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">QuaternionKeyFrame</typeparam>                                                                       
        /// <param name=" quaternionKeyFrame">current <see cref="QuaternionKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current quaternionKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType quaternionKeyFrame, KeyTime keyTime) where TType : notnull, QuaternionKeyFrame
        {
            quaternionKeyFrame.KeyTime = keyTime;
            return quaternionKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="QuaternionKeyFrame.Value"/> property of the current <see cref="QuaternionKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">QuaternionKeyFrame</typeparam>                                                                       
        /// <param name=" quaternionKeyFrame">current <see cref="QuaternionKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current quaternionKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType quaternionKeyFrame, Quaternion value) where TType : notnull, QuaternionKeyFrame
        {
            quaternionKeyFrame.Value = value;
            return quaternionKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Rotation3DKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Rotation3DKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Rotation3DKeyFrame.KeyTime"/> property of the current <see cref="Rotation3DKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Rotation3DKeyFrame</typeparam>                                                                       
        /// <param name=" rotation3DKeyFrame">current <see cref="Rotation3DKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current rotation3DKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType rotation3DKeyFrame, KeyTime keyTime) where TType : notnull, Rotation3DKeyFrame
        {
            rotation3DKeyFrame.KeyTime = keyTime;
            return rotation3DKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Rotation3DKeyFrame.Value"/> property of the current <see cref="Rotation3DKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Rotation3DKeyFrame</typeparam>                                                                       
        /// <param name=" rotation3DKeyFrame">current <see cref="Rotation3DKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current rotation3DKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType rotation3DKeyFrame, Rotation3D value) where TType : notnull, Rotation3DKeyFrame
        {
            rotation3DKeyFrame.Value = value;
            return rotation3DKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="RectKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class RectKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="RectKeyFrame.KeyTime"/> property of the current <see cref="RectKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RectKeyFrame</typeparam>                                                                       
        /// <param name=" rectKeyFrame">current <see cref="RectKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current rectKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType rectKeyFrame, KeyTime keyTime) where TType : notnull, RectKeyFrame
        {
            rectKeyFrame.KeyTime = keyTime;
            return rectKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RectKeyFrame.Value"/> property of the current <see cref="RectKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RectKeyFrame</typeparam>                                                                       
        /// <param name=" rectKeyFrame">current <see cref="RectKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current rectKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType rectKeyFrame, Rect value) where TType : notnull, RectKeyFrame
        {
            rectKeyFrame.Value = value;
            return rectKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SingleKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SingleKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SingleKeyFrame.KeyTime"/> property of the current <see cref="SingleKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SingleKeyFrame</typeparam>                                                                       
        /// <param name=" singleKeyFrame">current <see cref="SingleKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current singleKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType singleKeyFrame, KeyTime keyTime) where TType : notnull, SingleKeyFrame
        {
            singleKeyFrame.KeyTime = keyTime;
            return singleKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SingleKeyFrame.Value"/> property of the current <see cref="SingleKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SingleKeyFrame</typeparam>                                                                       
        /// <param name=" singleKeyFrame">current <see cref="SingleKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current singleKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType singleKeyFrame, Single value) where TType : notnull, SingleKeyFrame
        {
            singleKeyFrame.Value = value;
            return singleKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SizeKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SizeKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SizeKeyFrame.KeyTime"/> property of the current <see cref="SizeKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SizeKeyFrame</typeparam>                                                                       
        /// <param name=" sizeKeyFrame">current <see cref="SizeKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current sizeKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType sizeKeyFrame, KeyTime keyTime) where TType : notnull, SizeKeyFrame
        {
            sizeKeyFrame.KeyTime = keyTime;
            return sizeKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SizeKeyFrame.Value"/> property of the current <see cref="SizeKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SizeKeyFrame</typeparam>                                                                       
        /// <param name=" sizeKeyFrame">current <see cref="SizeKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current sizeKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType sizeKeyFrame, Size value) where TType : notnull, SizeKeyFrame
        {
            sizeKeyFrame.Value = value;
            return sizeKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="StringKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class StringKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="StringKeyFrame.KeyTime"/> property of the current <see cref="StringKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">StringKeyFrame</typeparam>                                                                       
        /// <param name=" stringKeyFrame">current <see cref="StringKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current stringKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType stringKeyFrame, KeyTime keyTime) where TType : notnull, StringKeyFrame
        {
            stringKeyFrame.KeyTime = keyTime;
            return stringKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="StringKeyFrame.Value"/> property of the current <see cref="StringKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">StringKeyFrame</typeparam>                                                                       
        /// <param name=" stringKeyFrame">current <see cref="StringKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current stringKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType stringKeyFrame, String value) where TType : notnull, StringKeyFrame
        {
            stringKeyFrame.Value = value;
            return stringKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="VectorKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class VectorKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="VectorKeyFrame.KeyTime"/> property of the current <see cref="VectorKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VectorKeyFrame</typeparam>                                                                       
        /// <param name=" vectorKeyFrame">current <see cref="VectorKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current vectorKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType vectorKeyFrame, KeyTime keyTime) where TType : notnull, VectorKeyFrame
        {
            vectorKeyFrame.KeyTime = keyTime;
            return vectorKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VectorKeyFrame.Value"/> property of the current <see cref="VectorKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VectorKeyFrame</typeparam>                                                                       
        /// <param name=" vectorKeyFrame">current <see cref="VectorKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current vectorKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType vectorKeyFrame, Vector value) where TType : notnull, VectorKeyFrame
        {
            vectorKeyFrame.Value = value;
            return vectorKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Vector3DKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Vector3DKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Vector3DKeyFrame.KeyTime"/> property of the current <see cref="Vector3DKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Vector3DKeyFrame</typeparam>                                                                       
        /// <param name=" vector3DKeyFrame">current <see cref="Vector3DKeyFrame"/></param>                                                          
        /// <param name="keyTime">keyTime value</param>                                                                            
        /// <returns>current vector3DKeyFrame</returns>                                                                                    
        public static TType KeyTime<TType>(this TType vector3DKeyFrame, KeyTime keyTime) where TType : notnull, Vector3DKeyFrame
        {
            vector3DKeyFrame.KeyTime = keyTime;
            return vector3DKeyFrame;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Vector3DKeyFrame.Value"/> property of the current <see cref="Vector3DKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Vector3DKeyFrame</typeparam>                                                                       
        /// <param name=" vector3DKeyFrame">current <see cref="Vector3DKeyFrame"/></param>                                                          
        /// <param name="value">value value</param>                                                                            
        /// <returns>current vector3DKeyFrame</returns>                                                                                    
        public static TType Value<TType>(this TType vector3DKeyFrame, Vector3D value) where TType : notnull, Vector3DKeyFrame
        {
            vector3DKeyFrame.Value = value;
            return vector3DKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="MatrixAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class MatrixAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="MatrixAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="MatrixAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">MatrixAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" matrixAnimationUsingKeyFrames">current <see cref="MatrixAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current matrixAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType matrixAnimationUsingKeyFrames, MatrixKeyFrameCollection keyFrames) where TType : notnull, MatrixAnimationUsingKeyFrames
        {
            matrixAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return matrixAnimationUsingKeyFrames;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="ObjectAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ObjectAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ObjectAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="ObjectAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">ObjectAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" objectAnimationUsingKeyFrames">current <see cref="ObjectAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current objectAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType objectAnimationUsingKeyFrames, ObjectKeyFrameCollection keyFrames) where TType : notnull, ObjectAnimationUsingKeyFrames
        {
            objectAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return objectAnimationUsingKeyFrames;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="Point3DAnimation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Point3DAnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Point3DAnimation.From"/> property of the current <see cref="Point3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Point3DAnimation</typeparam>                                                                       
        /// <param name=" point3DAnimation">current <see cref="Point3DAnimation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current point3DAnimation</returns>                                                                                    
        public static TType From<TType>(this TType point3DAnimation, Nullable<Point3D> from) where TType : notnull, Point3DAnimation
        {
            point3DAnimation.From = from;
            return point3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Point3DAnimation.To"/> property of the current <see cref="Point3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Point3DAnimation</typeparam>                                                                       
        /// <param name=" point3DAnimation">current <see cref="Point3DAnimation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current point3DAnimation</returns>                                                                                    
        public static TType To<TType>(this TType point3DAnimation, Nullable<Point3D> to) where TType : notnull, Point3DAnimation
        {
            point3DAnimation.To = to;
            return point3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Point3DAnimation.By"/> property of the current <see cref="Point3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Point3DAnimation</typeparam>                                                                       
        /// <param name=" point3DAnimation">current <see cref="Point3DAnimation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current point3DAnimation</returns>                                                                                    
        public static TType By<TType>(this TType point3DAnimation, Nullable<Point3D> by) where TType : notnull, Point3DAnimation
        {
            point3DAnimation.By = by;
            return point3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Point3DAnimation.EasingFunction"/> property of the current <see cref="Point3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Point3DAnimation</typeparam>                                                                       
        /// <param name=" point3DAnimation">current <see cref="Point3DAnimation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current point3DAnimation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType point3DAnimation, IEasingFunction easingFunction) where TType : notnull, Point3DAnimation
        {
            point3DAnimation.EasingFunction = easingFunction;
            return point3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Point3DAnimation.IsAdditive"/> property of the current <see cref="Point3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Point3DAnimation</typeparam>                                                                       
        /// <param name=" point3DAnimation">current <see cref="Point3DAnimation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current point3DAnimation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType point3DAnimation, Boolean isAdditive) where TType : notnull, Point3DAnimation
        {
            point3DAnimation.IsAdditive = isAdditive;
            return point3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Point3DAnimation.IsCumulative"/> property of the current <see cref="Point3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Point3DAnimation</typeparam>                                                                       
        /// <param name=" point3DAnimation">current <see cref="Point3DAnimation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current point3DAnimation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType point3DAnimation, Boolean isCumulative) where TType : notnull, Point3DAnimation
        {
            point3DAnimation.IsCumulative = isCumulative;
            return point3DAnimation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Point3DAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Point3DAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Point3DAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="Point3DAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Point3DAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" point3DAnimationUsingKeyFrames">current <see cref="Point3DAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current point3DAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType point3DAnimationUsingKeyFrames, Point3DKeyFrameCollection keyFrames) where TType : notnull, Point3DAnimationUsingKeyFrames
        {
            point3DAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return point3DAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Point3DAnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="Point3DAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Point3DAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" point3DAnimationUsingKeyFrames">current <see cref="Point3DAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current point3DAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType point3DAnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, Point3DAnimationUsingKeyFrames
        {
            point3DAnimationUsingKeyFrames.IsAdditive = isAdditive;
            return point3DAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Point3DAnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="Point3DAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Point3DAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" point3DAnimationUsingKeyFrames">current <see cref="Point3DAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current point3DAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType point3DAnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, Point3DAnimationUsingKeyFrames
        {
            point3DAnimationUsingKeyFrames.IsCumulative = isCumulative;
            return point3DAnimationUsingKeyFrames;
        }
    }
  
    /// <summary>                                                                                                                    
    /// <see cref="PointAnimation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PointAnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PointAnimation.From"/> property of the current <see cref="PointAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointAnimation</typeparam>                                                                       
        /// <param name=" pointAnimation">current <see cref="PointAnimation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current pointAnimation</returns>                                                                                    
        public static TType From<TType>(this TType pointAnimation, Nullable<Point> from) where TType : notnull, PointAnimation
        {
            pointAnimation.From = from;
            return pointAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PointAnimation.To"/> property of the current <see cref="PointAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointAnimation</typeparam>                                                                       
        /// <param name=" pointAnimation">current <see cref="PointAnimation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current pointAnimation</returns>                                                                                    
        public static TType To<TType>(this TType pointAnimation, Nullable<Point> to) where TType : notnull, PointAnimation
        {
            pointAnimation.To = to;
            return pointAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PointAnimation.By"/> property of the current <see cref="PointAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointAnimation</typeparam>                                                                       
        /// <param name=" pointAnimation">current <see cref="PointAnimation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current pointAnimation</returns>                                                                                    
        public static TType By<TType>(this TType pointAnimation, Nullable<Point> by) where TType : notnull, PointAnimation
        {
            pointAnimation.By = by;
            return pointAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PointAnimation.EasingFunction"/> property of the current <see cref="PointAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointAnimation</typeparam>                                                                       
        /// <param name=" pointAnimation">current <see cref="PointAnimation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current pointAnimation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType pointAnimation, IEasingFunction easingFunction) where TType : notnull, PointAnimation
        {
            pointAnimation.EasingFunction = easingFunction;
            return pointAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PointAnimation.IsAdditive"/> property of the current <see cref="PointAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointAnimation</typeparam>                                                                       
        /// <param name=" pointAnimation">current <see cref="PointAnimation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current pointAnimation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType pointAnimation, Boolean isAdditive) where TType : notnull, PointAnimation
        {
            pointAnimation.IsAdditive = isAdditive;
            return pointAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PointAnimation.IsCumulative"/> property of the current <see cref="PointAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointAnimation</typeparam>                                                                       
        /// <param name=" pointAnimation">current <see cref="PointAnimation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current pointAnimation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType pointAnimation, Boolean isCumulative) where TType : notnull, PointAnimation
        {
            pointAnimation.IsCumulative = isCumulative;
            return pointAnimation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="PointAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PointAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PointAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="PointAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" pointAnimationUsingKeyFrames">current <see cref="PointAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current pointAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType pointAnimationUsingKeyFrames, PointKeyFrameCollection keyFrames) where TType : notnull, PointAnimationUsingKeyFrames
        {
            pointAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return pointAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PointAnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="PointAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" pointAnimationUsingKeyFrames">current <see cref="PointAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current pointAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType pointAnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, PointAnimationUsingKeyFrames
        {
            pointAnimationUsingKeyFrames.IsAdditive = isAdditive;
            return pointAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PointAnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="PointAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">PointAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" pointAnimationUsingKeyFrames">current <see cref="PointAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current pointAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType pointAnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, PointAnimationUsingKeyFrames
        {
            pointAnimationUsingKeyFrames.IsCumulative = isCumulative;
            return pointAnimationUsingKeyFrames;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="QuaternionAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class QuaternionAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="QuaternionAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="QuaternionAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">QuaternionAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" quaternionAnimationUsingKeyFrames">current <see cref="QuaternionAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current quaternionAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType quaternionAnimationUsingKeyFrames, QuaternionKeyFrameCollection keyFrames) where TType : notnull, QuaternionAnimationUsingKeyFrames
        {
            quaternionAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return quaternionAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="QuaternionAnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="QuaternionAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">QuaternionAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" quaternionAnimationUsingKeyFrames">current <see cref="QuaternionAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current quaternionAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType quaternionAnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, QuaternionAnimationUsingKeyFrames
        {
            quaternionAnimationUsingKeyFrames.IsAdditive = isAdditive;
            return quaternionAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="QuaternionAnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="QuaternionAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">QuaternionAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" quaternionAnimationUsingKeyFrames">current <see cref="QuaternionAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current quaternionAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType quaternionAnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, QuaternionAnimationUsingKeyFrames
        {
            quaternionAnimationUsingKeyFrames.IsCumulative = isCumulative;
            return quaternionAnimationUsingKeyFrames;
        }
    }
  
    /// <summary>                                                                                                                    
    /// <see cref="RectAnimation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class RectAnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="RectAnimation.From"/> property of the current <see cref="RectAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RectAnimation</typeparam>                                                                       
        /// <param name=" rectAnimation">current <see cref="RectAnimation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current rectAnimation</returns>                                                                                    
        public static TType From<TType>(this TType rectAnimation, Nullable<Rect> from) where TType : notnull, RectAnimation
        {
            rectAnimation.From = from;
            return rectAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RectAnimation.To"/> property of the current <see cref="RectAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RectAnimation</typeparam>                                                                       
        /// <param name=" rectAnimation">current <see cref="RectAnimation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current rectAnimation</returns>                                                                                    
        public static TType To<TType>(this TType rectAnimation, Nullable<Rect> to) where TType : notnull, RectAnimation
        {
            rectAnimation.To = to;
            return rectAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RectAnimation.By"/> property of the current <see cref="RectAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RectAnimation</typeparam>                                                                       
        /// <param name=" rectAnimation">current <see cref="RectAnimation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current rectAnimation</returns>                                                                                    
        public static TType By<TType>(this TType rectAnimation, Nullable<Rect> by) where TType : notnull, RectAnimation
        {
            rectAnimation.By = by;
            return rectAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RectAnimation.EasingFunction"/> property of the current <see cref="RectAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RectAnimation</typeparam>                                                                       
        /// <param name=" rectAnimation">current <see cref="RectAnimation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current rectAnimation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType rectAnimation, IEasingFunction easingFunction) where TType : notnull, RectAnimation
        {
            rectAnimation.EasingFunction = easingFunction;
            return rectAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RectAnimation.IsAdditive"/> property of the current <see cref="RectAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RectAnimation</typeparam>                                                                       
        /// <param name=" rectAnimation">current <see cref="RectAnimation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current rectAnimation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType rectAnimation, Boolean isAdditive) where TType : notnull, RectAnimation
        {
            rectAnimation.IsAdditive = isAdditive;
            return rectAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RectAnimation.IsCumulative"/> property of the current <see cref="RectAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RectAnimation</typeparam>                                                                       
        /// <param name=" rectAnimation">current <see cref="RectAnimation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current rectAnimation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType rectAnimation, Boolean isCumulative) where TType : notnull, RectAnimation
        {
            rectAnimation.IsCumulative = isCumulative;
            return rectAnimation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="RectAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class RectAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="RectAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="RectAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RectAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" rectAnimationUsingKeyFrames">current <see cref="RectAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current rectAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType rectAnimationUsingKeyFrames, RectKeyFrameCollection keyFrames) where TType : notnull, RectAnimationUsingKeyFrames
        {
            rectAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return rectAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RectAnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="RectAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RectAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" rectAnimationUsingKeyFrames">current <see cref="RectAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current rectAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType rectAnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, RectAnimationUsingKeyFrames
        {
            rectAnimationUsingKeyFrames.IsAdditive = isAdditive;
            return rectAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="RectAnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="RectAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">RectAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" rectAnimationUsingKeyFrames">current <see cref="RectAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current rectAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType rectAnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, RectAnimationUsingKeyFrames
        {
            rectAnimationUsingKeyFrames.IsCumulative = isCumulative;
            return rectAnimationUsingKeyFrames;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="Rotation3DAnimation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Rotation3DAnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Rotation3DAnimation.From"/> property of the current <see cref="Rotation3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Rotation3DAnimation</typeparam>                                                                       
        /// <param name=" rotation3DAnimation">current <see cref="Rotation3DAnimation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current rotation3DAnimation</returns>                                                                                    
        public static TType From<TType>(this TType rotation3DAnimation, Rotation3D from) where TType : notnull, Rotation3DAnimation
        {
            rotation3DAnimation.From = from;
            return rotation3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Rotation3DAnimation.To"/> property of the current <see cref="Rotation3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Rotation3DAnimation</typeparam>                                                                       
        /// <param name=" rotation3DAnimation">current <see cref="Rotation3DAnimation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current rotation3DAnimation</returns>                                                                                    
        public static TType To<TType>(this TType rotation3DAnimation, Rotation3D to) where TType : notnull, Rotation3DAnimation
        {
            rotation3DAnimation.To = to;
            return rotation3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Rotation3DAnimation.By"/> property of the current <see cref="Rotation3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Rotation3DAnimation</typeparam>                                                                       
        /// <param name=" rotation3DAnimation">current <see cref="Rotation3DAnimation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current rotation3DAnimation</returns>                                                                                    
        public static TType By<TType>(this TType rotation3DAnimation, Rotation3D by) where TType : notnull, Rotation3DAnimation
        {
            rotation3DAnimation.By = by;
            return rotation3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Rotation3DAnimation.EasingFunction"/> property of the current <see cref="Rotation3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Rotation3DAnimation</typeparam>                                                                       
        /// <param name=" rotation3DAnimation">current <see cref="Rotation3DAnimation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current rotation3DAnimation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType rotation3DAnimation, IEasingFunction easingFunction) where TType : notnull, Rotation3DAnimation
        {
            rotation3DAnimation.EasingFunction = easingFunction;
            return rotation3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Rotation3DAnimation.IsAdditive"/> property of the current <see cref="Rotation3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Rotation3DAnimation</typeparam>                                                                       
        /// <param name=" rotation3DAnimation">current <see cref="Rotation3DAnimation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current rotation3DAnimation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType rotation3DAnimation, Boolean isAdditive) where TType : notnull, Rotation3DAnimation
        {
            rotation3DAnimation.IsAdditive = isAdditive;
            return rotation3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Rotation3DAnimation.IsCumulative"/> property of the current <see cref="Rotation3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Rotation3DAnimation</typeparam>                                                                       
        /// <param name=" rotation3DAnimation">current <see cref="Rotation3DAnimation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current rotation3DAnimation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType rotation3DAnimation, Boolean isCumulative) where TType : notnull, Rotation3DAnimation
        {
            rotation3DAnimation.IsCumulative = isCumulative;
            return rotation3DAnimation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Rotation3DAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Rotation3DAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Rotation3DAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="Rotation3DAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Rotation3DAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" rotation3DAnimationUsingKeyFrames">current <see cref="Rotation3DAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current rotation3DAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType rotation3DAnimationUsingKeyFrames, Rotation3DKeyFrameCollection keyFrames) where TType : notnull, Rotation3DAnimationUsingKeyFrames
        {
            rotation3DAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return rotation3DAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Rotation3DAnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="Rotation3DAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Rotation3DAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" rotation3DAnimationUsingKeyFrames">current <see cref="Rotation3DAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current rotation3DAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType rotation3DAnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, Rotation3DAnimationUsingKeyFrames
        {
            rotation3DAnimationUsingKeyFrames.IsAdditive = isAdditive;
            return rotation3DAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Rotation3DAnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="Rotation3DAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Rotation3DAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" rotation3DAnimationUsingKeyFrames">current <see cref="Rotation3DAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current rotation3DAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType rotation3DAnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, Rotation3DAnimationUsingKeyFrames
        {
            rotation3DAnimationUsingKeyFrames.IsCumulative = isCumulative;
            return rotation3DAnimationUsingKeyFrames;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="SingleAnimation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SingleAnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SingleAnimation.From"/> property of the current <see cref="SingleAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SingleAnimation</typeparam>                                                                       
        /// <param name=" singleAnimation">current <see cref="SingleAnimation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current singleAnimation</returns>                                                                                    
        public static TType From<TType>(this TType singleAnimation, Nullable<Single> from) where TType : notnull, SingleAnimation
        {
            singleAnimation.From = from;
            return singleAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SingleAnimation.To"/> property of the current <see cref="SingleAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SingleAnimation</typeparam>                                                                       
        /// <param name=" singleAnimation">current <see cref="SingleAnimation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current singleAnimation</returns>                                                                                    
        public static TType To<TType>(this TType singleAnimation, Nullable<Single> to) where TType : notnull, SingleAnimation
        {
            singleAnimation.To = to;
            return singleAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SingleAnimation.By"/> property of the current <see cref="SingleAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SingleAnimation</typeparam>                                                                       
        /// <param name=" singleAnimation">current <see cref="SingleAnimation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current singleAnimation</returns>                                                                                    
        public static TType By<TType>(this TType singleAnimation, Nullable<Single> by) where TType : notnull, SingleAnimation
        {
            singleAnimation.By = by;
            return singleAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SingleAnimation.EasingFunction"/> property of the current <see cref="SingleAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SingleAnimation</typeparam>                                                                       
        /// <param name=" singleAnimation">current <see cref="SingleAnimation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current singleAnimation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType singleAnimation, IEasingFunction easingFunction) where TType : notnull, SingleAnimation
        {
            singleAnimation.EasingFunction = easingFunction;
            return singleAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SingleAnimation.IsAdditive"/> property of the current <see cref="SingleAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SingleAnimation</typeparam>                                                                       
        /// <param name=" singleAnimation">current <see cref="SingleAnimation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current singleAnimation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType singleAnimation, Boolean isAdditive) where TType : notnull, SingleAnimation
        {
            singleAnimation.IsAdditive = isAdditive;
            return singleAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SingleAnimation.IsCumulative"/> property of the current <see cref="SingleAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SingleAnimation</typeparam>                                                                       
        /// <param name=" singleAnimation">current <see cref="SingleAnimation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current singleAnimation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType singleAnimation, Boolean isCumulative) where TType : notnull, SingleAnimation
        {
            singleAnimation.IsCumulative = isCumulative;
            return singleAnimation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SingleAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SingleAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SingleAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="SingleAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SingleAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" singleAnimationUsingKeyFrames">current <see cref="SingleAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current singleAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType singleAnimationUsingKeyFrames, SingleKeyFrameCollection keyFrames) where TType : notnull, SingleAnimationUsingKeyFrames
        {
            singleAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return singleAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SingleAnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="SingleAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SingleAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" singleAnimationUsingKeyFrames">current <see cref="SingleAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current singleAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType singleAnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, SingleAnimationUsingKeyFrames
        {
            singleAnimationUsingKeyFrames.IsAdditive = isAdditive;
            return singleAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SingleAnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="SingleAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SingleAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" singleAnimationUsingKeyFrames">current <see cref="SingleAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current singleAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType singleAnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, SingleAnimationUsingKeyFrames
        {
            singleAnimationUsingKeyFrames.IsCumulative = isCumulative;
            return singleAnimationUsingKeyFrames;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="SizeAnimation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SizeAnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SizeAnimation.From"/> property of the current <see cref="SizeAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SizeAnimation</typeparam>                                                                       
        /// <param name=" sizeAnimation">current <see cref="SizeAnimation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current sizeAnimation</returns>                                                                                    
        public static TType From<TType>(this TType sizeAnimation, Nullable<Size> from) where TType : notnull, SizeAnimation
        {
            sizeAnimation.From = from;
            return sizeAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SizeAnimation.To"/> property of the current <see cref="SizeAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SizeAnimation</typeparam>                                                                       
        /// <param name=" sizeAnimation">current <see cref="SizeAnimation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current sizeAnimation</returns>                                                                                    
        public static TType To<TType>(this TType sizeAnimation, Nullable<Size> to) where TType : notnull, SizeAnimation
        {
            sizeAnimation.To = to;
            return sizeAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SizeAnimation.By"/> property of the current <see cref="SizeAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SizeAnimation</typeparam>                                                                       
        /// <param name=" sizeAnimation">current <see cref="SizeAnimation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current sizeAnimation</returns>                                                                                    
        public static TType By<TType>(this TType sizeAnimation, Nullable<Size> by) where TType : notnull, SizeAnimation
        {
            sizeAnimation.By = by;
            return sizeAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SizeAnimation.EasingFunction"/> property of the current <see cref="SizeAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SizeAnimation</typeparam>                                                                       
        /// <param name=" sizeAnimation">current <see cref="SizeAnimation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current sizeAnimation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType sizeAnimation, IEasingFunction easingFunction) where TType : notnull, SizeAnimation
        {
            sizeAnimation.EasingFunction = easingFunction;
            return sizeAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SizeAnimation.IsAdditive"/> property of the current <see cref="SizeAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SizeAnimation</typeparam>                                                                       
        /// <param name=" sizeAnimation">current <see cref="SizeAnimation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current sizeAnimation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType sizeAnimation, Boolean isAdditive) where TType : notnull, SizeAnimation
        {
            sizeAnimation.IsAdditive = isAdditive;
            return sizeAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SizeAnimation.IsCumulative"/> property of the current <see cref="SizeAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SizeAnimation</typeparam>                                                                       
        /// <param name=" sizeAnimation">current <see cref="SizeAnimation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current sizeAnimation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType sizeAnimation, Boolean isCumulative) where TType : notnull, SizeAnimation
        {
            sizeAnimation.IsCumulative = isCumulative;
            return sizeAnimation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SizeAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SizeAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SizeAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="SizeAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SizeAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" sizeAnimationUsingKeyFrames">current <see cref="SizeAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current sizeAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType sizeAnimationUsingKeyFrames, SizeKeyFrameCollection keyFrames) where TType : notnull, SizeAnimationUsingKeyFrames
        {
            sizeAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return sizeAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SizeAnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="SizeAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SizeAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" sizeAnimationUsingKeyFrames">current <see cref="SizeAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current sizeAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType sizeAnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, SizeAnimationUsingKeyFrames
        {
            sizeAnimationUsingKeyFrames.IsAdditive = isAdditive;
            return sizeAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="SizeAnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="SizeAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SizeAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" sizeAnimationUsingKeyFrames">current <see cref="SizeAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current sizeAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType sizeAnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, SizeAnimationUsingKeyFrames
        {
            sizeAnimationUsingKeyFrames.IsCumulative = isCumulative;
            return sizeAnimationUsingKeyFrames;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="SplineByteKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineByteKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineByteKeyFrame.KeySpline"/> property of the current <see cref="SplineByteKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineByteKeyFrame</typeparam>                                                                       
        /// <param name=" splineByteKeyFrame">current <see cref="SplineByteKeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineByteKeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineByteKeyFrame, KeySpline keySpline) where TType : notnull, SplineByteKeyFrame
        {
            splineByteKeyFrame.KeySpline = keySpline;
            return splineByteKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplineColorKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineColorKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineColorKeyFrame.KeySpline"/> property of the current <see cref="SplineColorKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineColorKeyFrame</typeparam>                                                                       
        /// <param name=" splineColorKeyFrame">current <see cref="SplineColorKeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineColorKeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineColorKeyFrame, KeySpline keySpline) where TType : notnull, SplineColorKeyFrame
        {
            splineColorKeyFrame.KeySpline = keySpline;
            return splineColorKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplineDecimalKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineDecimalKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineDecimalKeyFrame.KeySpline"/> property of the current <see cref="SplineDecimalKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineDecimalKeyFrame</typeparam>                                                                       
        /// <param name=" splineDecimalKeyFrame">current <see cref="SplineDecimalKeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineDecimalKeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineDecimalKeyFrame, KeySpline keySpline) where TType : notnull, SplineDecimalKeyFrame
        {
            splineDecimalKeyFrame.KeySpline = keySpline;
            return splineDecimalKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplineDoubleKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineDoubleKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineDoubleKeyFrame.KeySpline"/> property of the current <see cref="SplineDoubleKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineDoubleKeyFrame</typeparam>                                                                       
        /// <param name=" splineDoubleKeyFrame">current <see cref="SplineDoubleKeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineDoubleKeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineDoubleKeyFrame, KeySpline keySpline) where TType : notnull, SplineDoubleKeyFrame
        {
            splineDoubleKeyFrame.KeySpline = keySpline;
            return splineDoubleKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplineInt16KeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineInt16KeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineInt16KeyFrame.KeySpline"/> property of the current <see cref="SplineInt16KeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineInt16KeyFrame</typeparam>                                                                       
        /// <param name=" splineInt16KeyFrame">current <see cref="SplineInt16KeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineInt16KeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineInt16KeyFrame, KeySpline keySpline) where TType : notnull, SplineInt16KeyFrame
        {
            splineInt16KeyFrame.KeySpline = keySpline;
            return splineInt16KeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplineInt32KeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineInt32KeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineInt32KeyFrame.KeySpline"/> property of the current <see cref="SplineInt32KeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineInt32KeyFrame</typeparam>                                                                       
        /// <param name=" splineInt32KeyFrame">current <see cref="SplineInt32KeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineInt32KeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineInt32KeyFrame, KeySpline keySpline) where TType : notnull, SplineInt32KeyFrame
        {
            splineInt32KeyFrame.KeySpline = keySpline;
            return splineInt32KeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplineInt64KeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineInt64KeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineInt64KeyFrame.KeySpline"/> property of the current <see cref="SplineInt64KeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineInt64KeyFrame</typeparam>                                                                       
        /// <param name=" splineInt64KeyFrame">current <see cref="SplineInt64KeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineInt64KeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineInt64KeyFrame, KeySpline keySpline) where TType : notnull, SplineInt64KeyFrame
        {
            splineInt64KeyFrame.KeySpline = keySpline;
            return splineInt64KeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplinePointKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplinePointKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplinePointKeyFrame.KeySpline"/> property of the current <see cref="SplinePointKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplinePointKeyFrame</typeparam>                                                                       
        /// <param name=" splinePointKeyFrame">current <see cref="SplinePointKeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splinePointKeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splinePointKeyFrame, KeySpline keySpline) where TType : notnull, SplinePointKeyFrame
        {
            splinePointKeyFrame.KeySpline = keySpline;
            return splinePointKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplinePoint3DKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplinePoint3DKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplinePoint3DKeyFrame.KeySpline"/> property of the current <see cref="SplinePoint3DKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplinePoint3DKeyFrame</typeparam>                                                                       
        /// <param name=" splinePoint3DKeyFrame">current <see cref="SplinePoint3DKeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splinePoint3DKeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splinePoint3DKeyFrame, KeySpline keySpline) where TType : notnull, SplinePoint3DKeyFrame
        {
            splinePoint3DKeyFrame.KeySpline = keySpline;
            return splinePoint3DKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplineRotation3DKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineRotation3DKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineRotation3DKeyFrame.KeySpline"/> property of the current <see cref="SplineRotation3DKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineRotation3DKeyFrame</typeparam>                                                                       
        /// <param name=" splineRotation3DKeyFrame">current <see cref="SplineRotation3DKeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineRotation3DKeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineRotation3DKeyFrame, KeySpline keySpline) where TType : notnull, SplineRotation3DKeyFrame
        {
            splineRotation3DKeyFrame.KeySpline = keySpline;
            return splineRotation3DKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplineRectKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineRectKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineRectKeyFrame.KeySpline"/> property of the current <see cref="SplineRectKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineRectKeyFrame</typeparam>                                                                       
        /// <param name=" splineRectKeyFrame">current <see cref="SplineRectKeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineRectKeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineRectKeyFrame, KeySpline keySpline) where TType : notnull, SplineRectKeyFrame
        {
            splineRectKeyFrame.KeySpline = keySpline;
            return splineRectKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplineSingleKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineSingleKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineSingleKeyFrame.KeySpline"/> property of the current <see cref="SplineSingleKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineSingleKeyFrame</typeparam>                                                                       
        /// <param name=" splineSingleKeyFrame">current <see cref="SplineSingleKeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineSingleKeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineSingleKeyFrame, KeySpline keySpline) where TType : notnull, SplineSingleKeyFrame
        {
            splineSingleKeyFrame.KeySpline = keySpline;
            return splineSingleKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplineSizeKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineSizeKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineSizeKeyFrame.KeySpline"/> property of the current <see cref="SplineSizeKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineSizeKeyFrame</typeparam>                                                                       
        /// <param name=" splineSizeKeyFrame">current <see cref="SplineSizeKeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineSizeKeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineSizeKeyFrame, KeySpline keySpline) where TType : notnull, SplineSizeKeyFrame
        {
            splineSizeKeyFrame.KeySpline = keySpline;
            return splineSizeKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplineVectorKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineVectorKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineVectorKeyFrame.KeySpline"/> property of the current <see cref="SplineVectorKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineVectorKeyFrame</typeparam>                                                                       
        /// <param name=" splineVectorKeyFrame">current <see cref="SplineVectorKeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineVectorKeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineVectorKeyFrame, KeySpline keySpline) where TType : notnull, SplineVectorKeyFrame
        {
            splineVectorKeyFrame.KeySpline = keySpline;
            return splineVectorKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="SplineVector3DKeyFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class SplineVector3DKeyFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="SplineVector3DKeyFrame.KeySpline"/> property of the current <see cref="SplineVector3DKeyFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">SplineVector3DKeyFrame</typeparam>                                                                       
        /// <param name=" splineVector3DKeyFrame">current <see cref="SplineVector3DKeyFrame"/></param>                                                          
        /// <param name="keySpline">keySpline value</param>                                                                            
        /// <returns>current splineVector3DKeyFrame</returns>                                                                                    
        public static TType KeySpline<TType>(this TType splineVector3DKeyFrame, KeySpline keySpline) where TType : notnull, SplineVector3DKeyFrame
        {
            splineVector3DKeyFrame.KeySpline = keySpline;
            return splineVector3DKeyFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="StringAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class StringAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="StringAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="StringAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">StringAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" stringAnimationUsingKeyFrames">current <see cref="StringAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current stringAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType stringAnimationUsingKeyFrames, StringKeyFrameCollection keyFrames) where TType : notnull, StringAnimationUsingKeyFrames
        {
            stringAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return stringAnimationUsingKeyFrames;
        }
    }
  
    /// <summary>                                                                                                                    
    /// <see cref="Vector3DAnimation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Vector3DAnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Vector3DAnimation.From"/> property of the current <see cref="Vector3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Vector3DAnimation</typeparam>                                                                       
        /// <param name=" vector3DAnimation">current <see cref="Vector3DAnimation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current vector3DAnimation</returns>                                                                                    
        public static TType From<TType>(this TType vector3DAnimation, Nullable<Vector3D> from) where TType : notnull, Vector3DAnimation
        {
            vector3DAnimation.From = from;
            return vector3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Vector3DAnimation.To"/> property of the current <see cref="Vector3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Vector3DAnimation</typeparam>                                                                       
        /// <param name=" vector3DAnimation">current <see cref="Vector3DAnimation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current vector3DAnimation</returns>                                                                                    
        public static TType To<TType>(this TType vector3DAnimation, Nullable<Vector3D> to) where TType : notnull, Vector3DAnimation
        {
            vector3DAnimation.To = to;
            return vector3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Vector3DAnimation.By"/> property of the current <see cref="Vector3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Vector3DAnimation</typeparam>                                                                       
        /// <param name=" vector3DAnimation">current <see cref="Vector3DAnimation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current vector3DAnimation</returns>                                                                                    
        public static TType By<TType>(this TType vector3DAnimation, Nullable<Vector3D> by) where TType : notnull, Vector3DAnimation
        {
            vector3DAnimation.By = by;
            return vector3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Vector3DAnimation.EasingFunction"/> property of the current <see cref="Vector3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Vector3DAnimation</typeparam>                                                                       
        /// <param name=" vector3DAnimation">current <see cref="Vector3DAnimation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current vector3DAnimation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType vector3DAnimation, IEasingFunction easingFunction) where TType : notnull, Vector3DAnimation
        {
            vector3DAnimation.EasingFunction = easingFunction;
            return vector3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Vector3DAnimation.IsAdditive"/> property of the current <see cref="Vector3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Vector3DAnimation</typeparam>                                                                       
        /// <param name=" vector3DAnimation">current <see cref="Vector3DAnimation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current vector3DAnimation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType vector3DAnimation, Boolean isAdditive) where TType : notnull, Vector3DAnimation
        {
            vector3DAnimation.IsAdditive = isAdditive;
            return vector3DAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Vector3DAnimation.IsCumulative"/> property of the current <see cref="Vector3DAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Vector3DAnimation</typeparam>                                                                       
        /// <param name=" vector3DAnimation">current <see cref="Vector3DAnimation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current vector3DAnimation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType vector3DAnimation, Boolean isCumulative) where TType : notnull, Vector3DAnimation
        {
            vector3DAnimation.IsCumulative = isCumulative;
            return vector3DAnimation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="Vector3DAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class Vector3DAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="Vector3DAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="Vector3DAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Vector3DAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" vector3DAnimationUsingKeyFrames">current <see cref="Vector3DAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current vector3DAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType vector3DAnimationUsingKeyFrames, Vector3DKeyFrameCollection keyFrames) where TType : notnull, Vector3DAnimationUsingKeyFrames
        {
            vector3DAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return vector3DAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Vector3DAnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="Vector3DAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Vector3DAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" vector3DAnimationUsingKeyFrames">current <see cref="Vector3DAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current vector3DAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType vector3DAnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, Vector3DAnimationUsingKeyFrames
        {
            vector3DAnimationUsingKeyFrames.IsAdditive = isAdditive;
            return vector3DAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="Vector3DAnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="Vector3DAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">Vector3DAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" vector3DAnimationUsingKeyFrames">current <see cref="Vector3DAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current vector3DAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType vector3DAnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, Vector3DAnimationUsingKeyFrames
        {
            vector3DAnimationUsingKeyFrames.IsCumulative = isCumulative;
            return vector3DAnimationUsingKeyFrames;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="VectorAnimation"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class VectorAnimationFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="VectorAnimation.From"/> property of the current <see cref="VectorAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VectorAnimation</typeparam>                                                                       
        /// <param name=" vectorAnimation">current <see cref="VectorAnimation"/></param>                                                          
        /// <param name="from">from value</param>                                                                            
        /// <returns>current vectorAnimation</returns>                                                                                    
        public static TType From<TType>(this TType vectorAnimation, Nullable<Vector> from) where TType : notnull, VectorAnimation
        {
            vectorAnimation.From = from;
            return vectorAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VectorAnimation.To"/> property of the current <see cref="VectorAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VectorAnimation</typeparam>                                                                       
        /// <param name=" vectorAnimation">current <see cref="VectorAnimation"/></param>                                                          
        /// <param name="to">to value</param>                                                                            
        /// <returns>current vectorAnimation</returns>                                                                                    
        public static TType To<TType>(this TType vectorAnimation, Nullable<Vector> to) where TType : notnull, VectorAnimation
        {
            vectorAnimation.To = to;
            return vectorAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VectorAnimation.By"/> property of the current <see cref="VectorAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VectorAnimation</typeparam>                                                                       
        /// <param name=" vectorAnimation">current <see cref="VectorAnimation"/></param>                                                          
        /// <param name="by">by value</param>                                                                            
        /// <returns>current vectorAnimation</returns>                                                                                    
        public static TType By<TType>(this TType vectorAnimation, Nullable<Vector> by) where TType : notnull, VectorAnimation
        {
            vectorAnimation.By = by;
            return vectorAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VectorAnimation.EasingFunction"/> property of the current <see cref="VectorAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VectorAnimation</typeparam>                                                                       
        /// <param name=" vectorAnimation">current <see cref="VectorAnimation"/></param>                                                          
        /// <param name="easingFunction">easingFunction value</param>                                                                            
        /// <returns>current vectorAnimation</returns>                                                                                    
        public static TType EasingFunction<TType>(this TType vectorAnimation, IEasingFunction easingFunction) where TType : notnull, VectorAnimation
        {
            vectorAnimation.EasingFunction = easingFunction;
            return vectorAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VectorAnimation.IsAdditive"/> property of the current <see cref="VectorAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VectorAnimation</typeparam>                                                                       
        /// <param name=" vectorAnimation">current <see cref="VectorAnimation"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current vectorAnimation</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType vectorAnimation, Boolean isAdditive) where TType : notnull, VectorAnimation
        {
            vectorAnimation.IsAdditive = isAdditive;
            return vectorAnimation;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VectorAnimation.IsCumulative"/> property of the current <see cref="VectorAnimation"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VectorAnimation</typeparam>                                                                       
        /// <param name=" vectorAnimation">current <see cref="VectorAnimation"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current vectorAnimation</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType vectorAnimation, Boolean isCumulative) where TType : notnull, VectorAnimation
        {
            vectorAnimation.IsCumulative = isCumulative;
            return vectorAnimation;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="VectorAnimationUsingKeyFrames"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class VectorAnimationUsingKeyFramesFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="VectorAnimationUsingKeyFrames.KeyFrames"/> property of the current <see cref="VectorAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VectorAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" vectorAnimationUsingKeyFrames">current <see cref="VectorAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="keyFrames">keyFrames value</param>                                                                            
        /// <returns>current vectorAnimationUsingKeyFrames</returns>                                                                                    
        public static TType KeyFrames<TType>(this TType vectorAnimationUsingKeyFrames, VectorKeyFrameCollection keyFrames) where TType : notnull, VectorAnimationUsingKeyFrames
        {
            vectorAnimationUsingKeyFrames.KeyFrames = keyFrames;
            return vectorAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VectorAnimationUsingKeyFrames.IsAdditive"/> property of the current <see cref="VectorAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VectorAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" vectorAnimationUsingKeyFrames">current <see cref="VectorAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isAdditive">isAdditive value</param>                                                                            
        /// <returns>current vectorAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsAdditive<TType>(this TType vectorAnimationUsingKeyFrames, Boolean isAdditive) where TType : notnull, VectorAnimationUsingKeyFrames
        {
            vectorAnimationUsingKeyFrames.IsAdditive = isAdditive;
            return vectorAnimationUsingKeyFrames;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="VectorAnimationUsingKeyFrames.IsCumulative"/> property of the current <see cref="VectorAnimationUsingKeyFrames"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">VectorAnimationUsingKeyFrames</typeparam>                                                                       
        /// <param name=" vectorAnimationUsingKeyFrames">current <see cref="VectorAnimationUsingKeyFrames"/></param>                                                          
        /// <param name="isCumulative">isCumulative value</param>                                                                            
        /// <returns>current vectorAnimationUsingKeyFrames</returns>                                                                                    
        public static TType IsCumulative<TType>(this TType vectorAnimationUsingKeyFrames, Boolean isCumulative) where TType : notnull, VectorAnimationUsingKeyFrames
        {
            vectorAnimationUsingKeyFrames.IsCumulative = isCumulative;
            return vectorAnimationUsingKeyFrames;
        }
    }
   
    /// <summary>                                                                                                                    
    /// <see cref="BitmapFrame"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BitmapFrameFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapFrame.BaseUri"/> property of the current <see cref="BitmapFrame"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BitmapFrame</typeparam>                                                                       
        /// <param name=" bitmapFrame">current <see cref="BitmapFrame"/></param>                                                          
        /// <param name="baseUri">baseUri value</param>                                                                            
        /// <returns>current bitmapFrame</returns>                                                                                    
        public static TType BaseUri<TType>(this TType bitmapFrame, Uri baseUri) where TType : notnull, BitmapFrame
        {
            bitmapFrame.BaseUri = baseUri;
            return bitmapFrame;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BitmapImage"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BitmapImageFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapImage.BaseUri"/> property of the current <see cref="BitmapImage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapImage">current <see cref="BitmapImage"/></param>                                                          
        /// <param name="baseUri">baseUri value</param>                                                                            
        /// <returns>current bitmapImage</returns>                                                                                    
        public static BitmapImage BaseUri(this BitmapImage bitmapImage, Uri baseUri)
        {
            bitmapImage.BaseUri = baseUri;
            return bitmapImage;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapImage.UriCachePolicy"/> property of the current <see cref="BitmapImage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapImage">current <see cref="BitmapImage"/></param>                                                          
        /// <param name="uriCachePolicy">uriCachePolicy value</param>                                                                            
        /// <returns>current bitmapImage</returns>                                                                                    
        public static BitmapImage UriCachePolicy(this BitmapImage bitmapImage, RequestCachePolicy uriCachePolicy)
        {
            bitmapImage.UriCachePolicy = uriCachePolicy;
            return bitmapImage;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapImage.UriSource"/> property of the current <see cref="BitmapImage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapImage">current <see cref="BitmapImage"/></param>                                                          
        /// <param name="uriSource">uriSource value</param>                                                                            
        /// <returns>current bitmapImage</returns>                                                                                    
        public static BitmapImage UriSource(this BitmapImage bitmapImage, Uri uriSource)
        {
            bitmapImage.UriSource = uriSource;
            return bitmapImage;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapImage.StreamSource"/> property of the current <see cref="BitmapImage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapImage">current <see cref="BitmapImage"/></param>                                                          
        /// <param name="streamSource">streamSource value</param>                                                                            
        /// <returns>current bitmapImage</returns>                                                                                    
        public static BitmapImage StreamSource(this BitmapImage bitmapImage, Stream streamSource)
        {
            bitmapImage.StreamSource = streamSource;
            return bitmapImage;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapImage.DecodePixelWidth"/> property of the current <see cref="BitmapImage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapImage">current <see cref="BitmapImage"/></param>                                                          
        /// <param name="decodePixelWidth">decodePixelWidth value</param>                                                                            
        /// <returns>current bitmapImage</returns>                                                                                    
        public static BitmapImage DecodePixelWidth(this BitmapImage bitmapImage, Int32 decodePixelWidth)
        {
            bitmapImage.DecodePixelWidth = decodePixelWidth;
            return bitmapImage;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapImage.DecodePixelHeight"/> property of the current <see cref="BitmapImage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapImage">current <see cref="BitmapImage"/></param>                                                          
        /// <param name="decodePixelHeight">decodePixelHeight value</param>                                                                            
        /// <returns>current bitmapImage</returns>                                                                                    
        public static BitmapImage DecodePixelHeight(this BitmapImage bitmapImage, Int32 decodePixelHeight)
        {
            bitmapImage.DecodePixelHeight = decodePixelHeight;
            return bitmapImage;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapImage.Rotation"/> property of the current <see cref="BitmapImage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapImage">current <see cref="BitmapImage"/></param>                                                          
        /// <param name="rotation">rotation value</param>                                                                            
        /// <returns>current bitmapImage</returns>                                                                                    
        public static BitmapImage Rotation(this BitmapImage bitmapImage, Rotation rotation)
        {
            bitmapImage.Rotation = rotation;
            return bitmapImage;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapImage.SourceRect"/> property of the current <see cref="BitmapImage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapImage">current <see cref="BitmapImage"/></param>                                                          
        /// <param name="sourceRect">sourceRect value</param>                                                                            
        /// <returns>current bitmapImage</returns>                                                                                    
        public static BitmapImage SourceRect(this BitmapImage bitmapImage, Int32Rect sourceRect)
        {
            bitmapImage.SourceRect = sourceRect;
            return bitmapImage;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapImage.CreateOptions"/> property of the current <see cref="BitmapImage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapImage">current <see cref="BitmapImage"/></param>                                                          
        /// <param name="createOptions">createOptions value</param>                                                                            
        /// <returns>current bitmapImage</returns>                                                                                    
        public static BitmapImage CreateOptions(this BitmapImage bitmapImage, BitmapCreateOptions createOptions)
        {
            bitmapImage.CreateOptions = createOptions;
            return bitmapImage;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapImage.CacheOption"/> property of the current <see cref="BitmapImage"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapImage">current <see cref="BitmapImage"/></param>                                                          
        /// <param name="cacheOption">cacheOption value</param>                                                                            
        /// <returns>current bitmapImage</returns>                                                                                    
        public static BitmapImage CacheOption(this BitmapImage bitmapImage, BitmapCacheOption cacheOption)
        {
            bitmapImage.CacheOption = cacheOption;
            return bitmapImage;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BitmapMetadata"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BitmapMetadataFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapMetadata.Author"/> property of the current <see cref="BitmapMetadata"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BitmapMetadata</typeparam>                                                                       
        /// <param name=" bitmapMetadata">current <see cref="BitmapMetadata"/></param>                                                          
        /// <param name="author">author value</param>                                                                            
        /// <returns>current bitmapMetadata</returns>                                                                                    
        public static TType Author<TType>(this TType bitmapMetadata, ReadOnlyCollection<String> author) where TType : notnull, BitmapMetadata
        {
            bitmapMetadata.Author = author;
            return bitmapMetadata;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapMetadata.Title"/> property of the current <see cref="BitmapMetadata"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BitmapMetadata</typeparam>                                                                       
        /// <param name=" bitmapMetadata">current <see cref="BitmapMetadata"/></param>                                                          
        /// <param name="title">title value</param>                                                                            
        /// <returns>current bitmapMetadata</returns>                                                                                    
        public static TType Title<TType>(this TType bitmapMetadata, String title) where TType : notnull, BitmapMetadata
        {
            bitmapMetadata.Title = title;
            return bitmapMetadata;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapMetadata.Rating"/> property of the current <see cref="BitmapMetadata"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BitmapMetadata</typeparam>                                                                       
        /// <param name=" bitmapMetadata">current <see cref="BitmapMetadata"/></param>                                                          
        /// <param name="rating">rating value</param>                                                                            
        /// <returns>current bitmapMetadata</returns>                                                                                    
        public static TType Rating<TType>(this TType bitmapMetadata, Int32 rating) where TType : notnull, BitmapMetadata
        {
            bitmapMetadata.Rating = rating;
            return bitmapMetadata;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapMetadata.Subject"/> property of the current <see cref="BitmapMetadata"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BitmapMetadata</typeparam>                                                                       
        /// <param name=" bitmapMetadata">current <see cref="BitmapMetadata"/></param>                                                          
        /// <param name="subject">subject value</param>                                                                            
        /// <returns>current bitmapMetadata</returns>                                                                                    
        public static TType Subject<TType>(this TType bitmapMetadata, String subject) where TType : notnull, BitmapMetadata
        {
            bitmapMetadata.Subject = subject;
            return bitmapMetadata;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapMetadata.Comment"/> property of the current <see cref="BitmapMetadata"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BitmapMetadata</typeparam>                                                                       
        /// <param name=" bitmapMetadata">current <see cref="BitmapMetadata"/></param>                                                          
        /// <param name="comment">comment value</param>                                                                            
        /// <returns>current bitmapMetadata</returns>                                                                                    
        public static TType Comment<TType>(this TType bitmapMetadata, String comment) where TType : notnull, BitmapMetadata
        {
            bitmapMetadata.Comment = comment;
            return bitmapMetadata;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapMetadata.DateTaken"/> property of the current <see cref="BitmapMetadata"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BitmapMetadata</typeparam>                                                                       
        /// <param name=" bitmapMetadata">current <see cref="BitmapMetadata"/></param>                                                          
        /// <param name="dateTaken">dateTaken value</param>                                                                            
        /// <returns>current bitmapMetadata</returns>                                                                                    
        public static TType DateTaken<TType>(this TType bitmapMetadata, String dateTaken) where TType : notnull, BitmapMetadata
        {
            bitmapMetadata.DateTaken = dateTaken;
            return bitmapMetadata;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapMetadata.ApplicationName"/> property of the current <see cref="BitmapMetadata"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BitmapMetadata</typeparam>                                                                       
        /// <param name=" bitmapMetadata">current <see cref="BitmapMetadata"/></param>                                                          
        /// <param name="applicationName">applicationName value</param>                                                                            
        /// <returns>current bitmapMetadata</returns>                                                                                    
        public static TType ApplicationName<TType>(this TType bitmapMetadata, String applicationName) where TType : notnull, BitmapMetadata
        {
            bitmapMetadata.ApplicationName = applicationName;
            return bitmapMetadata;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapMetadata.Copyright"/> property of the current <see cref="BitmapMetadata"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BitmapMetadata</typeparam>                                                                       
        /// <param name=" bitmapMetadata">current <see cref="BitmapMetadata"/></param>                                                          
        /// <param name="copyright">copyright value</param>                                                                            
        /// <returns>current bitmapMetadata</returns>                                                                                    
        public static TType Copyright<TType>(this TType bitmapMetadata, String copyright) where TType : notnull, BitmapMetadata
        {
            bitmapMetadata.Copyright = copyright;
            return bitmapMetadata;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapMetadata.CameraManufacturer"/> property of the current <see cref="BitmapMetadata"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BitmapMetadata</typeparam>                                                                       
        /// <param name=" bitmapMetadata">current <see cref="BitmapMetadata"/></param>                                                          
        /// <param name="cameraManufacturer">cameraManufacturer value</param>                                                                            
        /// <returns>current bitmapMetadata</returns>                                                                                    
        public static TType CameraManufacturer<TType>(this TType bitmapMetadata, String cameraManufacturer) where TType : notnull, BitmapMetadata
        {
            bitmapMetadata.CameraManufacturer = cameraManufacturer;
            return bitmapMetadata;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapMetadata.CameraModel"/> property of the current <see cref="BitmapMetadata"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BitmapMetadata</typeparam>                                                                       
        /// <param name=" bitmapMetadata">current <see cref="BitmapMetadata"/></param>                                                          
        /// <param name="cameraModel">cameraModel value</param>                                                                            
        /// <returns>current bitmapMetadata</returns>                                                                                    
        public static TType CameraModel<TType>(this TType bitmapMetadata, String cameraModel) where TType : notnull, BitmapMetadata
        {
            bitmapMetadata.CameraModel = cameraModel;
            return bitmapMetadata;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapMetadata.Keywords"/> property of the current <see cref="BitmapMetadata"/>                                 
        /// </summary>                                                                                                               
        /// <typeparam name="TType">BitmapMetadata</typeparam>                                                                       
        /// <param name=" bitmapMetadata">current <see cref="BitmapMetadata"/></param>                                                          
        /// <param name="keywords">keywords value</param>                                                                            
        /// <returns>current bitmapMetadata</returns>                                                                                    
        public static TType Keywords<TType>(this TType bitmapMetadata, ReadOnlyCollection<String> keywords) where TType : notnull, BitmapMetadata
        {
            bitmapMetadata.Keywords = keywords;
            return bitmapMetadata;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="ColorConvertedBitmap"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class ColorConvertedBitmapFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorConvertedBitmap.Source"/> property of the current <see cref="ColorConvertedBitmap"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" colorConvertedBitmap">current <see cref="ColorConvertedBitmap"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current colorConvertedBitmap</returns>                                                                                    
        public static ColorConvertedBitmap Source(this ColorConvertedBitmap colorConvertedBitmap, BitmapSource source)
        {
            colorConvertedBitmap.Source = source;
            return colorConvertedBitmap;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorConvertedBitmap.SourceColorContext"/> property of the current <see cref="ColorConvertedBitmap"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" colorConvertedBitmap">current <see cref="ColorConvertedBitmap"/></param>                                                          
        /// <param name="sourceColorContext">sourceColorContext value</param>                                                                            
        /// <returns>current colorConvertedBitmap</returns>                                                                                    
        public static ColorConvertedBitmap SourceColorContext(this ColorConvertedBitmap colorConvertedBitmap, ColorContext sourceColorContext)
        {
            colorConvertedBitmap.SourceColorContext = sourceColorContext;
            return colorConvertedBitmap;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorConvertedBitmap.DestinationColorContext"/> property of the current <see cref="ColorConvertedBitmap"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" colorConvertedBitmap">current <see cref="ColorConvertedBitmap"/></param>                                                          
        /// <param name="destinationColorContext">destinationColorContext value</param>                                                                            
        /// <returns>current colorConvertedBitmap</returns>                                                                                    
        public static ColorConvertedBitmap DestinationColorContext(this ColorConvertedBitmap colorConvertedBitmap, ColorContext destinationColorContext)
        {
            colorConvertedBitmap.DestinationColorContext = destinationColorContext;
            return colorConvertedBitmap;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="ColorConvertedBitmap.DestinationFormat"/> property of the current <see cref="ColorConvertedBitmap"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" colorConvertedBitmap">current <see cref="ColorConvertedBitmap"/></param>                                                          
        /// <param name="destinationFormat">destinationFormat value</param>                                                                            
        /// <returns>current colorConvertedBitmap</returns>                                                                                    
        public static ColorConvertedBitmap DestinationFormat(this ColorConvertedBitmap colorConvertedBitmap, PixelFormat destinationFormat)
        {
            colorConvertedBitmap.DestinationFormat = destinationFormat;
            return colorConvertedBitmap;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="CroppedBitmap"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class CroppedBitmapFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="CroppedBitmap.Source"/> property of the current <see cref="CroppedBitmap"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" croppedBitmap">current <see cref="CroppedBitmap"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current croppedBitmap</returns>                                                                                    
        public static CroppedBitmap Source(this CroppedBitmap croppedBitmap, BitmapSource source)
        {
            croppedBitmap.Source = source;
            return croppedBitmap;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="CroppedBitmap.SourceRect"/> property of the current <see cref="CroppedBitmap"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" croppedBitmap">current <see cref="CroppedBitmap"/></param>                                                          
        /// <param name="sourceRect">sourceRect value</param>                                                                            
        /// <returns>current croppedBitmap</returns>                                                                                    
        public static CroppedBitmap SourceRect(this CroppedBitmap croppedBitmap, Int32Rect sourceRect)
        {
            croppedBitmap.SourceRect = sourceRect;
            return croppedBitmap;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="FormatConvertedBitmap"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class FormatConvertedBitmapFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="FormatConvertedBitmap.Source"/> property of the current <see cref="FormatConvertedBitmap"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" formatConvertedBitmap">current <see cref="FormatConvertedBitmap"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current formatConvertedBitmap</returns>                                                                                    
        public static FormatConvertedBitmap Source(this FormatConvertedBitmap formatConvertedBitmap, BitmapSource source)
        {
            formatConvertedBitmap.Source = source;
            return formatConvertedBitmap;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FormatConvertedBitmap.DestinationFormat"/> property of the current <see cref="FormatConvertedBitmap"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" formatConvertedBitmap">current <see cref="FormatConvertedBitmap"/></param>                                                          
        /// <param name="destinationFormat">destinationFormat value</param>                                                                            
        /// <returns>current formatConvertedBitmap</returns>                                                                                    
        public static FormatConvertedBitmap DestinationFormat(this FormatConvertedBitmap formatConvertedBitmap, PixelFormat destinationFormat)
        {
            formatConvertedBitmap.DestinationFormat = destinationFormat;
            return formatConvertedBitmap;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FormatConvertedBitmap.DestinationPalette"/> property of the current <see cref="FormatConvertedBitmap"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" formatConvertedBitmap">current <see cref="FormatConvertedBitmap"/></param>                                                          
        /// <param name="destinationPalette">destinationPalette value</param>                                                                            
        /// <returns>current formatConvertedBitmap</returns>                                                                                    
        public static FormatConvertedBitmap DestinationPalette(this FormatConvertedBitmap formatConvertedBitmap, BitmapPalette destinationPalette)
        {
            formatConvertedBitmap.DestinationPalette = destinationPalette;
            return formatConvertedBitmap;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="FormatConvertedBitmap.AlphaThreshold"/> property of the current <see cref="FormatConvertedBitmap"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" formatConvertedBitmap">current <see cref="FormatConvertedBitmap"/></param>                                                          
        /// <param name="alphaThreshold">alphaThreshold value</param>                                                                            
        /// <returns>current formatConvertedBitmap</returns>                                                                                    
        public static FormatConvertedBitmap AlphaThreshold(this FormatConvertedBitmap formatConvertedBitmap, Double alphaThreshold)
        {
            formatConvertedBitmap.AlphaThreshold = alphaThreshold;
            return formatConvertedBitmap;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="TransformedBitmap"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class TransformedBitmapFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="TransformedBitmap.Source"/> property of the current <see cref="TransformedBitmap"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" transformedBitmap">current <see cref="TransformedBitmap"/></param>                                                          
        /// <param name="source">source value</param>                                                                            
        /// <returns>current transformedBitmap</returns>                                                                                    
        public static TransformedBitmap Source(this TransformedBitmap transformedBitmap, BitmapSource source)
        {
            transformedBitmap.Source = source;
            return transformedBitmap;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="TransformedBitmap.Transform"/> property of the current <see cref="TransformedBitmap"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" transformedBitmap">current <see cref="TransformedBitmap"/></param>                                                          
        /// <param name="transform">transform value</param>                                                                            
        /// <returns>current transformedBitmap</returns>                                                                                    
        public static TransformedBitmap Transform(this TransformedBitmap transformedBitmap, Transform transform)
        {
            transformedBitmap.Transform = transform;
            return transformedBitmap;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BevelBitmapEffect"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BevelBitmapEffectFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BevelBitmapEffect.BevelWidth"/> property of the current <see cref="BevelBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bevelBitmapEffect">current <see cref="BevelBitmapEffect"/></param>                                                          
        /// <param name="bevelWidth">bevelWidth value</param>                                                                            
        /// <returns>current bevelBitmapEffect</returns>                                                                                    
        public static BevelBitmapEffect BevelWidth(this BevelBitmapEffect bevelBitmapEffect, Double bevelWidth)
        {
            bevelBitmapEffect.BevelWidth = bevelWidth;
            return bevelBitmapEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BevelBitmapEffect.Relief"/> property of the current <see cref="BevelBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bevelBitmapEffect">current <see cref="BevelBitmapEffect"/></param>                                                          
        /// <param name="relief">relief value</param>                                                                            
        /// <returns>current bevelBitmapEffect</returns>                                                                                    
        public static BevelBitmapEffect Relief(this BevelBitmapEffect bevelBitmapEffect, Double relief)
        {
            bevelBitmapEffect.Relief = relief;
            return bevelBitmapEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BevelBitmapEffect.LightAngle"/> property of the current <see cref="BevelBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bevelBitmapEffect">current <see cref="BevelBitmapEffect"/></param>                                                          
        /// <param name="lightAngle">lightAngle value</param>                                                                            
        /// <returns>current bevelBitmapEffect</returns>                                                                                    
        public static BevelBitmapEffect LightAngle(this BevelBitmapEffect bevelBitmapEffect, Double lightAngle)
        {
            bevelBitmapEffect.LightAngle = lightAngle;
            return bevelBitmapEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BevelBitmapEffect.Smoothness"/> property of the current <see cref="BevelBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bevelBitmapEffect">current <see cref="BevelBitmapEffect"/></param>                                                          
        /// <param name="smoothness">smoothness value</param>                                                                            
        /// <returns>current bevelBitmapEffect</returns>                                                                                    
        public static BevelBitmapEffect Smoothness(this BevelBitmapEffect bevelBitmapEffect, Double smoothness)
        {
            bevelBitmapEffect.Smoothness = smoothness;
            return bevelBitmapEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BevelBitmapEffect.EdgeProfile"/> property of the current <see cref="BevelBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bevelBitmapEffect">current <see cref="BevelBitmapEffect"/></param>                                                          
        /// <param name="edgeProfile">edgeProfile value</param>                                                                            
        /// <returns>current bevelBitmapEffect</returns>                                                                                    
        public static BevelBitmapEffect EdgeProfile(this BevelBitmapEffect bevelBitmapEffect, EdgeProfile edgeProfile)
        {
            bevelBitmapEffect.EdgeProfile = edgeProfile;
            return bevelBitmapEffect;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BitmapEffectGroup"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BitmapEffectGroupFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapEffectGroup.Children"/> property of the current <see cref="BitmapEffectGroup"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapEffectGroup">current <see cref="BitmapEffectGroup"/></param>                                                          
        /// <param name="children">children value</param>                                                                            
        /// <returns>current bitmapEffectGroup</returns>                                                                                    
        public static BitmapEffectGroup Children(this BitmapEffectGroup bitmapEffectGroup, BitmapEffectCollection children)
        {
            bitmapEffectGroup.Children = children;
            return bitmapEffectGroup;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BitmapEffectInput"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BitmapEffectInputFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapEffectInput.Input"/> property of the current <see cref="BitmapEffectInput"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapEffectInput">current <see cref="BitmapEffectInput"/></param>                                                          
        /// <param name="input">input value</param>                                                                            
        /// <returns>current bitmapEffectInput</returns>                                                                                    
        public static BitmapEffectInput Input(this BitmapEffectInput bitmapEffectInput, BitmapSource input)
        {
            bitmapEffectInput.Input = input;
            return bitmapEffectInput;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapEffectInput.AreaToApplyEffectUnits"/> property of the current <see cref="BitmapEffectInput"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapEffectInput">current <see cref="BitmapEffectInput"/></param>                                                          
        /// <param name="areaToApplyEffectUnits">areaToApplyEffectUnits value</param>                                                                            
        /// <returns>current bitmapEffectInput</returns>                                                                                    
        public static BitmapEffectInput AreaToApplyEffectUnits(this BitmapEffectInput bitmapEffectInput, BrushMappingMode areaToApplyEffectUnits)
        {
            bitmapEffectInput.AreaToApplyEffectUnits = areaToApplyEffectUnits;
            return bitmapEffectInput;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BitmapEffectInput.AreaToApplyEffect"/> property of the current <see cref="BitmapEffectInput"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" bitmapEffectInput">current <see cref="BitmapEffectInput"/></param>                                                          
        /// <param name="areaToApplyEffect">areaToApplyEffect value</param>                                                                            
        /// <returns>current bitmapEffectInput</returns>                                                                                    
        public static BitmapEffectInput AreaToApplyEffect(this BitmapEffectInput bitmapEffectInput, Rect areaToApplyEffect)
        {
            bitmapEffectInput.AreaToApplyEffect = areaToApplyEffect;
            return bitmapEffectInput;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BlurBitmapEffect"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BlurBitmapEffectFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BlurBitmapEffect.Radius"/> property of the current <see cref="BlurBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" blurBitmapEffect">current <see cref="BlurBitmapEffect"/></param>                                                          
        /// <param name="radius">radius value</param>                                                                            
        /// <returns>current blurBitmapEffect</returns>                                                                                    
        public static BlurBitmapEffect Radius(this BlurBitmapEffect blurBitmapEffect, Double radius)
        {
            blurBitmapEffect.Radius = radius;
            return blurBitmapEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BlurBitmapEffect.KernelType"/> property of the current <see cref="BlurBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" blurBitmapEffect">current <see cref="BlurBitmapEffect"/></param>                                                          
        /// <param name="kernelType">kernelType value</param>                                                                            
        /// <returns>current blurBitmapEffect</returns>                                                                                    
        public static BlurBitmapEffect KernelType(this BlurBitmapEffect blurBitmapEffect, KernelType kernelType)
        {
            blurBitmapEffect.KernelType = kernelType;
            return blurBitmapEffect;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="BlurEffect"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class BlurEffectFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="BlurEffect.Radius"/> property of the current <see cref="BlurEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" blurEffect">current <see cref="BlurEffect"/></param>                                                          
        /// <param name="radius">radius value</param>                                                                            
        /// <returns>current blurEffect</returns>                                                                                    
        public static BlurEffect Radius(this BlurEffect blurEffect, Double radius)
        {
            blurEffect.Radius = radius;
            return blurEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BlurEffect.KernelType"/> property of the current <see cref="BlurEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" blurEffect">current <see cref="BlurEffect"/></param>                                                          
        /// <param name="kernelType">kernelType value</param>                                                                            
        /// <returns>current blurEffect</returns>                                                                                    
        public static BlurEffect KernelType(this BlurEffect blurEffect, KernelType kernelType)
        {
            blurEffect.KernelType = kernelType;
            return blurEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="BlurEffect.RenderingBias"/> property of the current <see cref="BlurEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" blurEffect">current <see cref="BlurEffect"/></param>                                                          
        /// <param name="renderingBias">renderingBias value</param>                                                                            
        /// <returns>current blurEffect</returns>                                                                                    
        public static BlurEffect RenderingBias(this BlurEffect blurEffect, RenderingBias renderingBias)
        {
            blurEffect.RenderingBias = renderingBias;
            return blurEffect;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DropShadowBitmapEffect"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DropShadowBitmapEffectFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DropShadowBitmapEffect.ShadowDepth"/> property of the current <see cref="DropShadowBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" dropShadowBitmapEffect">current <see cref="DropShadowBitmapEffect"/></param>                                                          
        /// <param name="shadowDepth">shadowDepth value</param>                                                                            
        /// <returns>current dropShadowBitmapEffect</returns>                                                                                    
        public static DropShadowBitmapEffect ShadowDepth(this DropShadowBitmapEffect dropShadowBitmapEffect, Double shadowDepth)
        {
            dropShadowBitmapEffect.ShadowDepth = shadowDepth;
            return dropShadowBitmapEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DropShadowBitmapEffect.Color"/> property of the current <see cref="DropShadowBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" dropShadowBitmapEffect">current <see cref="DropShadowBitmapEffect"/></param>                                                          
        /// <param name="color">color value</param>                                                                            
        /// <returns>current dropShadowBitmapEffect</returns>                                                                                    
        public static DropShadowBitmapEffect Color(this DropShadowBitmapEffect dropShadowBitmapEffect, Color color)
        {
            dropShadowBitmapEffect.Color = color;
            return dropShadowBitmapEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DropShadowBitmapEffect.Direction"/> property of the current <see cref="DropShadowBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" dropShadowBitmapEffect">current <see cref="DropShadowBitmapEffect"/></param>                                                          
        /// <param name="direction">direction value</param>                                                                            
        /// <returns>current dropShadowBitmapEffect</returns>                                                                                    
        public static DropShadowBitmapEffect Direction(this DropShadowBitmapEffect dropShadowBitmapEffect, Double direction)
        {
            dropShadowBitmapEffect.Direction = direction;
            return dropShadowBitmapEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DropShadowBitmapEffect.Noise"/> property of the current <see cref="DropShadowBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" dropShadowBitmapEffect">current <see cref="DropShadowBitmapEffect"/></param>                                                          
        /// <param name="noise">noise value</param>                                                                            
        /// <returns>current dropShadowBitmapEffect</returns>                                                                                    
        public static DropShadowBitmapEffect Noise(this DropShadowBitmapEffect dropShadowBitmapEffect, Double noise)
        {
            dropShadowBitmapEffect.Noise = noise;
            return dropShadowBitmapEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DropShadowBitmapEffect.Opacity"/> property of the current <see cref="DropShadowBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" dropShadowBitmapEffect">current <see cref="DropShadowBitmapEffect"/></param>                                                          
        /// <param name="opacity">opacity value</param>                                                                            
        /// <returns>current dropShadowBitmapEffect</returns>                                                                                    
        public static DropShadowBitmapEffect Opacity(this DropShadowBitmapEffect dropShadowBitmapEffect, Double opacity)
        {
            dropShadowBitmapEffect.Opacity = opacity;
            return dropShadowBitmapEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DropShadowBitmapEffect.Softness"/> property of the current <see cref="DropShadowBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" dropShadowBitmapEffect">current <see cref="DropShadowBitmapEffect"/></param>                                                          
        /// <param name="softness">softness value</param>                                                                            
        /// <returns>current dropShadowBitmapEffect</returns>                                                                                    
        public static DropShadowBitmapEffect Softness(this DropShadowBitmapEffect dropShadowBitmapEffect, Double softness)
        {
            dropShadowBitmapEffect.Softness = softness;
            return dropShadowBitmapEffect;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="DropShadowEffect"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class DropShadowEffectFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="DropShadowEffect.ShadowDepth"/> property of the current <see cref="DropShadowEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" dropShadowEffect">current <see cref="DropShadowEffect"/></param>                                                          
        /// <param name="shadowDepth">shadowDepth value</param>                                                                            
        /// <returns>current dropShadowEffect</returns>                                                                                    
        public static DropShadowEffect ShadowDepth(this DropShadowEffect dropShadowEffect, Double shadowDepth)
        {
            dropShadowEffect.ShadowDepth = shadowDepth;
            return dropShadowEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DropShadowEffect.Color"/> property of the current <see cref="DropShadowEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" dropShadowEffect">current <see cref="DropShadowEffect"/></param>                                                          
        /// <param name="color">color value</param>                                                                            
        /// <returns>current dropShadowEffect</returns>                                                                                    
        public static DropShadowEffect Color(this DropShadowEffect dropShadowEffect, Color color)
        {
            dropShadowEffect.Color = color;
            return dropShadowEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DropShadowEffect.Direction"/> property of the current <see cref="DropShadowEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" dropShadowEffect">current <see cref="DropShadowEffect"/></param>                                                          
        /// <param name="direction">direction value</param>                                                                            
        /// <returns>current dropShadowEffect</returns>                                                                                    
        public static DropShadowEffect Direction(this DropShadowEffect dropShadowEffect, Double direction)
        {
            dropShadowEffect.Direction = direction;
            return dropShadowEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DropShadowEffect.Opacity"/> property of the current <see cref="DropShadowEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" dropShadowEffect">current <see cref="DropShadowEffect"/></param>                                                          
        /// <param name="opacity">opacity value</param>                                                                            
        /// <returns>current dropShadowEffect</returns>                                                                                    
        public static DropShadowEffect Opacity(this DropShadowEffect dropShadowEffect, Double opacity)
        {
            dropShadowEffect.Opacity = opacity;
            return dropShadowEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DropShadowEffect.BlurRadius"/> property of the current <see cref="DropShadowEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" dropShadowEffect">current <see cref="DropShadowEffect"/></param>                                                          
        /// <param name="blurRadius">blurRadius value</param>                                                                            
        /// <returns>current dropShadowEffect</returns>                                                                                    
        public static DropShadowEffect BlurRadius(this DropShadowEffect dropShadowEffect, Double blurRadius)
        {
            dropShadowEffect.BlurRadius = blurRadius;
            return dropShadowEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="DropShadowEffect.RenderingBias"/> property of the current <see cref="DropShadowEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" dropShadowEffect">current <see cref="DropShadowEffect"/></param>                                                          
        /// <param name="renderingBias">renderingBias value</param>                                                                            
        /// <returns>current dropShadowEffect</returns>                                                                                    
        public static DropShadowEffect RenderingBias(this DropShadowEffect dropShadowEffect, RenderingBias renderingBias)
        {
            dropShadowEffect.RenderingBias = renderingBias;
            return dropShadowEffect;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="EmbossBitmapEffect"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class EmbossBitmapEffectFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="EmbossBitmapEffect.LightAngle"/> property of the current <see cref="EmbossBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" embossBitmapEffect">current <see cref="EmbossBitmapEffect"/></param>                                                          
        /// <param name="lightAngle">lightAngle value</param>                                                                            
        /// <returns>current embossBitmapEffect</returns>                                                                                    
        public static EmbossBitmapEffect LightAngle(this EmbossBitmapEffect embossBitmapEffect, Double lightAngle)
        {
            embossBitmapEffect.LightAngle = lightAngle;
            return embossBitmapEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="EmbossBitmapEffect.Relief"/> property of the current <see cref="EmbossBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" embossBitmapEffect">current <see cref="EmbossBitmapEffect"/></param>                                                          
        /// <param name="relief">relief value</param>                                                                            
        /// <returns>current embossBitmapEffect</returns>                                                                                    
        public static EmbossBitmapEffect Relief(this EmbossBitmapEffect embossBitmapEffect, Double relief)
        {
            embossBitmapEffect.Relief = relief;
            return embossBitmapEffect;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="OuterGlowBitmapEffect"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class OuterGlowBitmapEffectFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="OuterGlowBitmapEffect.GlowColor"/> property of the current <see cref="OuterGlowBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" outerGlowBitmapEffect">current <see cref="OuterGlowBitmapEffect"/></param>                                                          
        /// <param name="glowColor">glowColor value</param>                                                                            
        /// <returns>current outerGlowBitmapEffect</returns>                                                                                    
        public static OuterGlowBitmapEffect GlowColor(this OuterGlowBitmapEffect outerGlowBitmapEffect, Color glowColor)
        {
            outerGlowBitmapEffect.GlowColor = glowColor;
            return outerGlowBitmapEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="OuterGlowBitmapEffect.GlowSize"/> property of the current <see cref="OuterGlowBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" outerGlowBitmapEffect">current <see cref="OuterGlowBitmapEffect"/></param>                                                          
        /// <param name="glowSize">glowSize value</param>                                                                            
        /// <returns>current outerGlowBitmapEffect</returns>                                                                                    
        public static OuterGlowBitmapEffect GlowSize(this OuterGlowBitmapEffect outerGlowBitmapEffect, Double glowSize)
        {
            outerGlowBitmapEffect.GlowSize = glowSize;
            return outerGlowBitmapEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="OuterGlowBitmapEffect.Noise"/> property of the current <see cref="OuterGlowBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" outerGlowBitmapEffect">current <see cref="OuterGlowBitmapEffect"/></param>                                                          
        /// <param name="noise">noise value</param>                                                                            
        /// <returns>current outerGlowBitmapEffect</returns>                                                                                    
        public static OuterGlowBitmapEffect Noise(this OuterGlowBitmapEffect outerGlowBitmapEffect, Double noise)
        {
            outerGlowBitmapEffect.Noise = noise;
            return outerGlowBitmapEffect;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="OuterGlowBitmapEffect.Opacity"/> property of the current <see cref="OuterGlowBitmapEffect"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" outerGlowBitmapEffect">current <see cref="OuterGlowBitmapEffect"/></param>                                                          
        /// <param name="opacity">opacity value</param>                                                                            
        /// <returns>current outerGlowBitmapEffect</returns>                                                                                    
        public static OuterGlowBitmapEffect Opacity(this OuterGlowBitmapEffect outerGlowBitmapEffect, Double opacity)
        {
            outerGlowBitmapEffect.Opacity = opacity;
            return outerGlowBitmapEffect;
        }
    }
    /// <summary>                                                                                                                    
    /// <see cref="PixelShader"/> fluent api                                                                                           
    /// </summary>                                                                                                                   
    public static class PixelShaderFluent
    {
        /// <summary>                                                                                                                
        /// Set the <see cref="PixelShader.UriSource"/> property of the current <see cref="PixelShader"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pixelShader">current <see cref="PixelShader"/></param>                                                          
        /// <param name="uriSource">uriSource value</param>                                                                            
        /// <returns>current pixelShader</returns>                                                                                    
        public static PixelShader UriSource(this PixelShader pixelShader, Uri uriSource)
        {
            pixelShader.UriSource = uriSource;
            return pixelShader;
        }
        /// <summary>                                                                                                                
        /// Set the <see cref="PixelShader.ShaderRenderMode"/> property of the current <see cref="PixelShader"/>                                 
        /// </summary>                                                                                                               
        /// <param name=" pixelShader">current <see cref="PixelShader"/></param>                                                          
        /// <param name="shaderRenderMode">shaderRenderMode value</param>                                                                            
        /// <returns>current pixelShader</returns>                                                                                    
        public static PixelShader ShaderRenderMode(this PixelShader pixelShader, ShaderRenderMode shaderRenderMode)
        {
            pixelShader.ShaderRenderMode = shaderRenderMode;
            return pixelShader;
        }
    }
}
